<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Getting started with Camunda Platform</title>
    <link>/test-docs/get-started/</link>
    <description>Recent content on Getting started with Camunda Platform</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/test-docs/get-started/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Download and Installation</title>
      <link>/test-docs/get-started/archive/java-process-app/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/archive/java-process-app/install/</guid>
      <description>First you need to set up your development environment and install the Camunda Platform and the Camunda Modeler.
Prerequisites Make sure you have the following set of tools installed:
 Java JDK 1.8+, Apache Maven (optional, if not installed you can use embedded Maven inside Eclipse.) A modern web browser (recent Firefox, Chrome or Microsoft Edge will work fine) Eclipse integrated development environment (IDE)  Camunda Platform First, download a distribution of the Camunda Platform.</description>
    </item>
    
    <item>
      <title>Download and Installation</title>
      <link>/test-docs/get-started/archive/javaee7/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/archive/javaee7/install/</guid>
      <description>First you need to set up your development environment and install the Camunda Platform and the Camunda Modeler.
Prerequisites Make sure you have the following set of tools installed:
 Java JDK 1.8+ Apache Maven (optional, if not installed you can use embedded Maven inside Eclipse.) A modern web browser (recent Firefox, Chrome or Microsoft Edge will work fine) Eclipse integrated development environment (IDE)  Install Camunda Platform First, download a distribution of the Camunda Platform.</description>
    </item>
    
    <item>
      <title>Download and Installation</title>
      <link>/test-docs/get-started/dmn/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/dmn/install/</guid>
      <description>First you need to set up your development environment and install the Camunda Platform and the Camunda Modeler.
Prerequisites Make sure you have the following set of tools installed:
 Java JDK 11+, Apache Maven (optional, if not installed you can use embedded Maven inside Eclipse.) A modern web browser (recent Firefox, Chrome or Microsoft Edge will work fine) Eclipse integrated development environment (IDE)  Camunda Platform First, download a distribution of the Camunda Platform.</description>
    </item>
    
    <item>
      <title>Download and Installation (1/6)</title>
      <link>/test-docs/get-started/quick-start/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/quick-start/install/</guid>
      <description>First, you need to install the Camunda Platform and the Camunda Modeler.
In the following section, we&amp;rsquo;ll describe how to install the Camunda Platform locally on your machine.
Hint If you prefer, you can also run the Camunda Platform with Docker:
docker pull camunda/camunda-bpm-platform:run-latest docker run -d --name camunda -p 8080:8080 camunda/camunda-bpm-platform:run-latest  Afterwards, you can install the Camunda Modeler.
 Prerequisites Please make sure you have the following installed:</description>
    </item>
    
    <item>
      <title>Requirements</title>
      <link>/test-docs/get-started/archive/rpa/requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/archive/rpa/requirements/</guid>
      <description>Several components are involved in setting up proper RPA Orchestration in this guide. Therefore, a couple of requirements should be fulfilled before starting with this guide. You can also jump ahead to the Installation &amp;amp; Configuration page if you are familiar with the requirements already.
Knowledge Requirements In order to succeed with this getting started guide, we expect that you already know
 How to create and trigger robots with your RPA vendor (UiPath or AutomationAnywhere) How to model and execute BPMN process diagrams with the Camunda stack How to work with process variables as part of JUEL expressions  If you never executed a process model with the Camunda engine, we recommend starting with the Quick Start Guide first.</description>
    </item>
    
    <item>
      <title>Setup a Spring Boot Project</title>
      <link>/test-docs/get-started/spring-boot/project-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/spring-boot/project-setup/</guid>
      <description>First, let&amp;rsquo;s set up your first process application project in the IDE of your choice, the following description uses Eclipse.
Requirements The project requires Java 17&amp;frasl;21.
Set Up a Java Project We will start by setting up a Spring Boot application as an Apache Maven Project inside Eclipse. This consists of three steps:
 Create a new Maven Project in Eclipse Add the Camunda &amp;amp; Spring Boot dependencies Add a main class as an entry point for launching the Spring Boot application.</description>
    </item>
    
    <item>
      <title>Setup a Spring Web Application Project</title>
      <link>/test-docs/get-started/archive/spring/project-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/archive/spring/project-setup/</guid>
      <description>Now you are ready to set up your first process application project in Eclipse or the IDE of your choice, the following description uses Eclipse.
Set Up a Java Project We will start by setting up a Spring web application as an Apache Maven Project inside Eclipse. This consists of four steps:
 Create a new Maven Project in Eclipse Add the Camunda &amp;amp; Spring framework dependencies Add the web.</description>
    </item>
    
    <item>
      <title>Apache Maven Coordinates</title>
      <link>/test-docs/get-started/apache-maven/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/apache-maven/</guid>
      <description>This page lists the most commonly used Apache Maven Coordinates for Camunda.
Most Camunda artifacts are pushed to maven central.
Camunda BOM (Bill of Materials) Community Edition &amp;lt;dependencyManagement&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.camunda.bpm&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camunda-bom&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;7.22.0&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;/dependencyManagement&amp;gt;  Enterprise Edition To use the Enterprise Edition dependencies, you have to add the Enterprise Edition Maven Repository to your project.
&amp;lt;dependencyManagement&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.camunda.bpm&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camunda-bom&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;7.22.0-ee&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;/dependencyManagement&amp;gt;  Use the BOM!</description>
    </item>
    
    <item>
      <title>Configure a Spring Boot Project</title>
      <link>/test-docs/get-started/spring-boot/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/spring-boot/configuration/</guid>
      <description>The Camunda Spring Boot Application created in previous step uses the default and best practice configuration, embedded in a starter. There are several ways to customize or override the configuration. The easiest is to provide a set of parameters in the application.yaml (or application.properties) file. The full list of supported configuration parameters can be found here.
Customize Configuration Let&amp;rsquo;s create an application.yaml file in the src/main/resources folder with the following content:</description>
    </item>
    
    <item>
      <title>Embedded Process Engine Configuration</title>
      <link>/test-docs/get-started/archive/spring/embedded-process-engine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/archive/spring/embedded-process-engine/</guid>
      <description>Now that you have set up the project with the correct Maven dependencies, we can start configuring the process engine.
Configure an Embedded Process Engine Add the following Spring beans to the LoanApplication class as follows:
package org.camunda.bpm.getstarted.loanapproval; import javax.sql.DataSource; import org.camunda.bpm.engine.HistoryService; import org.camunda.bpm.engine.ManagementService; import org.camunda.bpm.engine.ProcessEngine; import org.camunda.bpm.engine.RepositoryService; import org.camunda.bpm.engine.RuntimeService; import org.camunda.bpm.engine.TaskService; import org.camunda.bpm.engine.spring.ProcessEngineFactoryBean; import org.camunda.bpm.engine.spring.SpringProcessEngineConfiguration; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.jdbc.datasource.DataSourceTransactionManager; import org.springframework.jdbc.datasource.DriverManagerDataSource; import org.springframework.transaction.PlatformTransactionManager; @Configuration public class LoanApplicationContext { @Bean public DataSource dataSource() { DriverManagerDataSource dataSource = new DriverManagerDataSource(); dataSource.</description>
    </item>
    
    <item>
      <title>Executing automated steps (2/6)</title>
      <link>/test-docs/get-started/quick-start/service-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/quick-start/service-task/</guid>
      <description>In this section, you&amp;rsquo;ll learn how to create your first BPMN 2.0 process with the Camunda Modeler and how to execute automated steps. Start by opening up Camunda Modeler.
Create a new BPMN Diagram Create a new BPMN diagram by clicking File &amp;gt; New File &amp;gt; BPMN Diagram (Camunda Platform).
  Start with a Simple Process Start by modeling a simple process.
  Double-click on the Start Event.</description>
    </item>
    
    <item>
      <title>Installation &amp; Configuration</title>
      <link>/test-docs/get-started/archive/rpa/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/archive/rpa/installation/</guid>
      <description>After familiarizing yourself with all Requirements, this section will dive deeper into the components involved in RPA Orchestration and how you should set them up. If your setup is already prepared, jump ahead to Orchestrating RPA Bots
RPA Vendor Credentials To orchestrate RPA bots, we will connect the Camunda Platform Workflow Engine to your RPA vendor via the Camunda RPA Bridge. This component will require configuration parameters to connect to your RPA vendor.</description>
    </item>
    
    <item>
      <title>Setup a Java EE Application Project</title>
      <link>/test-docs/get-started/archive/javaee7/project-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/archive/javaee7/project-setup/</guid>
      <description>Now you are ready to set up your first process application project in the IDE of your choice, the following description uses Eclipse.
Set up your project Fancy to save work and use a project template instead? You don&amp;rsquo;t have to setup the project manually but can also use a Maven Archetype (which is like a project template), see Maven Archetypes for details. The archetype will create a project according to our best practices.</description>
    </item>
    
    <item>
      <title>Setup a Java Project for BPMN 2.0</title>
      <link>/test-docs/get-started/archive/java-process-app/project-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/archive/java-process-app/project-setup/</guid>
      <description>Now you are ready to set up your first process application project in the IDE of your choice, the following description uses Eclipse.
Create a new Maven Project Fancy to save work and use a project template instead? You don&amp;rsquo;t have to setup the project manually but can also use a Maven Archetype (which is like a project template), see Maven Archetypes for details. The archetype will create a project according to our best practices.</description>
    </item>
    
    <item>
      <title>Setup a Java Project for DMN</title>
      <link>/test-docs/get-started/dmn/project-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/dmn/project-setup/</guid>
      <description>Now you are ready to set up your first process application project in the IDE of your choice, the following description uses Eclipse.
Terminology - Process vs. Decisions DMN is a modeling language for decisions, whereas BPMN is a language for processes. This tutorial is about decisions. However, due to Camunda&amp;rsquo;s BPMN-focused heritage, the Java project contains classes and files with names like ProcessApplication and processes.xml. These are in fact generally applicable and can be used with both processes and decisions.</description>
    </item>
    
    <item>
      <title>Create a DMN Decision Table</title>
      <link>/test-docs/get-started/dmn/model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/dmn/model/</guid>
      <description>In this section you learn how to create your first DMN Decision Table with the Camunda Modeler. The table will contain the decision logic about the desired dish for a given season and guest count.
Now start up the Camunda Modeler.
Create a new Decision Diagram Create a new DMN diagram by clicking File &amp;gt; New File &amp;gt; DMN Diagram.
  Start with the Table Header Start by setting the name and the id of the decision.</description>
    </item>
    
    <item>
      <title>Deploy the Process (3/6)</title>
      <link>/test-docs/get-started/quick-start/deploy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/quick-start/deploy/</guid>
      <description>In the next step, you&amp;rsquo;ll deploy the Process and start a new instance so you can see that your simple process is working correctly.
Deployment Support BPMN diagrams must be created for the process engine they intend to be deployed on. You cannot run a BPMN diagram modeled for Camunda Platform in Camunda Cloud, or vice versa, at this time.
 Use the Camunda Modeler to Deploy the Process In order to deploy the Process, click on the deploy button in the Camunda Modeler, then give it the Deployment Name &amp;ldquo;Payment Retrieval&amp;rdquo; and click the Deploy button.</description>
    </item>
    
    <item>
      <title>Invoking a Spring Bean from a BPMN 2.0 Service Task</title>
      <link>/test-docs/get-started/archive/spring/service-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/archive/spring/service-task/</guid>
      <description>In this section we learn how to start a process from a Spring Bean and how to invoke a Spring Bean from a BPMN 2.0 Service Task.
Add a Spring Bean Service Task Now that we know how to bootstrap the process engine in a Spring Application context, we can add a BPMN 2.0 process model and interact with the process form inside our Spring beans. In this section we will</description>
    </item>
    
    <item>
      <title>Modeling a BPMN 2.0 Process</title>
      <link>/test-docs/get-started/archive/java-process-app/model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/archive/java-process-app/model/</guid>
      <description>In this section you learn how to create your first BPMN 2.0 process with the Camunda Modeler. Start up the Camunda Modeler now.
Create a new BPMN Diagram Create a new BPMN diagram by clicking File &amp;gt; New File &amp;gt; BPMN Diagram.
  Start with a Simple Process Start by modeling a simple process.
  Double-click on the Start Event. A text box opens. Type &amp;ldquo;Loan Request Received&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Modeling a BPMN 2.0 Process</title>
      <link>/test-docs/get-started/archive/javaee7/model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/archive/javaee7/model/</guid>
      <description>In this section we model our sample process with the Camunda Modeler.
Create a new BPMN 2.0 Diagram   Open Camunda Modeler and create a new BPMN diagram by Clicking File &amp;gt; New File &amp;gt; BPMN Diagram.
Create the Sample Pizza Order Process   The sample process models a pizza order approval. In the first service task, the order should be persisted to our database. The next step is the approval of the order by a user.</description>
    </item>
    
    <item>
      <title>Modeling a BPMN 2.0 Process</title>
      <link>/test-docs/get-started/spring-boot/model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/spring-boot/model/</guid>
      <description>In this section we learn how to deploy a process and invoke a Spring Bean from a BPMN 2.0 Service Task.
Deploy and Invoke BPMN Process Now that we know how to bootstrap the process engine within a Spring Boot Application, we can add a BPMN 2.0 process model and interact with the process from inside our Spring beans. In this section, we will
 Model an executable BPMN 2.</description>
    </item>
    
    <item>
      <title>Orchestrating RPA Bots</title>
      <link>/test-docs/get-started/archive/rpa/orchestrating-bots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/archive/rpa/orchestrating-bots/</guid>
      <description>After setting up all components in the Installation &amp;amp; Configuration, we will now dive into a concrete example of setting up RPA Orchestration. If your example is already up and running and you would like to dig deeper into Error Handling, go ahead.
Creating and deploying a Bot UiPath To orchestrate your RPA bots and the tasks that they automate, you need to create a UiPath package that contains the scripts that the RPA bots should execute.</description>
    </item>
    
    <item>
      <title>Add a User Task to the Process (4/6)</title>
      <link>/test-docs/get-started/quick-start/user-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/quick-start/user-task/</guid>
      <description>In this section, you&amp;rsquo;ll learn how to involve humans in your process by using BPMN 2.0 User Tasks.
Add a User Task We want to modify our process so that we can involve humans.
To do so, open the process in the Camunda Modeler.
Select the create/remove space tool (&amp;lt;||&amp;gt;) from the Modeler&amp;rsquo;s left-hand menu, and use it to create space between the Start Event and the &amp;ldquo;Charge Credit Card&amp;rdquo; Service Task (click and drag the cursor to the right).</description>
    </item>
    
    <item>
      <title>Deploy and Test the BPMN 2.0 Process</title>
      <link>/test-docs/get-started/archive/java-process-app/deploy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/archive/java-process-app/deploy/</guid>
      <description>The next step consists of building, deploying and testing the process.
Build the Web Application with Maven Select the pom.xml in the Package Explorer, perform a right-click and select Run As / Maven Install. This will generate a WAR file named loan-approval-0.1.0-SNAPSHOT.war in the target/ folder of your Maven project.
If you saved your bpmn file from the previous chapter in src/main/resources, the war file includes the bpmn file, too.</description>
    </item>
    
    <item>
      <title>Deploy the Java EE Process Application</title>
      <link>/test-docs/get-started/archive/javaee7/deploy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/archive/javaee7/deploy/</guid>
      <description>The next step consists in building and deploying the process application.
Build the Process Application To deploy the process application select the pom.xml in the Package Explorer, perform a right-click and select Run As / Maven Clean and afterwards Run As / Maven Install. This will generate a WAR file named pizza-order.war in the target/ folder of your Maven project.
If the pizza-order.war file is not visible after having performed the Maven build, you need to refresh the project (F5) in Eclipse.</description>
    </item>
    
    <item>
      <title>Error Handling</title>
      <link>/test-docs/get-started/archive/rpa/error-handling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/archive/rpa/error-handling/</guid>
      <description>Now that we can Orchestrate RPA Bots let&amp;rsquo;s have a look at how to react to a failing RPA bot or - generally speaking - how to handle the result of a bot as a BPMN error. Please note that the features presented here only work with a Camunda Platform 7.15 or later.
Scenarios As mentioned already, we can generally react to the result of an RPA bot execution by throwing a BPMN error.</description>
    </item>
    
    <item>
      <title>Evaluate, Deploy and Test the decision table</title>
      <link>/test-docs/get-started/dmn/deploy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/dmn/deploy/</guid>
      <description>In this step, we use Java Code to evaluate the decision table. Then we deploy the web application to Apache Tomcat and verify the result in Cockpit.
Evaluate the Decision Table To directly evaluate the decision table after deployment, add the following method to your Application class:
package org.camunda.bpm.getstarted.dmn; @ProcessApplication(&amp;quot;Dinner App DMN&amp;quot;) public class DinnerApplication extends ServletProcessApplication { protected final static Logger LOGGER = Logger.getLogger(DinnerApplication.class.getName()); @PostDeploy public void evaluateDecisionTable(ProcessEngine processEngine) { DecisionService decisionService = processEngine.</description>
    </item>
    
    <item>
      <title>Using Shared Process Engine</title>
      <link>/test-docs/get-started/archive/spring/shared-process-engine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/archive/spring/shared-process-engine/</guid>
      <description>In the last section of this tutorial we learn how to use a shared process engine.
Alternative Configuration: Using Shared Process Engine So far, we explored how to set up an embedded process engine inside a web application using the Spring Framework. You can also use the Spring Framework to develop applications that use a shared process engine. As opposed to the embedded process engine, the shared process engine is controlled independently from an application and is started / stopped by the runtime container (like Apache Tomcat).</description>
    </item>
    
    <item>
      <title>Add Gateways to the Process (5/6)</title>
      <link>/test-docs/get-started/quick-start/gateway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/quick-start/gateway/</guid>
      <description>In this section, you&amp;rsquo;ll learn how to make your process more dynamic by using BPMN 2.0 Exclusive Gateways.
Add Two Gateways We want to modify our process so that it&amp;rsquo;s more dynamic.
To do so, open the process in the Camunda Modeler.
Next, from the Modeler&amp;rsquo;s left-hand menu, select the gateway shape (diamond) and drag it into position between the Start Event and the Service Task. Use the create space tool again as needed.</description>
    </item>
    
    <item>
      <title>Adding Start and Task Forms to a BPMN 2.0 Process</title>
      <link>/test-docs/get-started/archive/java-process-app/forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/archive/java-process-app/forms/</guid>
      <description>In the next step, we want to add a task form to the application.
Add a Start Form Create a new form in Camunda Modeler and set its id to request-loan.
Add a Text Field, set the Field Label to Customer ID and the Key to customerId.
Add a Number Field, set the Field Label to Amount and the Key to amount.
Save the form with the file name request-loan.</description>
    </item>
    
    <item>
      <title>Model, Evaluate and Deploy a Decision Requirements Graph</title>
      <link>/test-docs/get-started/dmn/drg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/dmn/drg/</guid>
      <description>In this step, we extend the previous example by a second decision Beverages which uses the Dish decision table as input. We model this dependency between the decisions within a Decision Requirements Graph (DRG) using the Camunda Modeler. Then, we adjust the Application class to evaluate the Beverages decision, deploy the web application to Apache Tomcat and verify the result in Cockpit.
Decision Requirements Graph vs. Decision Requirements Diagram The visual representation of a Decision Requirements Graph (DRG) is called Decision Requirements Diagram (DRD).</description>
    </item>
    
    <item>
      <title>Start a BPMN Process using a JSF Form</title>
      <link>/test-docs/get-started/archive/javaee7/start-form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/archive/javaee7/start-form/</guid>
      <description>In this step, we add a start form and configure it in the BPMN 2.0 process, then, re-deploy the application and start the process from the Camunda Tasklist.
Add a Start Form Go back to eclipse and add a file named placeorder.xhtml to the src/main/webapp folder. Add the following content:
&amp;lt;!DOCTYPE HTML&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot; xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot; xmlns:ui=&amp;quot;http://java.sun.com/jsf/facelets&amp;quot; xmlns:h=&amp;quot;http://java.sun.com/jsf/html&amp;quot; xmlns:f=&amp;quot;http://java.sun.com/jsf/core&amp;quot;&amp;gt; &amp;lt;f:view&amp;gt; &amp;lt;f:metadata&amp;gt; &amp;lt;!-- Start a new process instance. The Process Definition Key is read internally from request parameters and cached in the CDI conversation scope.</description>
    </item>
    
    <item>
      <title>Invoke an EJB from a BPMN 2.0 Service Task</title>
      <link>/test-docs/get-started/archive/javaee7/service-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/archive/javaee7/service-task/</guid>
      <description>In this section we learn how to call an EJB from a BPMN 2.0 Service Task.
Add EJB Service Task After the process has been started with the new order as process variables, we want to persist the order to the database and only save the newly generated order id as process variable.
Add an Entity Bean to the Process Application To persist the entity with JPA, we add an entity bean to our process application.</description>
    </item>
    
    <item>
      <title>Invoking a Java Class from a BPMN 2.0 Service Task</title>
      <link>/test-docs/get-started/archive/java-process-app/service-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/archive/java-process-app/service-task/</guid>
      <description>In the last section of this tutorial we learn how to invoke a Java class from a BPMN 2.0 service task.
Add a Service Task to the Process Use the Camunda Modeler to add a service task after the user task. To do so, select the activity shape (rectangle) and drag it onto a sequence flow (see screenshot). Name it Process Request. Change the activity type to Service Task by clicking on it and using the wrench button.</description>
    </item>
    
    <item>
      <title>Leverage business rules (6/6)</title>
      <link>/test-docs/get-started/quick-start/decision-automation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/quick-start/decision-automation/</guid>
      <description>In this section, you&amp;rsquo;ll learn how to add decision automation to your process by using BPMN 2.0 Business Rule Tasks and DMN 1.3 Decision Tables.
Add a Business Rule Task to the Process Use the Camunda Modeler to open the Payment Retrieval process then click on the Approve Payment Task. Change the activity type to Business Rule Task in the wrench button menu.
  Next, link the Business Rule Task to a DMN table by changing Implementation to DMN and Decision Ref to approve-payment in the properties panel.</description>
    </item>
    
    <item>
      <title>Implement a JSF Task Form for a BPMN User Task.</title>
      <link>/test-docs/get-started/archive/javaee7/task-form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/archive/javaee7/task-form/</guid>
      <description>Now we add a task form and configure it in the BPMN 2.0 process, then, re-deploy the application and go to the Camunda Tasklist to see the JSF form.
  After the order has been persisted, a user can approve the order. For that, a task form is needed to display the order information and backend logic to fetch and update business objects.
Add a CDI Controller Bean To update the persisted entity we use a named CDI Bean ApproveOrderController.</description>
    </item>
    
    <item>
      <title>Complete the BPMN 2.0 Process</title>
      <link>/test-docs/get-started/archive/javaee7/complete-process/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/archive/javaee7/complete-process/</guid>
      <description>In the last section of this tutorial we learn how to complete the BPMN 2.0 Process.
Complete the Process Add Prepare Pizza Task Form   If the user approves the pizza order the pizza has to be prepared. So we add a user task form in which the user can confirm that preparation of the pizza has been completed.
Go back to Eclipse and add a file named preparepizza.</description>
    </item>
    
    <item>
      <title>Congratulation!</title>
      <link>/test-docs/get-started/quick-start/complete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/quick-start/complete/</guid>
      <description>Your first process instance is running successfully! Now that you got the process running you may move on to step four to learn how you can involve humans in your process.
  Feel free to remove the Desktop.getDesktop().browse() line if you don&amp;rsquo;t want to open this page again.</description>
    </item>
    
    <item>
      <title>Congratulation!</title>
      <link>/test-docs/get-started/quick-start/success/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/test-docs/get-started/quick-start/success/</guid>
      <description>Your first process instance is running successfully! Now that you got the process running you may move on to step four to learn how you can involve humans in your process.
  Feel free to remove the open() line if you don&amp;rsquo;t want to open this page again.</description>
    </item>
    
  </channel>
</rss>