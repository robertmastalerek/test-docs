<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Camunda 7 documentation</title>
    <link>/manual/develop/</link>
    <description>Recent content on Camunda 7 documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/manual/develop/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Install the Camunda Modeler</title>
      <link>/manual/develop/installation/camunda-modeler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/installation/camunda-modeler/</guid>
      <description>This content has moved to docs.camunda.io and is available here for all future versions.</description>
    </item>
    
    <item>
      <title>Install the Database Schema</title>
      <link>/manual/develop/installation/database-schema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/installation/database-schema/</guid>
      <description>This document will guide you through the installation and update of the Camunda 7 database schema used by the process engine. Regardless of the architecture of your application setup, the process engine always requires this database schema. In a production environment, we recommend setting up this schema yourself and reference the prepared database instance in your application configuration. Consult the installation guide related to your setup to configure the database for a remote engine, shared engine, or embedded engine accordingly.</description>
    </item>
    
    <item>
      <title>Dashboard</title>
      <link>/manual/develop/webapps/cockpit/cmmn/dashboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/cmmn/dashboard/</guid>
      <description>Enterprise Feature Please note that this feature is only included in the enterprise edition of Camunda 7, it is not available in the community edition.
 Check the Camunda enterprise homepage for more information or get your free trial version.  The CMMN Cases dashboard of Cockpit is the entry point for case monitoring. It comes with a pre-installed plugin, which lets you see deployed case definitions. Additional plugins can be added to the cases dashboard.</description>
    </item>
    
    <item>
      <title>Dashboard</title>
      <link>/manual/develop/webapps/cockpit/dmn/dashboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/dmn/dashboard/</guid>
      <description>The decisions dashboard of Cockpit is the entry point for decision monitoring. It comes with a pre-installed plugin, which lets you see deployed decision definitions. Additional plugins can be added to the decisions dashboard.
Deployed Decisions   This plugin provides you with a list of deployed decision definitions. You can click on the name of a decision to go to the decision definition view and access more details, like the DMN table or executed decision instances view.</description>
    </item>
    
    <item>
      <title>Install Camunda 7 Run</title>
      <link>/manual/develop/installation/camunda-bpm-run/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/installation/camunda-bpm-run/</guid>
      <description>What is a Remote Engine Distribution? If you need a Remote or Shared Engine Distribution depends on your use-case. Check out the architecture overview for more information.
 This page describes the steps to execute Camunda Run.
Requirements Please make sure that you have the Java Runtime Environment 17 installed.
You can verify this by using your terminal, shell, or command line:
java -version If you need to install Java Runtime Environment, you can find the download from Oracle here.</description>
    </item>
    
    <item>
      <title>1.0 to 1.1</title>
      <link>/manual/develop/reference/cmmn11/migration/10-to-11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/cmmn11/migration/10-to-11/</guid>
      <description>In order to update existing CMMN 1.0 XMLs to valid CMMN 1.1 the following adjustments must be done.
 The namespace must be updated as follows:   The &amp;lt;body/&amp;gt; element from expressions must be removed:   The attributes entryCriteriaRefs and exitCriteriaRefs are dropped, so that the following adjustments must be done:   The attribute description is not available anymore. Instead of the description attribute use the &amp;lt;documentation/&amp;gt; element:  </description>
    </item>
    
    <item>
      <title>Authentication</title>
      <link>/manual/develop/webapps/shared-options/authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/shared-options/authentication/</guid>
      <description>Authentication means verifying a user&amp;rsquo;s identity against the Camunda web apps.
A user authenticates against the web apps on the login page by providing a username and password. If the authentication is successful, the user gets access to the web apps and can work on tasks in Tasklist or perform operations in Cockpit, for example.
The authentication information consists of the following:
 Process engine name Username Group memberships Tenant memberships Authorized applications (Tasklist, Cockpit, Admin)  The Camunda web apps correlate the authentication information against authorizations to determine what data the user can query for and which operations the user can perform.</description>
    </item>
    
    <item>
      <title>Batch operation</title>
      <link>/manual/develop/webapps/cockpit/batch/batch-operation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/batch/batch-operation/</guid>
      <description>Enterprise Feature Please note that this feature is only included in the enterprise edition of Camunda 7, it is not available in the community edition.
 Check the Camunda enterprise homepage for more information or get your free trial version.    Definition Of operation It is possible to execute the following batch operations:
 Delete running process instances. Delete finished process instances. Set retries of Jobs belonging to process instances.</description>
    </item>
    
    <item>
      <title>bpm-platform.xml</title>
      <link>/manual/develop/reference/deployment-descriptors/descriptors/bpm-platform-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/deployment-descriptors/descriptors/bpm-platform-xml/</guid>
      <description>The bpm-platform.xml file is part of the Camunda 7 distribution and can be used for configuration of process engines and the job executor. It is used to configure Camunda 7 in the following distributions:
 Apache Tomcat IBM WebSphere Application Server Oracle WebLogic Application Server  Wildfly The bpm-platform.xmlfile is not used in the Camunda 7 distribution for Wildfly. There, the configuration is added to the central application server configuration file (standalone.</description>
    </item>
    
    <item>
      <title>Camunda 7 Services</title>
      <link>/manual/develop/user-guide/runtime-container-integration/bpm-platform-services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/runtime-container-integration/bpm-platform-services/</guid>
      <description>To inspect the current state of configured process engines and deployed process applications, the class org.camunda.bpm.BpmPlatform offers access to the ProcessEngineService and the ProcessApplicationService.
ProcessEngineService The ProcessEngineService can be accessed by calling BpmPlatform.getProcessEngineService(). It offers access to the default process engine, as well as any process engine by its name as specified in the process engine configuration. It returns ProcessEngine objects from which any services for a specific engine can be accessed.</description>
    </item>
    
    <item>
      <title>Camunda BPMN Extension Elements</title>
      <link>/manual/develop/reference/bpmn20/custom-extensions/extension-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/custom-extensions/extension-elements/</guid>
      <description>The following attributes are extension attributes for the camunda namespace http://camunda.org/schema/1.0/bpmn.
connector connectorId constraint entry errorEventDefinition executionListener expression failedJobRetryTimeCycle field formData formField formProperty in inputParameter inputOutput list map out outputParameter potentialStarter properties property script string taskListener validation value </description>
    </item>
    
    <item>
      <title>Case Definition View</title>
      <link>/manual/develop/webapps/cockpit/cmmn/case-definition-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/cmmn/case-definition-view/</guid>
      <description>Enterprise Feature Please note that this feature is only included in the enterprise edition of Camunda 7, it is not available in the community edition.
 Check the Camunda enterprise homepage for more information or get your free trial version.    On the case definition view, you can find a diagram of the deployed case definition. Use the mouse to navigate through the diagram. By turning the mouse wheel you can zoom in and out.</description>
    </item>
    
    <item>
      <title>Classic vs Fluent API</title>
      <link>/manual/develop/reference/cmmn11/api/classic-vs-fluent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/cmmn11/api/classic-vs-fluent/</guid>
      <description>To interact with case instances and executions, the process engine offers the case service. It can be retrieved by processEngine.getCaseService().
The CaseService offers two API variants. One is in the following referred to as the classic API, since it is very similar to the API offered by the RuntimeService for BPMN processes. The fluent API follows a different concept in that it allows composition of case service commands by method chaining.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>/manual/develop/webapps/cockpit/extend/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/extend/configuration/</guid>
      <description>You can override the default configuration of Cockpit using a central configuration file located in app/cockpit/scripts/config.js. The following configuration options are available:
Logo and Header Color You can change the visual aspects of Cockpit. The user stylesheet file is located in app/cockpit/styles/user-styles.css. This file contains CSS which is loaded into Cockpit and can override the standard styles.
/* hides the Camunda logo */ .app-banner svg { display: none; } .app-banner { /* hides the &amp;#34;Camunda Cockpit&amp;#34; text */ text-indent: 200vw; /* put your logo */ background-image: url(.</description>
    </item>
    
    <item>
      <title>Configure Authentication</title>
      <link>/manual/develop/reference/rest/overview/authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/rest/overview/authentication/</guid>
      <description>The REST API ships with an implementation of HTTP Basic Authentication. By default it is switched off, but can be activated by adding a servlet filter as follows:
&amp;lt;filter&amp;gt; &amp;lt;filter-name&amp;gt;camunda-auth&amp;lt;/filter-name&amp;gt; &amp;lt;filter-class&amp;gt; org.camunda.bpm.engine.rest.security.auth.ProcessEngineAuthenticationFilter &amp;lt;/filter-class&amp;gt; &amp;lt;async-supported&amp;gt;true&amp;lt;/async-supported&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;authentication-provider&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;org.camunda.bpm.engine.rest.security.auth.impl.HttpBasicAuthenticationProvider&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;/filter&amp;gt; &amp;lt;filter-mapping&amp;gt; &amp;lt;filter-name&amp;gt;camunda-auth&amp;lt;/filter-name&amp;gt; &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt; &amp;lt;/filter-mapping&amp;gt; Any engine-specific request will then be authenticated against that engine&amp;rsquo;s identity service. The GET /engine request that supplies a list of all available process engines is the only request that does not require authentication.</description>
    </item>
    
    <item>
      <title>Configure the DMN engine</title>
      <link>/manual/develop/user-guide/process-engine/decisions/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/decisions/configuration/</guid>
      <description>The configuration of the DMN engine is a part of the process engine configuration. It depends on whether you use an application managed or a shared, container managed process engine. Please refer to the Process Engine Bootstrapping for details.
This section shows how to configure the DMN engine:
 Programmatically via Java API Declarative via XML configuration  In the examples the default expression language of the input expressions is set to groovy.</description>
    </item>
    
    <item>
      <title>Configuring Spin Integration</title>
      <link>/manual/develop/user-guide/data-formats/configuring-spin-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/data-formats/configuring-spin-integration/</guid>
      <description>To use Spin with the process engine, the following is required:
 The Spin libraries must be on the engine&amp;rsquo;s classpath The Spin process engine plugin must be registered with the process engine  The following sections go into the details of integrating Spin with the process engine. Note that when you use a pre-built Camunda distribution, Spin is already integrated.
Artifacts There are three types of Spin artifacts as follows.</description>
    </item>
    
    <item>
      <title>Dashboard</title>
      <link>/manual/develop/webapps/cockpit/bpmn/dashboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/bpmn/dashboard/</guid>
      <description>The processes dashboard of Cockpit is the entry point for process monitoring. It comes with a pre-installed plugin, which lets you see deployed process definitions. Additional plugins can be added to the processes dashboard.
Deployed Processes   With this plugin you can easily observe the state of a process definition. Green and red dots signalize running and failed jobs. At this observing level a red dot signifies that there is at least one process instance or a sub process instance which has an unresolved incident.</description>
    </item>
    
    <item>
      <title>Dashboard</title>
      <link>/manual/develop/webapps/cockpit/dashboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/dashboard/</guid>
      <description>The dashboard of Cockpit provides a quick overview of running and historic operations as well as details about deployments.
At the top of the dashboard you can see a plugin with pie charts that display the amount of running process instances, open incidents and open human tasks. By clicking on the number or a section of the pie chart, you are forwarded to the respective search with preselected query parameters.</description>
    </item>
    
    <item>
      <title>Data-based Exclusive Gateway (XOR)</title>
      <link>/manual/develop/reference/bpmn20/gateways/exclusive-gateway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/gateways/exclusive-gateway/</guid>
      <description>An exclusive gateway (also called the XOR gateway or, in more technical terms, the exclusive data-based gateway), is used to model a decision in the process. When the execution arrives at this gateway, all outgoing sequence flows are evaluated in the order in which they have been defined. The sequence flow which condition evaluates to &amp;lsquo;true&amp;rsquo; (or which doesn&amp;rsquo;t have a condition set, conceptually having a &amp;lsquo;true&amp;rsquo; value defined on the sequence flow) is selected for continuing the process.</description>
    </item>
    
    <item>
      <title>Database Schema</title>
      <link>/manual/develop/user-guide/process-engine/database/database-schema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/database/database-schema/</guid>
      <description>The database schema of the process engine consists of multiple tables. The table names all start with ACT. The second part is a two-character identification of the use case of the table. This use case will also roughly match the service API.
 ACT_RE_*: RE stands for repository. Tables with this prefix contain &amp;lsquo;static&amp;rsquo; information such as process definitions and process resources (images, rules, etc.). ACT_RU_*: RU stands for runtime. These are the runtime tables that contain the runtime data of process instances, user tasks, variables, jobs, etc.</description>
    </item>
    
    <item>
      <title>Decision Definition View</title>
      <link>/manual/develop/webapps/cockpit/dmn/decision-definition-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/dmn/decision-definition-view/</guid>
      <description>On the decision definition view, you can find a table or literal expression of the deployed decision definition. You can change the version of the decision definition in the dropdown menu on the left side. The table or literal expression is then updated accordingly. You can also navigate to the deployment of the selected version that contains the decision definition. Clicking the navigate to deployment button will take you to the deployment view.</description>
    </item>
    
    <item>
      <title>Decision Requirements Definition Instance View</title>
      <link>/manual/develop/webapps/cockpit/dmn/decision-requirements-instance-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/dmn/decision-requirements-instance-view/</guid>
      <description>Enterprise Feature Please note that this feature is only included in the enterprise edition of Camunda 7, it is not available in the community edition.
 Check the Camunda enterprise homepage for more information or get your free trial version.    On the decision requirements definition instance view, you can find a diagram of the deployed decision requirements definition. Use the mouse to navigate through the diagram. By turning the mouse wheel you can zoom in and out.</description>
    </item>
    
    <item>
      <title>Decision Requirements Definition View</title>
      <link>/manual/develop/webapps/cockpit/dmn/decision-requirements-definition-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/dmn/decision-requirements-definition-view/</guid>
      <description>Enterprise Feature Please note that this feature is only included in the enterprise edition of Camunda 7, it is not available in the community edition.
 Check the Camunda enterprise homepage for more information or get your free trial version.    On the decision requirements definition view, you can find a diagram of the deployed decision requirements definition. Use the mouse to navigate through the diagram. By turning the mouse wheel you can zoom in and out.</description>
    </item>
    
    <item>
      <title>DMN Decision Table Input</title>
      <link>/manual/develop/reference/dmn/decision-table/input/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/dmn/decision-table/input/</guid>
      <description>A decision table can have one or more inputs, also called input clauses. An input clause defines the id, label, expression and type of a decision table input.
An input can be edited by double-clicking on the respective colum header in the decision table.
An input clause is represented by an input element inside a decisionTable XML element.
&amp;lt;definitions xmlns=&amp;#34;https://www.omg.org/spec/DMN/20191111/MODEL/&amp;#34; id=&amp;#34;definitions&amp;#34; name=&amp;#34;definitions&amp;#34; namespace=&amp;#34;http://camunda.org/schema/1.0/dmn&amp;#34;&amp;gt; &amp;lt;decision id=&amp;#34;dish&amp;#34; name=&amp;#34;Dish&amp;#34;&amp;gt; &amp;lt;decisionTable id=&amp;#34;decisionTable&amp;#34;&amp;gt; &amp;lt;input id=&amp;#34;input1&amp;#34; label=&amp;#34;Season&amp;#34;&amp;gt; &amp;lt;inputExpression id=&amp;#34;inputExpression1&amp;#34; typeRef=&amp;#34;string&amp;#34;&amp;gt; &amp;lt;text&amp;gt;season&amp;lt;/text&amp;gt; &amp;lt;/inputExpression&amp;gt; &amp;lt;/input&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>Download</title>
      <link>/manual/develop/introduction/downloading-camunda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/introduction/downloading-camunda/</guid>
      <description>Prerequisites Before downloading Camunda, make sure you have a JRE (Java Runtime Environment), or better, a JDK (Java Development Kit) installed. Please check the supported Java versions.
Download JDK
Download the Runtime Camunda is a flexible framework which can be used in different contexts. See [Architecture Overview] (/manual/develop/introduction/architecture/) for more details. Based on how you want to use Camunda, you can choose a different distribution.
Community vs. Enterprise Edition Camunda provides separate runtime downloads for community users and enterprise subscription customers:</description>
    </item>
    
    <item>
      <title>Embedded Subprocess</title>
      <link>/manual/develop/reference/bpmn20/subprocesses/embedded-subprocess/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/subprocesses/embedded-subprocess/</guid>
      <description>A subprocess is an activity that contains other activities, gateways, events, etc., which itself forms a process that is part of a bigger process. A subprocess is completely defined inside a parent process (that&amp;rsquo;s why it&amp;rsquo;s often called an embedded Subprocess).
Subprocesses have two major use cases:
 Subprocesses allow hierarchical modeling. Many modeling tools allow that subprocesses can be collapsed, hiding all the details of the subprocess and displaying a high-level, end-to-end overview of the business process.</description>
    </item>
    
    <item>
      <title>Embedding the DMN Engine</title>
      <link>/manual/develop/user-guide/dmn-engine/embed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/dmn-engine/embed/</guid>
      <description>The Camunda DMN engine can be used as a library in a custom application. To achieve this, add the camunda-engine-dmn artifact to the classpath of the application and then configure and build a decision engine instance. This section provides the required maven coordinates to add the DMN engine as a dependency to your project. It then shows how to configure and build a new DMN engine instance.
Maven Coordinates The Camunda DMN engine is released to Maven Central.</description>
    </item>
    
    <item>
      <title>Extension Elements</title>
      <link>/manual/develop/reference/cmmn11/custom-extensions/camunda-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/cmmn11/custom-extensions/camunda-elements/</guid>
      <description>The following elements are extension elements for the camunda namespace http://camunda.org/schema/1.0/cmmn.
caseExecutionListener expression field in out script string taskListener variableListener variableOnPart variableEvent </description>
    </item>
    
    <item>
      <title>FEEL Data Types</title>
      <link>/manual/develop/reference/dmn/feel/legacy/data-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/dmn/feel/legacy/data-types/</guid>
      <description>Heads Up! This page provides information on the legacy FEEL Engine, that was used before the current Scala-based FEEL Enginewas integrated into Camunda 7.
 The Camunda DMN engine supports the following FEEL data types.
String   FEEL supports Strings. They must be encapsulated in double quotes. They support only the equal comparison operator.
Numeric Types   FEEL supports numeric types like integer. In the Camunda DMN engine the following numeric types are available:</description>
    </item>
    
    <item>
      <title>FEEL Engine Type Handling</title>
      <link>/manual/develop/user-guide/dmn-engine/feel/type-handling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/dmn-engine/feel/type-handling/</guid>
      <description>This documentation covers supported types of variable values when used in a FEEL expression and supported output types.
In DMN, when defining a typeRef attribute on a Variable, Input or Output element, the DMN Engine tries to convert the result value of the corresponding Literal Expression, Input Expression or the Output Entry. When no typeRef attribute is specified, the DMN Engine passes the return value of the FEEL Engine directly without any conversion.</description>
    </item>
    
    <item>
      <title>Getting a Distribution</title>
      <link>/manual/develop/reference/forms/embedded-forms/integrate/getting-a-distribution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/forms/embedded-forms/integrate/getting-a-distribution/</guid>
      <description>Manual Download The Forms SDK library can be downloaded from Github.
Bower Alternatively, the Forms SDK can be installed using the Bower package manager:
bower install camunda-bpm-sdk-js --save Dependency Management The Forms SDK depends on the following libraries:
 JQuery (or a compatible DOM manipulation Library).  The Forms SDK optionally depends on the following libraries:
 AngularJS (v1.2.16).  Including the Library Next, you need to add the JavaScript Library to the page.</description>
    </item>
    
    <item>
      <title>History configuration</title>
      <link>/manual/develop/user-guide/process-engine/history/history-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/history/history-configuration/</guid>
      <description>Choose a history level The history level controls the amount of data the process engine provides via the history event stream. The following settings are available out of the box:
 NONE: no history events are fired. ACTIVITY: the following events are fired:  Process Instance START, UPDATE, END, MIGRATE: fired as process instances are being started, updated, ended and migrated Case Instance CREATE, UPDATE, CLOSE: fired as case instances are being created, updated and closed Activity Instance START, UPDATE, END, MIGRATE: fired as activity instances are being started, updated, ended and migrated Case Activity Instance CREATE, UPDATE, END: fired as case activity instances are being created, updated and ended Task Instance CREATE, UPDATE, COMPLETE, DELETE, MIGRATE: fired as task instances are being created, updated (i.</description>
    </item>
    
    <item>
      <title>HTTP Connector</title>
      <link>/manual/develop/reference/connect/http-connector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/connect/http-connector/</guid>
      <description>In Camunda Connect a Connectors class exists which automatically detects every connector in the classpath. It can be used to get the HTTP connector instance by its connector ID, which is http-connector.
HttpConnector http = Connectors.getConnector(HttpConnector.ID); Configure Apache HTTP Client Camunda Connect HTTP client uses the Apache HTTP client to make HTTP requests. Accordingly, it supports the same configuration options.
Default Configuration By default, the HTTP client uses Apache&amp;rsquo;s default configuration and respects the system properties that are supported by HTTP client.</description>
    </item>
    
    <item>
      <title>Human Task</title>
      <link>/manual/develop/reference/cmmn11/tasks/human-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/cmmn11/tasks/human-task/</guid>
      <description>A human task is used to model work that needs to be done by a human actor.
 A human task is defined in XML as follows:
&amp;lt;humanTask id=&amp;#34;theHumanTask&amp;#34; name=&amp;#34;A Human Task&amp;#34; /&amp;gt; A human task in state ENABLED can be started manually using the CaseService as follows:
caseService.manuallyStartCaseExecution(&amp;#34;aCaseExecutionId&amp;#34;); When the human task becomes ACTIVE, a new task is created in the task list of the user(s) or group(s) assigned to that task.</description>
    </item>
    
    <item>
      <title>Install the Pre-Packaged Distribution</title>
      <link>/manual/develop/installation/full/tomcat/pre-packaged/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/installation/full/tomcat/pre-packaged/</guid>
      <description>Installation Procedure  Download the pre-packaged distribution from https://downloads.camunda.cloud/release/camunda-bpm/tomcat/. Unpack the distro to a directory. Adjust the datasource according to your needs (see Manual Installation). Startup the server by running camunda-welcome.bat or by using the $TOMCAT_HOME/bin/startup.{bat/sh} script.  </description>
    </item>
    
    <item>
      <title>Install the pre-packaged Distribution</title>
      <link>/manual/develop/installation/full/jboss/pre-packaged/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/installation/full/jboss/pre-packaged/</guid>
      <description>Installation Procedure  Download the pre-packaged distribution for WildFly. Unpack the distro to a directory. Adjust the datasource according to your needs (see Manual Installation). Startup the server by running camunda-welcome.bat or by using the $WILDFLY_HOME/bin/standalone.{bat/sh} script.  </description>
    </item>
    
    <item>
      <title>Manual Activation Rule</title>
      <link>/manual/develop/reference/cmmn11/markers/manual-activation-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/cmmn11/markers/manual-activation-rule/</guid>
      <description>Can be used with: Task, Stage
 Whether the actual work of a task or stage can be performed depends on its entry criteria. Given that an entry criterion is fulfilled, there are two ways to activate a task:
 By manual activation By automatic activation  Automatic activation is the default behavior in which it is not required that a user manually activates a task. In camunda, manual activation can be done by using the CaseService API with caseService.</description>
    </item>
    
    <item>
      <title>Migration from Community Extension v. 2.2.0 to v. 2.3.0</title>
      <link>/manual/develop/update/spring-boot-starter/migration-22-23/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/spring-boot-starter/migration-22-23/</guid>
      <description>Maven dependencies The groupId for Maven dependencies has changed, it is now org.camunda.bpm.springboot. For example:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.camunda.bpm.springboot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camunda-bpm-spring-boot-starter-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.3.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Enterprise Web Applications For Enterprise users, the way to use the Spring Boot Starter has changed. Instead of using the enterprise Maven profile, you can now include a special starter in your Maven POM file:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.camunda.bpm.springboot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camunda-bpm-spring-boot-starter-webapp-ee&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.3.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; The same as before, you will also need to define the appropriate Camunda 7 version with the -ee suffix.</description>
    </item>
    
    <item>
      <title>Migration from Community Extension v. 2.3.0 to v. 3.0.0</title>
      <link>/manual/develop/update/spring-boot-starter/migration-23-30/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/spring-boot-starter/migration-23-30/</guid>
      <description>Upgrade to Spring boot 2.0.0 Within this minor release Camunda Spring Boot Starter started using Spring boot 2.0.2. This version comes with some changes from Spring boot side, for more information please check Spring boot 2.0 Release notes and Migration guide.
Removed test dependencies camunda-bpm-mockito and camunda-bpm-assert dependencies were removed from camunda-bpm-spring-boot-starter-test project. If you still want to use them, you can directly include them to your project POM:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>Migration from Community Extension v. 3.1.0 to v. 3.2.0</title>
      <link>/manual/develop/update/spring-boot-starter/migration-31-32/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/spring-boot-starter/migration-31-32/</guid>
      <description>Upgrade to Spring boot 2.1.1 Within this minor release, Camunda Spring Boot Starter started using Spring boot 2.1.1. This version comes with some changes from the Spring Boot side, for more information please check Spring Boot 2.1 Release notes.
Support for JDK 11 This release introduces support for JDK 11.</description>
    </item>
    
    <item>
      <title>Migration from Community Extension v. 3.3.0 to v. 3.4.0</title>
      <link>/manual/develop/update/spring-boot-starter/migration-33-34/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/spring-boot-starter/migration-33-34/</guid>
      <description>Upgrade to Spring boot 2.2.1 The 3.4.0 version of the Camunda Spring Boot Starter minor release comes with an update to Spring Boot 2.2.1. To see what changes have been introduced from the Spring Boot side, please check the Spring Boot 2.2 Release notes.
Spin DataFormat Configuration From this minor release, the Camunda Spring Boot Starter provides auto-configuration classes for configuring Spin DataFormats with Jackson Java 8 modules. To trigger the auto-configuration, simply add the necessary dependencies.</description>
    </item>
    
    <item>
      <title>Migration from Community Extension v. 3.4.0 to v. 7.13.0</title>
      <link>/manual/develop/update/spring-boot-starter/migration-34-713/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/spring-boot-starter/migration-34-713/</guid>
      <description>New version handling Starting with version 7.13.0, Camunda 7 and its compatible Camunda Spring Boot Starter artifact will share the same version. All adjustments in the Spring Boot Starter will now be covered in the general migration guide, i.e. the 7.12 to 7.13 guide.</description>
    </item>
    
    <item>
      <title>Modeling BPMN in Camunda Modeler</title>
      <link>/manual/develop/modeler/bpmn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/modeler/bpmn/</guid>
      <description>This content has moved to docs.camunda.io and is available here for all future versions.</description>
    </item>
    
    <item>
      <title>Plan Items and Item Definitions</title>
      <link>/manual/develop/reference/cmmn11/concepts/plan-items/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/cmmn11/concepts/plan-items/</guid>
      <description>CMMN differentiates between plan items and plan item definitions. While plan items represent actual units of work that are enacted as part of the case, plan item definitions serve as the blueprint for how a plan item has to be enacted. This concept simplifies reuse of plan item definitions and furthermore enables dynamic planning so that additional items can be generated from a definition at runtime.
As an example, consider the following fragment of a case definition:</description>
    </item>
    
    <item>
      <title>Process Engine Bootstrapping</title>
      <link>/manual/develop/user-guide/process-engine/process-engine-bootstrapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/process-engine-bootstrapping/</guid>
      <description>You have a number of options to configure and create a process engine depending on whether you use an application managed or a shared, container managed process engine.
Application Managed Process Engine You manage the process engine as part of your application. The following ways exist to configure it:
 Programmatically via Java API Via XML configuration Via Spring  Shared, Container Managed Process Engine A container of your choice (e.</description>
    </item>
    
    <item>
      <title>Process Engine Configuration</title>
      <link>/manual/develop/user-guide/spring-framework-integration/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/spring-framework-integration/configuration/</guid>
      <description>You can use a Spring application context XML file to bootstrap the process engine. It is possible to bootstrap both application-managed and container-managed process engines through Spring.
Note that you can also use a Spring JavaConfig for bootstrapping instead of XML.
Configure an Application-Managed Process Engine The ProcessEngine can be configured as a regular Spring bean. The starting point of the integration is the class org.camunda.bpm.engine.spring.ProcessEngineFactoryBean. That bean takes a process engine configuration and creates the process engine.</description>
    </item>
    
    <item>
      <title>Quarkus Version Compatibility</title>
      <link>/manual/develop/user-guide/quarkus-integration/version-compatibility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/quarkus-integration/version-compatibility/</guid>
      <description>Each version of the Camunda Engine Quarkus Extension is bound to a specific version of Camunda 7 and Quarkus. Only these default combinations are recommended (and supported) by Camunda.
In case a certain Quarkus version has a bug, you can override the existing Quarkus version by adding the following inside your pom.xml. Note that this new Camunda/Quarkus version combination should also be supported by Camunda.
&amp;lt;dependencyManagement&amp;gt; &amp;lt;dependencies&amp;gt; ... &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.quarkus.platform&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;quarkus-bom&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${quarkus.</description>
    </item>
    
    <item>
      <title>Read a Model</title>
      <link>/manual/develop/user-guide/model-api/bpmn-model-api/read-a-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/model-api/bpmn-model-api/read-a-model/</guid>
      <description>If you already created a BPMN model and want to process it through the BPMN model API, you can import it with the following methods.
// read a model from a file File file = new File(&amp;#34;PATH/TO/MODEL.bpmn&amp;#34;); BpmnModelInstance modelInstance = Bpmn.readModelFromFile(file); // read a model from a stream InputStream stream = [...] BpmnModelInstance modelInstance = Bpmn.readModelFromStream(stream); After you imported your model you can search for elements by their id or by the type of element.</description>
    </item>
    
    <item>
      <title>Read a Model</title>
      <link>/manual/develop/user-guide/model-api/cmmn-model-api/read-a-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/model-api/cmmn-model-api/read-a-model/</guid>
      <description>If you already created a CMMN model and want to process it through the CMMN model API, you can import it with the following methods.
// read a model from a file File file = new File(&amp;#34;PATH/TO/MODEL.cmmn&amp;#34;); CmmnModelInstance modelInstance = Cmmn.readModelFromFile(file); // read a model from a stream InputStream stream = [...] CmmnModelInstance modelInstance = Cmmn.readModelFromStream(stream); After you imported your model you can search for elements by their id or by the type of element.</description>
    </item>
    
    <item>
      <title>Read a Model</title>
      <link>/manual/develop/user-guide/model-api/dmn-model-api/read-a-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/model-api/dmn-model-api/read-a-model/</guid>
      <description>If you already created a DMN model and want to process it through the DMN model API, you can import it with the following methods:
// read a model from a file File file = new File(&amp;#34;PATH/TO/MODEL.dmn&amp;#34;); DmnModelInstance modelInstance = Dmn.readModelFromFile(file); // read a model from a stream InputStream stream = [...] DmnModelInstance modelInstance = Dmn.readModelFromStream(stream); After you imported your model, you can search for elements by their id or by the type of element.</description>
    </item>
    
    <item>
      <title>Reading JSON</title>
      <link>/manual/develop/reference/spin/json/01-reading-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/spin/json/01-reading-json/</guid>
      <description>The JSON datatype supports reading JSON from Strings or Readers.
Reading JSON from a String: import static org.camunda.spin.Spin.*; import static org.camunda.spin.DataFormats.*; SpinJsonNode json = S(&amp;#34;{\&amp;#34;customer\&amp;#34;: \&amp;#34;Kermit\&amp;#34;}&amp;#34;, json()); The second paramter json() hints Spin to use the JSON data format for parsing the JSON.
Alternatively, you can directly use the JSON(...) function:
import static org.camunda.spin.Spin.*; SpinJsonNode json = JSON(&amp;#34;{\&amp;#34;customer\&amp;#34;: \&amp;#34;Kermit\&amp;#34;}&amp;#34;); String values that represent JSON primitive values can also be read. For example, JSON(&amp;quot;true&amp;quot;) returns a SpinJsonNode that represents the boolean value true.</description>
    </item>
    
    <item>
      <title>Reading XML</title>
      <link>/manual/develop/reference/spin/xml/01-reading-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/spin/xml/01-reading-xml/</guid>
      <description>The XML dataformat supports reading XML from Strings or input streams.
Reading XML from a String: import static org.camunda.spin.Spin.*; import static org.camunda.spin.DataFormats.*; SpinXmlElement xml = S(&amp;#34;&amp;lt;order /&amp;gt;&amp;#34;, xml()); The second paramter xml() hints Spin to use the XML data format for parsing the XML.
Alternatively, you can directly use the XML(...) function:
import static org.camunda.spin.Spin.*; SpinXmlElement xml = XML(&amp;#34;&amp;lt;order /&amp;gt;&amp;#34;); Reading XML from a Reader: Spin also supports reading XML directly from a java.</description>
    </item>
    
    <item>
      <title>Service Task</title>
      <link>/manual/develop/reference/bpmn20/tasks/service-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/tasks/service-task/</guid>
      <description>A Service Task is used to invoke services. In Camunda this is done by calling Java code or providing a work item for an external worker to complete asynchronously or invoking a logic which is implemented in form of webservices.
 Calling Java Code There are four ways of declaring how to invoke Java logic:
 Specifying a class that implements a JavaDelegate or ActivityBehavior Evaluating an expression that resolves to a delegation object Invoking a method expression Evaluating a value expression  To specify a class that is called during process execution, the fully qualified classname needs to be provided by the camunda:class attribute.</description>
    </item>
    
    <item>
      <title>Spring Boot Version Compatibility</title>
      <link>/manual/develop/user-guide/spring-boot-integration/version-compatibility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/spring-boot-integration/version-compatibility/</guid>
      <description>Each version of the Camunda Spring Boot Starter is bound to a specific version of Camunda 7 and Spring Boot. Only these default combinations are recommended (and supported) by Camunda. Other combinations must be thoroughly tested before being used in production.
Heads Up Starting with version 7.13.0, Camunda 7 and its compatible Spring Boot Starter always share the same version. Also, the Camunda 7 version used in the Spring Boot Starter doesn&amp;rsquo;t have to be overridden anymore.</description>
    </item>
    
    <item>
      <title>Stage</title>
      <link>/manual/develop/reference/cmmn11/grouping-tasks/stage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/cmmn11/grouping-tasks/stage/</guid>
      <description>A stage can contain other plan items like a human task, a process task, a case task or another stage. Stages may be considered &amp;lsquo;episodes&amp;rsquo; of a case. However, stages are not necessarily planned sequentially but can also be active in parallel.
If a stage is collapsed, only its name and a plus sign are displayed:
 If a stage is expanded, its plan items are displayed within its boundaries:</description>
    </item>
    
    <item>
      <title>Start Events</title>
      <link>/manual/develop/reference/bpmn20/events/start-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/events/start-events/</guid>
      <description>Start events define where a Process or Sub Process starts.
The process engine supports different types of start events:
 Blank Timer Message Signal Conditional  The engine requires at least one start event to instantiate a process. There can be a maximum of one blank or timer start event per process definition. There can be multiple message or signal start events.
Asynchronous Instantiation A start event may be declared as asynchronous with camunda:asyncBefore=&amp;quot;true&amp;quot;</description>
    </item>
    
    <item>
      <title>Text Inputs</title>
      <link>/manual/develop/reference/forms/embedded-forms/controls/inputs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/forms/embedded-forms/controls/inputs/</guid>
      <description>Single line text inputs are &amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt; controls. Single line text inputs are the most common input field and allow the user to provide values for different data types.
Binding Text Input to a Process Variable A text input can be bound to a process variable using the cam-variable-type and cam-variable-name directives:
&amp;lt;input type=&amp;#34;text&amp;#34; cam-variable-name=&amp;#34;CUSTOMER_ID&amp;#34; cam-variable-type=&amp;#34;String&amp;#34; /&amp;gt; In the example above, the text input field is bound to the variable named CUSTOMER_ID of type String.</description>
    </item>
    
    <item>
      <title>The cam-script Directive</title>
      <link>/manual/develop/reference/forms/embedded-forms/javascript/cam-script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/forms/embedded-forms/javascript/cam-script/</guid>
      <description>It is possible to use custom JavaScript in embedded forms.
Custom JavaScript can be added to a form by using a &amp;lt;script&amp;gt; tag and adding the cam-script directive:
&amp;lt;form role=&amp;#34;form&amp;#34;&amp;gt; &amp;lt;script cam-script type=&amp;#34;text/form-script&amp;#34;&amp;gt; // custom script goes here  &amp;lt;/script&amp;gt; &amp;lt;/form&amp;gt; </description>
    </item>
    
    <item>
      <title>The Process Application class</title>
      <link>/manual/develop/user-guide/process-applications/the-process-application-class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-applications/the-process-application-class/</guid>
      <description>You can delegate the bootstrapping of the process engine and process deployment to a process application class. The basic ProcessApplication functionality is provided by the org.camunda.bpm.application.AbstractProcessApplication base class. Based on this class there is a set of environment-specific sub classes that realize integration within a specific environment:
 ServletProcessApplication: To be used for process applications in a Servlet container like Apache Tomcat. JakartaServletProcessApplication: To be used for process applications in a Jakarta Servlet 5.</description>
    </item>
    
    <item>
      <title>User Management</title>
      <link>/manual/develop/webapps/admin/user-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/admin/user-management/</guid>
      <description>Users Menu   The Users menu allows you to add, edit and delete user profiles. Furthermore, you can manage group membership and change passwords.
My Profile By clicking on your user name in the Users menu, you can access the My Profile menu. In the My Profile menu you can edit your personal account settings, such as:
 Profile: Change your name or email address. You cannot change the user account ID!</description>
    </item>
    
    <item>
      <title>Working with Tasklist</title>
      <link>/manual/develop/webapps/tasklist/working-with-tasklist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/tasklist/working-with-tasklist/</guid>
      <description>In the following example we will walk through a typical human workflow scenario. In our prepackaged distribution, Tasklist has four demo users which belong to different user groups. Sign in with the user demo.
Start a Process To start a process instance via Tasklist, click on Start process in the header menu of the dashboard and select a process out of the displayed list of process definitions. If no process definitions are listed here, please verify that your process application is deployed correctly and you have the required permissions* to start a process.</description>
    </item>
    
    <item>
      <title>Javadoc</title>
      <link>/manual/develop/reference/javadoc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/javadoc/</guid>
      <description>On production, this should redirect to the following page:
 https://docs.camunda.org/javadoc/camunda-bpm-platform/7.22/  Or to this page in case you are viewing the docs of the master or latest branch:
 https://docs.camunda.org/javadoc/camunda-bpm-platform/7.22-SNAPSHOT/  </description>
    </item>
    
    <item>
      <title>Licenses</title>
      <link>/manual/develop/introduction/licenses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/introduction/licenses/</guid>
      <description>Camunda Camunda is a Java-based framework.
Community Edition If you are using the community edition, the entire software is provided under various open source licenses (mainly Apache 2.0 and MIT). Which components are published under an open source license is clearly stated in the licensing header of a source file or a LICENSE file present in the root directory of the software source code repository.
Enterprise Edition If you are using the Enterprise Platform, additionally to the Community components, the software contains additional Enterprise components that are protected by intellectual property laws and provided to you under a license agreement containing restrictions on use and disclosure.</description>
    </item>
    
    <item>
      <title>Available API</title>
      <link>/manual/develop/reference/forms/embedded-forms/javascript/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/forms/embedded-forms/javascript/api/</guid>
      <description>Inside a form script, the following built-in variables and functions are available:
camForm The camForm variable is an instance of the CamSDK.Form class. It is the primary access point to the form API and allows definition of event handers for participation in the form lifecycle:
&amp;lt;form role=&amp;#34;form&amp;#34;&amp;gt; ... &amp;lt;script cam-script type=&amp;#34;text/form-script&amp;#34;&amp;gt; var variableManager = camForm.variableManager; camForm.on(&amp;#39;variables-fetched&amp;#39;, function() { // access to all process variables after the form has loaded  console.</description>
    </item>
    
    <item>
      <title>Bootstrapping</title>
      <link>/manual/develop/reference/forms/embedded-forms/integrate/bootstrapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/forms/embedded-forms/integrate/bootstrapping/</guid>
      <description>Creating a Client The Forms SDK uses an instance of the CamSDK.Client to communicate with the process engine (over the REST API):
var camClient = new CamSDK.Client({ mock: false, apiUri: &amp;#39;http://localhost:8080/engine-rest&amp;#39; }); Creating a Form In order to create a form, you need to create an instance of CamSDK.Form:
new CamSDK.Form({ // ... }); Providing a Task Id In case the form is a task form (i.e., the submission of the form should trigger the completing of a task), you need to provide a taskId:</description>
    </item>
    
    <item>
      <title>Call Activity</title>
      <link>/manual/develop/reference/bpmn20/subprocesses/call-activity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/subprocesses/call-activity/</guid>
      <description>BPMN 2.0 makes a distinction between an embedded subprocess and a call activity. From a conceptual point of view, both will call a subprocess when process execution arrives at the activity.
The difference is that the call activity references a process that is external to the process definition, whereas the subprocess is embedded within the original process definition. The main use case for the call activity is to have a reusable process definition that can be called from multiple other process definitions.</description>
    </item>
    
    <item>
      <title>Camunda 7 License Book</title>
      <link>/manual/develop/introduction/third-party-libraries/camunda-bpm-platform-license-book/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/introduction/third-party-libraries/camunda-bpm-platform-license-book/</guid>
      <description>Java Dependencies Other developers who have contributed code are:
 Eric Bie contributed extensive unit test suite which has helped ensure high implementation quality  Further third-party content may be included: https://github.com/eclipse-ee4j/jersey/blob/2.34/NOTICE.md#third-party-contentFurther third-party content may be included: https://github.com/eclipse-ee4j/jersey/blob/2.34/NOTICE.md#third-party-contentFurther third-party content may be included: https://github.com/eclipse-ee4j/jersey/blob/2.34/NOTICE.md#third-party-contentFurther third-party content may be included: https://github.com/eclipse-ee4j/jersey/blob/2.34/NOTICE.md#third-party-contentFurther third-party content may be included: https://github.com/eclipse-ee4j/jersey/blob/2.34/NOTICE.md#third-party-contentFurther third-party content may be included: https://github.com/eclipse-ee4j/jersey/blob/2.34/NOTICE.md#third-party-contentProject home: https://projects.eclipse.org/projects/ee4j.jaxrs Trademarks Jakarta RESTful Web Services is a trademark of the Eclipse Foundation.</description>
    </item>
    
    <item>
      <title>Camunda BPMN Extension Attributes</title>
      <link>/manual/develop/reference/bpmn20/custom-extensions/extension-attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/custom-extensions/extension-attributes/</guid>
      <description>The following attributes are extension attributes for the camunda namespace http://camunda.org/schema/1.0/bpmn.
assignee asyncAfter  Task, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/service-task/&amp;quot;&amp;gt;Service Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/send-task/&amp;quot;&amp;gt;Send Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/user-task/&amp;quot;&amp;gt;User Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/business-rule-task/&amp;quot;&amp;gt;Business Rule Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/script-task/&amp;quot;&amp;gt;Script Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/receive-task/&amp;quot;&amp;gt;Receive Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/manual-task/&amp;quot;&amp;gt;Manual Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/subprocesses/embedded-subprocess/&amp;quot;&amp;gt;Embedded Subprocess&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/subprocesses/call-activity/&amp;quot;&amp;gt;Call Activity&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/subprocesses/transaction-subprocess/&amp;quot;&amp;gt;Transaction Subprocess&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/gateways/parallel-gateway/&amp;quot;&amp;gt;Parallel Gateway&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/gateways/inclusive-gateway/&amp;quot;&amp;gt;Inclusive Gateway&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/gateways/exclusive-gateway/&amp;quot;&amp;gt;Exclusive Gateway&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/task-markers/#multiple-instance&amp;quot;&amp;gt;Multi Instance Loop Characteristics&amp;lt;/a&amp;gt;, Boundary Event, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/events/message-events/#message-boundary-event&amp;quot;&amp;gt;Message Boundary Event&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/events/error-events/#error-boundary-event&amp;quot;&amp;gt;Error Boundary Event&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/events/timer-events/#timer-boundary-event&amp;quot;&amp;gt;Timer Boundary Event&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/events/escalation-events/#escalation-boundary-event&amp;quot;&amp;gt;Escalation Boundary Event&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/events/conditional-events/#conditional-boundary-event&amp;quot;&amp;gt;Conditional Boundary Event&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/events/signal-events/#signal-boundary-event&amp;quot;&amp;gt;Signal Boundary Event&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/events/cancel-and-compensation-events/#cancel-boundary-event&amp;quot;&amp;gt;Cancel Boundary Event&amp;lt;/a&amp;gt; &amp;lt;/td&amp;gt;  asyncBefore  Task, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/service-task/&amp;quot;&amp;gt;Service Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/send-task/&amp;quot;&amp;gt;Send Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/user-task/&amp;quot;&amp;gt;User Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/business-rule-task/&amp;quot;&amp;gt;Business Rule Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/script-task/&amp;quot;&amp;gt;Script Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/receive-task/&amp;quot;&amp;gt;Receive Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/manual-task/&amp;quot;&amp;gt;Manual Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/subprocesses/embedded-subprocess/&amp;quot;&amp;gt;Embedded Subprocess&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/subprocesses/call-activity/&amp;quot;&amp;gt;Call Activity&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/subprocesses/transaction-subprocess/&amp;quot;&amp;gt;Transaction Subprocess&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/gateways/parallel-gateway/&amp;quot;&amp;gt;Parallel Gateway&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/gateways/event-based-gateway/&amp;quot;&amp;gt;Event Based Gateway&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/gateways/inclusive-gateway/&amp;quot;&amp;gt;Inclusive Gateway&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/gateways/exclusive-gateway/&amp;quot;&amp;gt;Exclusive Gateway&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/task-markers/#multiple-instance&amp;quot;&amp;gt;Multi Instance Loop Characteristics&amp;lt;/a&amp;gt;, Boundary Event, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/events/message-events/#message-boundary-event&amp;quot;&amp;gt;Message Boundary Event&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/events/error-events/#error-boundary-event&amp;quot;&amp;gt;Error Boundary Event&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/events/timer-events/#timer-boundary-event&amp;quot;&amp;gt;Timer Boundary Event&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/events/escalation-events/#escalation-boundary-event&amp;quot;&amp;gt;Escalation Boundary Event&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/events/conditional-events/#conditional-boundary-event&amp;quot;&amp;gt;Conditional Boundary Event&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/events/signal-events/#signal-boundary-event&amp;quot;&amp;gt;Signal Boundary Event&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/events/cancel-and-compensation-events/#cancel-boundary-event&amp;quot;&amp;gt;Cancel Boundary Event&amp;lt;/a&amp;gt; &amp;lt;/td&amp;gt;  calledElementBinding calledElementVersion calledElementVersionTag calledElementTenantId candidateGroups candidateStarterGroups candidateStarterUsers candidateUsers caseBinding caseRef caseVersion caseTenantId class collection decisionRef decisionRefBinding decisionRefVersion decisionRefVersionTag decisionRefTenantId delegateExpression dueDate elementVariable errorMessage errorCodeVariable errorMessageVariable escalationCodeVariable exclusive  Task, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/service-task/&amp;quot;&amp;gt;Service Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/send-task/&amp;quot;&amp;gt;Send Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/user-task/&amp;quot;&amp;gt;User Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/business-rule-task/&amp;quot;&amp;gt;Business Rule Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/script-task/&amp;quot;&amp;gt;Script Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/receive-task/&amp;quot;&amp;gt;Receive Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/manual-task/&amp;quot;&amp;gt;Manual Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/subprocesses/embedded-subprocess/&amp;quot;&amp;gt;Embedded Subprocess&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/subprocesses/call-activity/&amp;quot;&amp;gt;Call Activity&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/subprocesses/transaction-subprocess/&amp;quot;&amp;gt;Transaction Subprocess&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/gateways/parallel-gateway/&amp;quot;&amp;gt;Parallel Gateway&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/gateways/event-based-gateway/&amp;quot;&amp;gt;Event Based Gateway&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/gateways/inclusive-gateway/&amp;quot;&amp;gt;Inclusive Gateway&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/gateways/exclusive-gateway/&amp;quot;&amp;gt;Exclusive Gateway&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/task-markers/#multiple-instance&amp;quot;&amp;gt;Multi Instance Loop Characteristics&amp;lt;/a&amp;gt;, Boundary Event, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/events/message-events/#message-boundary-event&amp;quot;&amp;gt;Message Boundary Event&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/events/error-events/#error-boundary-event&amp;quot;&amp;gt;Error Boundary Event&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/events/timer-events/#timer-boundary-event&amp;quot;&amp;gt;Timer Boundary Event&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/events/escalation-events/#escalation-boundary-event&amp;quot;&amp;gt;Escalation Boundary Event&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/events/conditional-events/#conditional-boundary-event&amp;quot;&amp;gt;Conditional Boundary Event&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/events/signal-events/#signal-boundary-event&amp;quot;&amp;gt;Signal Boundary Event&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/events/cancel-and-compensation-events/#cancel-boundary-event&amp;quot;&amp;gt;Cancel Boundary Event&amp;lt;/a&amp;gt; &amp;lt;/td&amp;gt;  expression followUpDate formHandlerClass formKey formRef formRefBinding formRefVersion historyTimeToLive initiator isStartableInTasklist jobPriority  Task, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/service-task/&amp;quot;&amp;gt;Service Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/send-task/&amp;quot;&amp;gt;Send Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/user-task/&amp;quot;&amp;gt;User Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/business-rule-task/&amp;quot;&amp;gt;Business Rule Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/script-task/&amp;quot;&amp;gt;Script Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/receive-task/&amp;quot;&amp;gt;Receive Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/manual-task/&amp;quot;&amp;gt;Manual Task&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/subprocesses/embedded-subprocess/&amp;quot;&amp;gt;Embedded Subprocess&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/subprocesses/call-activity/&amp;quot;&amp;gt;Call Activity&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/subprocesses/transaction-subprocess/&amp;quot;&amp;gt;Transaction Subprocess&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/gateways/parallel-gateway/&amp;quot;&amp;gt;Parallel Gateway&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/gateways/inclusive-gateway/&amp;quot;&amp;gt;Inclusive Gateway&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/gateways/exclusive-gateway/&amp;quot;&amp;gt;Exclusive Gateway&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;/manual/develop/reference/bpmn20/tasks/task-markers/#multiple-instance&amp;quot;&amp;gt;Multi Instance Loop Characteristics&amp;lt;/a&amp;gt;, Process &amp;lt;/td&amp;gt;  mapDecisionResult priority taskPriority resource resultVariable versionTag topic type variableMappingClass variableMappingDelegateExpression variableName variableEvents </description>
    </item>
    
    <item>
      <title>Case Instance View</title>
      <link>/manual/develop/webapps/cockpit/cmmn/case-instance-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/cmmn/case-instance-view/</guid>
      <description>Enterprise Feature Please note that this feature is only included in the enterprise edition of Camunda 7, it is not available in the community edition.
 Check the Camunda enterprise homepage for more information or get your free trial version.    Open the case instance view by selecting a case instance from the case definition view instance list. This view allows you to drill down into a single case instance and explore its activities as well as the variables, tasks, etc.</description>
    </item>
    
    <item>
      <title>Cockpit Plugins</title>
      <link>/manual/develop/webapps/cockpit/extend/plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/extend/plugins/</guid>
      <description>Plugin Compatibility Please note that we updated the frontend plugin interface with Camunda Runtime 7.14. Plugins written for Camunda Runtime 7.13 and earlier might no longer work with Camunda Runtime 7.14. Checkout the update guide for more details.
 Cockpit defines a plugin concept to add own functionality without being forced to extend or hack the Cockpit web application. You can add plugins at various plugin points, e.g., the processes dashboard as shown in the following example:</description>
    </item>
    
    <item>
      <title>Conditional and Default Sequence Flows</title>
      <link>/manual/develop/reference/bpmn20/gateways/sequence-flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/gateways/sequence-flow/</guid>
      <description>A sequence flow is the connector between two elements of a process. After an element is visited during process execution, all outgoing sequence flows are followed. This means that the default nature of BPMN 2.0 is to be parallel: two outgoing sequence flows will create two separate, parallel paths of execution.Camunda Extensions Conditional Sequence Flow A sequence flow can have a condition defined on it. When a BPMN 2.0 activity is left, the default behavior is to evaluate the conditions on the outgoing sequence flows.</description>
    </item>
    
    <item>
      <title>Cookie Security</title>
      <link>/manual/develop/webapps/shared-options/cookie-security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/shared-options/cookie-security/</guid>
      <description>Camundas Web applications use cookies to preserve user sessions and to prevent CSRF attacks. This page explains how these cookies should be configured to increase the security.
The Web applications set the following cookies:
 Session Cookie (JSESSIONID)  Supposed to remember the authenticated user after the login   CSRF Prevention Cookie (XSRF-TOKEN)  Supposed to prevent Cross-Site Request Forgery (CSRF) by sending a newly generated token along with each modifying request    What are the properties supposed to be?</description>
    </item>
    
    <item>
      <title>Create a Model</title>
      <link>/manual/develop/user-guide/model-api/bpmn-model-api/create-a-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/model-api/bpmn-model-api/create-a-model/</guid>
      <description>To create a new BPMN model from scratch you have to create an empty BPMN model instance with the following method:
BpmnModelInstance modelInstance = Bpmn.createEmptyModel(); The next step is to create a BPMN definitions element. Set the target namespace on it and add it to the newly created empty model instance.
Definitions definitions = modelInstance.newInstance(Definitions.class); definitions.setTargetNamespace(&amp;#34;http://camunda.org/examples&amp;#34;); modelInstance.setDefinitions(definitions); Usually you want to add a process to your model. This follows the same 3 steps as the creation of the BPMN definitions element:</description>
    </item>
    
    <item>
      <title>Create a Model</title>
      <link>/manual/develop/user-guide/model-api/cmmn-model-api/create-a-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/model-api/cmmn-model-api/create-a-model/</guid>
      <description>To create a new CMMN model from scratch, you have to create an empty CMMN model instance with the following method:
CmmnModelInstance modelInstance = Cmmn.createEmptyModel(); The next step is to create a CMMN definitions element. Set the target namespace on it and add it to the newly created empty model instance.
Definitions definitions = modelInstance.newInstance(Definitions.class); definitions.setTargetNamespace(&amp;#34;http://camunda.org/examples&amp;#34;); modelInstance.setDefinitions(definitions); Usually you want to add a case to your model. This follows the same 3 steps as the creation of the CMMN definitions element:</description>
    </item>
    
    <item>
      <title>Create a Model</title>
      <link>/manual/develop/user-guide/model-api/dmn-model-api/create-a-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/model-api/dmn-model-api/create-a-model/</guid>
      <description>To create a new DMN model from scratch, you have to create an empty DMN model instance with the following method:
DmnModelInstance modelInstance = Dmn.createEmptyModel(); The next step is to create a DMN definitions element. Set the target namespace on it and add it to the newly created empty model instance.
Definitions definitions = modelInstance.newInstance(Definitions.class); definitions.setNamespace(&amp;#34;http://camunda.org/schema/1.0/dmn&amp;#34;); definitions.setName(&amp;#34;definitions&amp;#34;); definitions.setId(&amp;#34;definitions&amp;#34;); modelInstance.setDefinitions(definitions); Usually you want to add a decision to your model. This follows the same 3 steps as the creation of the DMN definitions element:</description>
    </item>
    
    <item>
      <title>CSRF Prevention</title>
      <link>/manual/develop/webapps/shared-options/csrf-prevention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/shared-options/csrf-prevention/</guid>
      <description>A CSRF filter is enabled by default, validating each modifying request performed through the webapps. The filter implements a (per-session) Synchronization Token method for CSRF validation with an optional Same Origin with Standard Headers verification.
In Spring Boot Starter, the configuration needs to be made in the application.yaml. Please read more about it here.
If you would like to enable the additional Same Origin with Standard Headers verification, the targetOrigin init-parameter should be set in the web.</description>
    </item>
    
    <item>
      <title>Dashboard</title>
      <link>/manual/develop/webapps/tasklist/dashboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/tasklist/dashboard/</guid>
      <description>On the dashboard of Tasklist you see an overview of pending tasks. On the left side of the screen, an overview of the filters is displayed. On the upper right side of the screen, you can set a follow-up or due date, you can claim, unclaim and reassign tasks and you can add comments. Underneath that section, the embedded form is displayed (please note that external task forms cannot be displayed here), you can switch to the task history, you can see the diagram view or you can view the description of the user task.</description>
    </item>
    
    <item>
      <title>Data Formats in Processes</title>
      <link>/manual/develop/user-guide/data-formats/data-formats-in-processes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/data-formats/data-formats-in-processes/</guid>
      <description>The main entry point to Spin&amp;rsquo;s functionality is the static function org.camunda.spin.Spin.S that can be used to process documents or to map Java objects to a document format. The returned value of this function is a Spin wrapper, which is an intermediary representation of a document and that offers functions for manipulation of the underlying document. Additionally, the functions org.camunda.spin.Spin.XML and org.camunda.spin.Spin.JSON can be used that return a strongly-typed Spin wrapper of the provided documents which is useful when writing Java.</description>
    </item>
    
    <item>
      <title>Database Configuration</title>
      <link>/manual/develop/user-guide/process-engine/database/database-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/database/database-configuration/</guid>
      <description>There are two ways to configure the database that the Camunda engine will use. The first option is to define the JDBC properties of the database:
 jdbcUrl: JDBC URL of the database. jdbcDriver: implementation of the driver for the specific database type. jdbcUsername: username to connect to the database. jdbcPassword: password to connect to the database.  Note that the engine uses Apache MyBatis internally for persistence.
The data source that is constructed based on the provided JDBC properties will have the default MyBatis connection pool settings.</description>
    </item>
    
    <item>
      <title>Decision Instance View</title>
      <link>/manual/develop/webapps/cockpit/dmn/decision-instance-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/dmn/decision-instance-view/</guid>
      <description>On the decision instance page you find the table or literal expression of the decision that was executed as well as the values for the input variables and the decision result.
  The input and output values for this decision instance are shown directly on the table in the corresponding cells as well as in the Inputs and Outputs tabs below the table. Complex variables like Objects, Files and Bytes are not displayed on the table.</description>
    </item>
    
    <item>
      <title>Decisions in the Process Engine Repository</title>
      <link>/manual/develop/user-guide/process-engine/decisions/repository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/decisions/repository/</guid>
      <description>To evaluate a DMN decision in Camunda 7, it has to be part of a Deployment. After a decision has been deployed, it can be referenced by its key and version. The platform supports DMN 1.3 XML files.
Deploying a Decision To deploy a DMN decision you can either use the Repository Service or add it to a process application. The platform will recognize all files with a .dmn or .</description>
    </item>
    
    <item>
      <title>Delegation Code</title>
      <link>/manual/develop/user-guide/model-api/bpmn-model-api/delegation-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/model-api/bpmn-model-api/delegation-code/</guid>
      <description>If you use Delegation Code, you can access the BPMN model instance and current element of the executed process. If a BPMN model is accessed, it will be cached to avoid redundant database queries.
Java Delegate If your class implements the org.camunda.bpm.engine.delegate.JavaDelegate interface, you can access the BPMN model instance and the current flow element. In the following example the JavaDelegate was added to a service task in the BPMN model.</description>
    </item>
    
    <item>
      <title>Delegation Code</title>
      <link>/manual/develop/user-guide/model-api/cmmn-model-api/delegation-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/model-api/cmmn-model-api/delegation-code/</guid>
      <description>If you use Delegation Code, you can access the CMMN model instance and current element of the executed case. If a CMMN model is accessed, it will be cached to avoid redundant database queries.
Case Execution Listener If your class implements the org.camunda.bpm.engine.delegate.CaseExecutionListener interface, you can access the CMMN model instance and the plan item element. As a Case Execution Listener can be added to several elements like case plan model, human task, etc.</description>
    </item>
    
    <item>
      <title>DMN Decision Table Output</title>
      <link>/manual/develop/reference/dmn/decision-table/output/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/dmn/decision-table/output/</guid>
      <description>A decision table can have one or more outputs, also called output clauses. An output clause defines the id, label, name and type of a decision table output.
An output clause is represented by an output element inside a decisionTable XML element.
&amp;lt;definitions xmlns=&amp;#34;https://www.omg.org/spec/DMN/20191111/MODEL/&amp;#34; id=&amp;#34;definitions&amp;#34; name=&amp;#34;definitions&amp;#34; namespace=&amp;#34;http://camunda.org/schema/1.0/dmn&amp;#34;&amp;gt; &amp;lt;decision id=&amp;#34;dish&amp;#34; name=&amp;#34;Dish&amp;#34;&amp;gt; &amp;lt;decisionTable id=&amp;#34;decisionTable&amp;#34;&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;output id=&amp;#34;output1&amp;#34; label=&amp;#34;Dish&amp;#34; name=&amp;#34;desiredDish&amp;#34; typeRef=&amp;#34;string&amp;#34; /&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;/decisionTable&amp;gt; &amp;lt;/decision&amp;gt; &amp;lt;/definitions&amp;gt; Output Id The output id is a unique identifier of the decision table output.</description>
    </item>
    
    <item>
      <title>Editing DMN in Camunda Modeler</title>
      <link>/manual/develop/modeler/dmn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/modeler/dmn/</guid>
      <description>This content has moved to docs.camunda.io and is available here for all future versions.</description>
    </item>
    
    <item>
      <title>Engine CDI Integration</title>
      <link>/manual/develop/user-guide/quarkus-integration/cdi-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/quarkus-integration/cdi-integration/</guid>
      <description>Quarkus comes with a built-in solution for CDI (short for &amp;ldquo;Context and Dependency Injection&amp;rdquo;) called ArC, which is based on the Java CDI 4.0 standard. Quarkus ArC does not entirely cover the CDI 4.0 standard but only implements a subset of it.
The Camunda Engine offers CDI 4 integration with the camunda-engine-cdi-jakarta module. This module is integrated directly into the Quarkus Extension. You can learn more about the features and the programming model at CDI and Java EE Integration.</description>
    </item>
    
    <item>
      <title>Evaluating Decisions using the DMN Engine API</title>
      <link>/manual/develop/user-guide/dmn-engine/evaluate-decisions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/dmn-engine/evaluate-decisions/</guid>
      <description>The DMN engine interface exposes methods for parsing and evaluating DMN Decisions.
Parse Decisions Decisions can be parsed from an InputStream or transformed from a DmnModelInstance .
This example shows how to parse a decision from an input stream:
// create a default DMN engine DmnEngine dmnEngine = DmnEngineConfiguration .createDefaultDmnEngineConfiguration() .buildEngine(); InputStream inputStream = ... // parse all decision from the input stream List&amp;lt;DmnDecision&amp;gt; decisions = dmnEngine.parseDecisions(inputStream); The next example uses the DMN Model API to first create a DmnModelInstance and then transform the decisions:</description>
    </item>
    
    <item>
      <title>Extension Attributes</title>
      <link>/manual/develop/reference/cmmn11/custom-extensions/camunda-attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/cmmn11/custom-extensions/camunda-attributes/</guid>
      <description>The following attributes are extension attributes for the camunda namespace http://camunda.org/schema/1.0/cmmn.
assignee candidateGroups candidateUsers caseBinding caseTenantId caseVersion class decisionBinding decisionTenantId decisionVersion delegateExpression dueDate expression formKey historyTimeToLive mapDecisionResult priority processBinding processTenantId processVersion repeatOnStandardEvent resource resultVariable variableName </description>
    </item>
    
    <item>
      <title>Extension Attributes</title>
      <link>/manual/develop/reference/dmn/custom-extensions/camunda-attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/dmn/custom-extensions/camunda-attributes/</guid>
      <description>The following attributes are extension attributes for the camunda namespace http://camunda.org/schema/1.0/dmn.
historyTimeToLive inputVariable versionTag </description>
    </item>
    
    <item>
      <title>FEEL Engine Custom Functions</title>
      <link>/manual/develop/user-guide/dmn-engine/feel/custom-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/dmn-engine/feel/custom-functions/</guid>
      <description>Camunda 7 provides a wrapper for the FEEL Scala Engine to implement Custom Functions, which can be called in expressions and unary tests.
Custom Function Behavior Please note that the Custom Function Mechanism of the Standalone FEEL Scala Engine might behave differently.
 You can add Custom Functions to the Process Engine (or the Standalone DMN Engine) only programmatically through a Process Engine Plugin. Read more about it in the section about how to Register Custom Function Providers.</description>
    </item>
    
    <item>
      <title>FEEL Language Elements</title>
      <link>/manual/develop/reference/dmn/feel/legacy/language-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/dmn/feel/legacy/language-elements/</guid>
      <description>Heads Up! This page provides information on the legacy FEEL Engine, that was used before the current Scala-based FEEL Enginewas integrated into Camunda 7.
 The Camunda DMN engine supports FEEL for input entries. The FEEL term for expression in input entries are simple unary tests. These simple unary tests test an input value against an expression and return either true if the test is satisfied or false otherwise. The expression can contain different elements which are described in this sections.</description>
    </item>
    
    <item>
      <title>Group Management</title>
      <link>/manual/develop/webapps/admin/group-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/admin/group-management/</guid>
      <description>Groups Menu   The Groups menu allows you to add, edit and delete user groups. Besides that you can view the members of groups</description>
    </item>
    
    <item>
      <title>HTTP Header Security</title>
      <link>/manual/develop/webapps/shared-options/header-security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/shared-options/header-security/</guid>
      <description>The HTTP Header Security mechanism allows you to add security-related response headers which enable browser-side security mechanisms.
What are the headers supposed to be? This section briefly describes the purpose of the headers. You can find more information about the XSS Protection, Content Security Policy, Content-Type Options
as well as Strict Transport Security header in Mozilla’s Developer Guide.
XSS Protection If the XSS Protection header is enabled some cross-site scripting (XSS) attacks are detected, and the malicious parts of the page are either sanitized, or the rendering of the page is blocked entirely.</description>
    </item>
    
    <item>
      <title>Implemented Standards</title>
      <link>/manual/develop/introduction/implemented-standards/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/introduction/implemented-standards/</guid>
      <description>Camunda implements three different standards in the Business Process Management scope: BPMN 2.0, CMMN 1.1 and DMN 1.3. These three standards are defined by the Object Management Group with active collaboration of Camunda.
Camunda provides open source implementations of execution and modeling tools.
BPMN Business Process Model and Notation (BPMN) is a standard for Workflow and Process Automation. Camunda supports the 2.0 version of BPMN.
 Getting started implementing BPMN Processes: Quick Start (Java / JS) Getting to Know BPMN as a Modeling Language: BPMN Modeling Tutorial Modeling BPMN: BPMN Modeling Reference Tool for modeling BPMN: BPMN Modeler Implementing BPMN Processes: BPMN Implementation Reference Executing BPMN: Process Engine  CMMN Case Management Model and Notation (CMMN) is a standard for Case Management.</description>
    </item>
    
    <item>
      <title>Install the Full Distribution on a JBoss EAP/WildFly Application Server manually </title>
      <link>/manual/develop/installation/full/jboss/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/installation/full/jboss/manual/</guid>
      <description>This document describes the installation of Camunda 7 and its components on a vanilla WildFly Application Server or JBoss EAP 7 / 8.
Reading this Guide This guide uses a number of variables to denote common path names and constants:
 $WILDFLY_HOME points to the JBoss EAP/WildFly application server main directory. $WILDFLY_VERSION denotes the version of WildFly application server. $WILDFLY_DISTRIBUTION represents the downloaded pre-packaged Camunda 7 distribution for WildFly, e.g. camunda-bpm-wildfly-$PLATFORM_VERSION.</description>
    </item>
    
    <item>
      <title>Install the Full Distribution on a Tomcat Application Server manually</title>
      <link>/manual/develop/installation/full/tomcat/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/installation/full/tomcat/manual/</guid>
      <description>This section describes how you can install Camunda 7 and its components on a vanilla Apache Tomcat, if you are not able to use the pre-packaged Tomcat distribution. In addition, download a Tomcat distribution or Enterprise Edition Tomcat distribution to fetch the required Camunda modules.
Reading the Guide Throughout this guide we will use a number of variables to denote common path names and constants:
 $TOMCAT_HOME points to the main directory of the tomcat server.</description>
    </item>
    
    <item>
      <title>Install the Full Distribution on Oracle WebLogic Application Server</title>
      <link>/manual/develop/installation/full/wls/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/installation/full/wls/manual/</guid>
      <description>This section will describe how you can install Camunda and its components on Oracle WebLogic.
Reading this Guide This guide uses a number of variables to denote common path names and constants.
 $WLS_DOMAIN_HOME points to the Oracle WebLogic application server domain directory (typically something like /opt/oracle/WebLogic/domains/mydomain). $PLATFORM_VERSION denotes the version of Camunda you want to or have installed, e.g. 7.X.Y. $WLS_DISTRIBUTION represents the downloaded Camunda distribution for the Oracle WebLogic Application Server, e.</description>
    </item>
    
    <item>
      <title>Install the Standalone Webapplication (.war)</title>
      <link>/manual/develop/installation/standalone-webapplication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/installation/standalone-webapplication/</guid>
      <description>Camunda Automation 7.19 is the last release providing support for Standalone Web Application Distribution.
Please consider migrating to another supported setup.</description>
    </item>
    
    <item>
      <title>JNDI Bindings for Camunda 7 Services</title>
      <link>/manual/develop/user-guide/runtime-container-integration/jndi-bindings-for-bpmn-platform-services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/runtime-container-integration/jndi-bindings-for-bpmn-platform-services/</guid>
      <description>The Camunda 7 Services (i.e., Process Engine Service and Process Application Service) are provided via JNDI Bindings with the following JNDI names:
 Process Engine Service: java:global/camunda-bpm-platform/process-engine/ProcessEngineService!org.camunda.bpm.ProcessEngineService Process Application Service: java:global/camunda-bpm-platform/process-engine/ProcessApplicationService!org.camunda.bpm.ProcessApplicationService  On JBoss EAP and WildFly, you are able to get any of these Camunda 7 Services through a JNDI lookup. However, on Apache Tomcat you have to do quite a bit more to be able to do a lookup to get one of these Camunda 7 Services.</description>
    </item>
    
    <item>
      <title>JTA Transaction Integration</title>
      <link>/manual/develop/user-guide/cdi-java-ee-integration/jta-transaction-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/cdi-java-ee-integration/jta-transaction-integration/</guid>
      <description>Embedded Process Engine The process engine transaction management can integrate with JTA and Jakarta Transactions. To use transaction manager integration, you need to use the
 org.camunda.bpm.engine.impl.cfg.JtaProcessEngineConfiguration for JTA integration only. org.camunda.bpm.engine.impl.cfg.JakartaTransactionProcessEngineConfiguration for Jakarta Transactions integration only. org.camunda.bpm.engine.cdi.CdiJtaProcessEngineConfiguration for additional CDI expression resolution support.  The process engine requires access to an implementation of javax.transaction.TransactionManager or jakarta.transaction.TransactionManager respectively. Not all application servers provide such an implementation. Most notably, IBM WebSphere and Oracle WebLogic historically did not provide this implementation.</description>
    </item>
    
    <item>
      <title>Manipulating XML</title>
      <link>/manual/develop/reference/spin/xml/02-manipulating-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/spin/xml/02-manipulating-xml/</guid>
      <description>The XML data type supports manipulation of XML attributes and child elements.
Attributes Checking for Attributes in XML import static org.camunda.spin.Spin.XML; String xml = &amp;#34;&amp;lt;order xmlns:cam=\&amp;#34;http://camunda.org/example\&amp;#34; id=\&amp;#34;order1\&amp;#34; cam:name=\&amp;#34;name\&amp;#34; /&amp;gt;&amp;#34;; boolean hasAttr = XML(xml).hasAttr(&amp;#34;id&amp;#34;); assertTrue(hasAttr); hasAttr = XML(xml).hasAttrNs(&amp;#34;http://camunda.org/example&amp;#34;, &amp;#34;id&amp;#34;); assertTrue(hasAttr); Reading Attributes from XML import static org.camunda.spin.Spin.XML; SpinXmlDomAttribute attribute = XML(&amp;#34;&amp;lt;order id=\&amp;#34;order1\&amp;#34; /&amp;gt;&amp;#34;).attr(&amp;#34;id&amp;#34;); String id = XML(&amp;#34;&amp;lt;order id=\&amp;#34;order1\&amp;#34; /&amp;gt;&amp;#34;).attr(&amp;#34;id&amp;#34;).value(); The attr method returns a wrapper of the XML attribute and with value the value of the attribute can be accessed.</description>
    </item>
    
    <item>
      <title>Migrating from Community to Enterprise Edition</title>
      <link>/manual/develop/update/ce-to-ee/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/ce-to-ee/</guid>
      <description>If you’re hoping to utilize features of Enterprise Edition (such as see how many process instances have been run, token history, heatmaps, and migrate model versions) you may be interested in migrating from Camunda 7 Community Edition to the Enterprise Edition.
In this guide, we’ll step through migration from Camunda 7 Community Edition to Enterprise Edition.
Prerequisites  IDE or code editor of your choice (in this example, we’ll use Visual Studio Code.</description>
    </item>
    
    <item>
      <title>None Events</title>
      <link>/manual/develop/reference/bpmn20/events/none-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/events/none-events/</guid>
      <description>None events are unspecified events, also called &amp;lsquo;blank&amp;rsquo; events. For instance, a &amp;lsquo;none&amp;rsquo; start event technically means that the trigger for starting the process instance is unspecified. This means that the engine cannot anticipate when the process instance must be started. The none start event is used when the process instance is started through the API by calling one of the startProcessInstanceBy... methods.
ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(&amp;#39;invoice&amp;#39;); Note: a subprocess must always have a none start event.</description>
    </item>
    
    <item>
      <title>Patch Level Update</title>
      <link>/manual/develop/update/patch-level/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/patch-level/</guid>
      <description>This guide explains how to perform a patch level update. The patch level is the version number &amp;ldquo;after the second dot&amp;rdquo;. Example: update from 7.14.2 to 7.14.3.
Enterprise Feature Please note that Patch Level Updates are only provided to enterprise customers, they are not available in the community edition.
 Check the Camunda enterprise homepage for more information or get your free trial version.  Database Patches Between patch levels, the structure of the database schema is not changed.</description>
    </item>
    
    <item>
      <title>Plan Item Lifecycles</title>
      <link>/manual/develop/reference/cmmn11/concepts/lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/cmmn11/concepts/lifecycle/</guid>
      <description>CMMN case instances and plan items go through a lifecycle of states during their execution. Depending on their state, different actions may be carried out to interact with them. Moreover, state transitions may automatically trigger changes in other plan items. The concrete lifecycle of a plan item depends on its plan item definition.
The following descriptions cover the CMMN lifecycles as supported by the Camunda engine. This is a subset of states and transitions that the CMMN standard defines.</description>
    </item>
    
    <item>
      <title>Process Definition View</title>
      <link>/manual/develop/webapps/cockpit/bpmn/process-definition-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/bpmn/process-definition-view/</guid>
      <description>The process definition view provides you with information about the definition and the status of a process. On the left side you can easily survey the versions of the process and how many instances of the versions are running. Incidents of all running process instances are displayed together with an instance counter label in the corresponding rendered diagram. So it is easy to locate failed activities in the process.</description>
    </item>
    
    <item>
      <title>Process Engine API</title>
      <link>/manual/develop/user-guide/process-engine/process-engine-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/process-engine-api/</guid>
      <description>Services API The Java API is the most common way of interacting with the engine. The central starting point is the ProcessEngine, which can be created in several ways as described in the configuration section. From the ProcessEngine, you can obtain the various services that contain the workflow/BPM methods. ProcessEngine and the services objects are thread safe. So you can keep a reference to 1 of those for a whole server.</description>
    </item>
    
    <item>
      <title>Process Engine Configuration</title>
      <link>/manual/develop/user-guide/spring-boot-integration/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/spring-boot-integration/configuration/</guid>
      <description>The auto starter uses the org.camunda.bpm.engine.impl.cfg.ProcessEnginePlugin mechanism to configure the engine.
The configuration is divided into sections. These sections are represented by the marker interfaces:
 org.camunda.bpm.spring.boot.starter.configuration.CamundaProcessEngineConfiguration org.camunda.bpm.spring.boot.starter.configuration.CamundaDatasourceConfiguration org.camunda.bpm.spring.boot.starter.configuration.CamundaHistoryConfiguration org.camunda.bpm.spring.boot.starter.configuration.CamundaHistoryLevelAutoHandlingConfiguration org.camunda.bpm.spring.boot.starter.configuration.CamundaJobConfiguration org.camunda.bpm.spring.boot.starter.configuration.CamundaDeploymentConfiguration org.camunda.bpm.spring.boot.starter.configuration.CamundaAuthorizationConfiguration org.camunda.bpm.spring.boot.starter.configuration.CamundaFailedJobConfiguration org.camunda.bpm.spring.boot.starter.configuration.CamundaMetricsConfiguration  Default Configurations The following default and best practice configurations are provided by the starter and can be customized or overridden.
DefaultProcessEngineConfiguration Sets the process engine name and automatically adds all ProcessEnginePlugin beans to the configuration.</description>
    </item>
    
    <item>
      <title>Process Task</title>
      <link>/manual/develop/reference/cmmn11/tasks/process-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/cmmn11/tasks/process-task/</guid>
      <description>A process task can be used to invoke a BPMN 2.0 process from a case.
 A process task is a regular task that requires an attribute processRef which references a process definition by its key. Such a process task can be defined as follows:
&amp;lt;processTask id=&amp;#34;checkCreditProcess&amp;#34; name=&amp;#34;Check credit&amp;#34; processRef=&amp;#34;checkCreditProcess&amp;#34; /&amp;gt; The referenced process definition is resolved at runtime. This means that the process can be deployed independently from the calling case, if needed.</description>
    </item>
    
    <item>
      <title>processes.xml</title>
      <link>/manual/develop/reference/deployment-descriptors/descriptors/processes-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/deployment-descriptors/descriptors/processes-xml/</guid>
      <description>The processes.xml file is deployed as part of a process application and is used for configuration of the deployment of BPMN 2.0 resource files. Additionally, it can be used to configure process engines which are started / stopped with the deployment of the application.
See the processes.xml section of the User Guidefor more details..
Xml Schema Namespace The namespace for the processes.xml file is http://www.camunda.org/schema/1.0/ProcessApplication. The XSD file can be found in the camunda-engine.</description>
    </item>
    
    <item>
      <title>Quarkus Extension Configuration</title>
      <link>/manual/develop/user-guide/quarkus-integration/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/quarkus-integration/configuration/</guid>
      <description>This section of the Camunda Quarkus extension documentation covers the configuration options for the process engine within a Quarkus application.
The documentation on the Camunda Quarkus Extension Configuration is intended for Quarkus application developers. It requires some knowledge on Quarkus CDI support, Quarkus configuration, as well as Camunda Process Engine Configuration properties.
Process Engine Configuration An instance of the QuarkusProcessEngineConfiguration class configures the process engine in a Quarkus application. A QuarkusProcessEngineConfiguration instance provides the following defaults:</description>
    </item>
    
    <item>
      <title>Required Rule</title>
      <link>/manual/develop/reference/cmmn11/markers/required-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/cmmn11/markers/required-rule/</guid>
      <description>Can be used with: Task, Stage and Milestone
 A plan item may be required, meaning that it has to reach an end-like state before the containing stage can complete. Whether a plan item is required can be specified by a required rule.
This rule is evaluated when the milestone, stage or task is instantiated and transitions to the state AVAILABLE, and its result value of type boolean is maintained throughout the remainder of the case instance.</description>
    </item>
    
    <item>
      <title>Resource Deployments</title>
      <link>/manual/develop/user-guide/quarkus-integration/deployments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/quarkus-integration/deployments/</guid>
      <description>This section documents how to perform process engine deployments with a Quarkus application containing an embedded process engine. The documentation assumes some familiarity with Quarkus CDI support and the Camunda DeploymentBuilder API.
The Camunda Engine Quarkus Extension only supports programmatic deployments. A user can observe for the CamundaEngineStartupEvent CDI event. The CamundaEngineStartupEvent signals that a process engine has been successfully bootstrapped, and a deployment can be performed.
The following example shows how a single process engine deployment can be performed in a Quarkus application:</description>
    </item>
    
    <item>
      <title>REST API specification</title>
      <link>/manual/develop/reference/rest/specification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/rest/specification/</guid>
      <description>On production, this should redirect to the following page:
 https://docs.camunda.org/rest/camunda-bpm-platform/7.22/  Or to this page in case you are viewing the docs of the master or latest branch:
 https://docs.camunda.org/rest/camunda-bpm-platform/7.22-SNAPSHOT/  </description>
    </item>
    
    <item>
      <title>Rolling Update</title>
      <link>/manual/develop/update/rolling-update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/rolling-update/</guid>
      <description>Limits for Rolling Updates Rolling updates are not possible prior to Version 7.5. Or in other words: the first update that can be done in the way described on this page is the update from version 7.5.x to 7.6.y.
Also note that it is only possible to update from one minor version to the next. For example, it is possible to update from 7.5.3 to 7.6.2 in a rolling fashion but it is not possible to update from 7.</description>
    </item>
    
    <item>
      <title>Run Camunda 7 using Docker</title>
      <link>/manual/develop/installation/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/installation/docker/</guid>
      <description>Community Edition The Community Edition docker images can be found on GitHub and Docker Hub.
Start Camunda Run using Docker To start Camunda Run execute the following commands:
docker pull camunda/camunda-bpm-platform:run-latest docker run -d --name camunda -p 8080:8080 camunda/camunda-bpm-platform:run-latest Start Camunda (Tomcat) using Docker To start Camunda 7, execute the following commands:
docker pull camunda/camunda-bpm-platform:latest docker run -d --name camunda -p 8080:8080 camunda/camunda-bpm-platform:latest Please note that by default the Apache Tomcat distribution is used.</description>
    </item>
    
    <item>
      <title>Send Task</title>
      <link>/manual/develop/reference/bpmn20/tasks/send-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/tasks/send-task/</guid>
      <description>A Send Task is used to send a message. In Camunda this is done by calling Java code.
The Send Task has the same behavior as a Service Task.
 &amp;lt;sendTask id=&amp;#34;sendTask&amp;#34; camunda:class=&amp;#34;org.camunda.bpm.MySendTaskDelegate&amp;#34; /&amp;gt; Camunda Extensions </description>
    </item>
    
    <item>
      <title>SOAP Connector</title>
      <link>/manual/develop/reference/connect/soap-connector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/connect/soap-connector/</guid>
      <description>In Camunda Connect a Connectors class exists which automatically detects every connector in the classpath. It can be used to get the SOAP connector instance by its connector ID, which is soap-http-connector.
SoapHttpConnector soap = Connectors.getConnector(SoapHttpConnector.ID); The SOAP connector extends the Camunda Connect HTTP connector which uses the Apache HTTP client in the default implementation. To read about default and custom client configuration, please see the corresponding section in the HTTP connector docs.</description>
    </item>
    
    <item>
      <title>Spring Transaction Integration</title>
      <link>/manual/develop/user-guide/spring-framework-integration/transactions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/spring-framework-integration/transactions/</guid>
      <description>Transaction Integration by Example The following explains the SpringTransactionIntegrationTest of the core codebase step by step. Below is the Spring configuration file that we use in this example (you can find it in SpringTransactionIntegrationTest-context.xml). The section shown below contains the dataSource, transactionManager, processEngine and the process engine services.
When passing the DataSource to the SpringProcessEngineConfiguration (using property &amp;ldquo;dataSource&amp;rdquo;), the Camunda engine uses a org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy internally, which wraps the passed DataSource. This is done to make sure the SQL connections retrieved from the DataSource and the Spring transactions play well together.</description>
    </item>
    
    <item>
      <title>Tenant Management</title>
      <link>/manual/develop/webapps/admin/tenant-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/admin/tenant-management/</guid>
      <description>Tenants Menu   The Tenants menu allows you to add, edit and delete tenants. Besides that you can view which user or group is a member of a tenant.
Create a new tenant All you have to do to create a new tenant is:
 Click the Create new tenant button Type the Tenant Id and Tenant Name in the corresponding input fields Click the Create new Tenant button  This creates a new tenant.</description>
    </item>
    
    <item>
      <title>Textareas</title>
      <link>/manual/develop/reference/forms/embedded-forms/controls/textarea/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/forms/embedded-forms/controls/textarea/</guid>
      <description>Textareas are HTML &amp;lt;textarea&amp;gt; elements of the form
&amp;lt;textarea&amp;gt;&amp;lt;/textarea&amp;gt; Binding a Textarea to a Process Variable A textarea input can be bound to a process variable using the cam-variable-type and cam-variable-name directives:
&amp;lt;textarea cam-variable-name=&amp;#34;CUSTOMER_ADDRESS&amp;#34; cam-variable-type=&amp;#34;String&amp;#34;&amp;gt; &amp;lt;/textarea&amp;gt; In the example above, the textarea is bound to the variable named CUSTOMER_ADDRESS of type String.
Supported Variable Types for Textareas The textarea supports the same variable types as the single line text input &amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;&amp;lt;/input&amp;gt;.</description>
    </item>
    
    <item>
      <title>The processes.xml Deployment Descriptor</title>
      <link>/manual/develop/user-guide/process-applications/the-processes-xml-deployment-descriptor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-applications/the-processes-xml-deployment-descriptor/</guid>
      <description>The processes.xml deployment descriptor contains the deployment metadata for a process application. The following example is a simple example of a processes.xml deployment descriptor:
&amp;lt;process-application xmlns=&amp;#34;http://www.camunda.org/schema/1.0/ProcessApplication&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&amp;gt; &amp;lt;process-archive name=&amp;#34;loan-approval&amp;#34;&amp;gt; &amp;lt;process-engine&amp;gt;default&amp;lt;/process-engine&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;property name=&amp;#34;isDeleteUponUndeploy&amp;#34;&amp;gt;false&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;#34;isScanForProcessDefinitions&amp;#34;&amp;gt;true&amp;lt;/property&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;/process-archive&amp;gt; &amp;lt;/process-application&amp;gt; A single deployment (process-archive) is declared. The process archive has the name loan-approval and is deployed to the process engine with the name default. Two additional properties are specified:
 isDeleteUponUndeploy: this property controls whether the undeployment of the process application should entail that the process engine deployment is deleted from the database.</description>
    </item>
    
    <item>
      <title>Usage with a Pre-Built Distribution</title>
      <link>/manual/develop/reference/rest/overview/distro-use/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/rest/overview/distro-use/</guid>
      <description>The REST API is included in Camunda&amp;rsquo;s pre-built distributions. It can be accessed via the context /engine-rest and uses the engines provided by the class BpmPlatform.
The default process engine is available out of the box by accessing /engine-rest/engine/default/{rest-methods} or simply /engine-rest/{rest-methods}. Any other shared (i.e., it is globally visible) process engine that is created later is available through /engine-rest/engine/{name}/{rest-methods} without any further configuration.
Authentication is deactivated by default, but can be activated as described in the Authentication section.</description>
    </item>
    
    <item>
      <title>User operation log</title>
      <link>/manual/develop/user-guide/process-engine/history/user-operation-log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/history/user-operation-log/</guid>
      <description>The user operation log contains entries for many API operations and can be used for auditing purposes. It provides data on what kind of operations are performed as well as details on the changes involved in the operation. Operations are logged when the operation is performed in the context of a logged in user. To use the operation log, the process engine history level must be set to FULL.
Write log entries regardless of user authentication context If it is desired that operations are logged regardless whether they are performed in the context of a logged in user or not, then the process engine configuration flag named restrictUserOperationLogToAuthenticatedUsers can be set to false.</description>
    </item>
    
    <item>
      <title>Writing JSON</title>
      <link>/manual/develop/reference/spin/json/02-writing-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/spin/json/02-writing-json/</guid>
      <description>The JSON datatype supports writing JSON to Strings or Writers.
Writing to a String: import static org.camunda.spin.Spin.JSON; SpinJsonNode jsonNode = JSON(&amp;#34;{\&amp;#34;customer\&amp;#34;: \&amp;#34;Kermit\&amp;#34;}&amp;#34;); String json = jsonNode.toString(); Writing to a Writer import static org.camunda.spin.Spin.JSON; SpinJsonNode jsonNode = JSON(&amp;#34;{\&amp;#34;customer\&amp;#34;: \&amp;#34;Kermit\&amp;#34;}&amp;#34;); StringWriter writer = jsonNode.writeToWriter(new StringWriter()); </description>
    </item>
    
    <item>
      <title>Run Camunda using Spring Boot</title>
      <link>/manual/develop/installation/spring-boot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/installation/spring-boot/</guid>
      <description>To learn how to run Camunda with Spring Boot, please consult the Spring Boot user guide.</description>
    </item>
    
    <item>
      <title>Building Forms in Camunda Modeler</title>
      <link>/manual/develop/modeler/forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/modeler/forms/</guid>
      <description>This content has moved to docs.camunda.io and is available here for all future versions.</description>
    </item>
    
    <item>
      <title>Use Element Templates to Extend the Modeler</title>
      <link>/manual/develop/modeler/element-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/modeler/element-templates/</guid>
      <description>This content has moved to docs.camunda.io and is available here for all future versions.</description>
    </item>
    
    <item>
      <title>Activiti Migration</title>
      <link>/manual/develop/update/activiti/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/activiti/</guid>
      <description>Migrating an existing application from Activiti &amp;lt;= 5.11 (or Camunda fox 6.x - see below) to Camunda 7.0 is straightforward. This page describes the necessary steps. Once done with the migration, the minor version update guides show how to update from 7.0 to the latest Camunda version.
Getting Help If you are on a more recent Activiti version or if you have any trouble migrating, ask for assistance in the Forum or turn to our Consulting services.</description>
    </item>
    
    <item>
      <title>AngularJS Integration</title>
      <link>/manual/develop/reference/forms/embedded-forms/integrate/angular-js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/forms/embedded-forms/integrate/angular-js/</guid>
      <description>Including the Angular Distribution Make sure you include the AngularJS build of the Forms SDK:
&amp;lt;script src=&amp;#34;angular.min.js&amp;#34; type=&amp;#34;text/javascript&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;camunda-bpm-sdk-angular.js&amp;#34; type=&amp;#34;text/javascript&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; Loading the Forms Module Add the Forms SDK as module dependency to your application module:
angular.bootstrap(window.document, [&amp;#39;cam.embedded.forms&amp;#39;, ...]); Angular Directives &amp;amp; Compilation If the form is loaded from a URL, the SDK makes sure that it is properly compiled and linked to the current Angular scope. This allows using Angular directives in forms loaded dynamically at runtime.</description>
    </item>
    
    <item>
      <title>Apache Tomcat Integration</title>
      <link>/manual/develop/user-guide/runtime-container-integration/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/runtime-container-integration/tomcat/</guid>
      <description>JNDI Bindings To use the JNDI Bindings for Camunda 7 Services on Apache Tomcat you have to add the file META-INF/context.xml to your process application and add the following ResourceLinks (Tomcat 9, Tomcat 10.1):
&amp;lt;Context&amp;gt; &amp;lt;ResourceLink name=&amp;#34;ProcessEngineService&amp;#34; global=&amp;#34;global/camunda-bpm-platform/process-engine/ProcessEngineService!org.camunda.bpm.ProcessEngineService&amp;#34; type=&amp;#34;org.camunda.bpm.ProcessEngineService&amp;#34; /&amp;gt; &amp;lt;ResourceLink name=&amp;#34;ProcessApplicationService&amp;#34; global=&amp;#34;global/camunda-bpm-platform/process-engine/ProcessApplicationService!org.camunda.bpm.ProcessApplicationService&amp;#34; type=&amp;#34;org.camunda.bpm.ProcessApplicationService&amp;#34; /&amp;gt; &amp;lt;/Context&amp;gt; These elements are used to create a link to the global JNDI Resources defined in $TOMCAT_HOME/conf/server.xml.
Furthermore, declare the dependency on the JNDI binding inside the WEB-INF/web.</description>
    </item>
    
    <item>
      <title>Architecture Overview</title>
      <link>/manual/develop/introduction/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/introduction/architecture/</guid>
      <description>Camunda is a Java-based framework. The main components are written in Java and we have a general focus on providing Java developers with the tools they need for designing, implementing and running business processes and workflows on the JVM. Nevertheless, we also want to make the process engine technology available to non-Java developers. This is why Camunda also provides a REST API which allows you to build applications connecting to a remote process engine.</description>
    </item>
    
    <item>
      <title>Authorization Management</title>
      <link>/manual/develop/webapps/admin/authorization-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/admin/authorization-management/</guid>
      <description>Manage authorizations for a variety of resources (e.g., Applications, Groups, Filters). In the following sections you will learn how to use an administrator account with the help of some simple use cases.
See Authorization Service for more information about Authorizations.
Accessing the Authorization Management menu The Authorization Management menu is only usable by users which are granted with Read permission for authorizations.
 Grant Basic Permissions In this use case we&amp;rsquo;ll grant some basic permissions.</description>
    </item>
    
    <item>
      <title>Auto Complete</title>
      <link>/manual/develop/reference/cmmn11/markers/auto-complete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/cmmn11/markers/auto-complete/</guid>
      <description>Can be used with: Stage, CasePlanModel
 The attribute autoComplete controls the completion of a stage instance. The following table describes the completion criteria of a stage instance based on the autoComplete property.
 autoComplete = true: There are no children in the ACTIVE state, and all required (see Required Rule) children are COMPLETED, DISABLED or TERMINATED. autoComplete = false: There are no children in the ACTIVE state, and  all children are COMPLETED, DISABLED or TERMINATED, or on manual completion using CaseService#completeCaseExecution, all required (see Required Rule) children are COMPLETED, DISABLED or TERMINATED.</description>
    </item>
    
    <item>
      <title>Automatic Resource Deployment</title>
      <link>/manual/develop/user-guide/spring-framework-integration/deployment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/spring-framework-integration/deployment/</guid>
      <description>Spring integration also has a special feature for deploying resources. In the process engine configuration, you can specify a set of resources. When the process engine is created, all those resources will be scanned and deployed. There is filtering in place that prevents duplicate deployments. Only in case the resources have actually changed, new deployments will be deployed to the engine database. This makes sense in a lot of use cases, where the Spring container is rebooted often (e.</description>
    </item>
    
    <item>
      <title>Case Task</title>
      <link>/manual/develop/reference/cmmn11/tasks/case-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/cmmn11/tasks/case-task/</guid>
      <description>A case task can be used to call another CMMN case.
 A case task is a regular task that requires a caseRef attribute that references a case definition by its key. Such a case task can be defined as follows:
&amp;lt;caseTask id=&amp;#34;checkCreditCase&amp;#34; name=&amp;#34;Check credit&amp;#34; caseRef=&amp;#34;checkCreditCase&amp;#34; /&amp;gt; The referenced case definition is resolved at runtime. This means that the referenced case can be deployed independently from the calling case, if needed.</description>
    </item>
    
    <item>
      <title>Configure the Full Distribution for JBoss EAP/WildFly</title>
      <link>/manual/develop/installation/full/jboss/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/installation/full/jboss/configuration/</guid>
      <description>This page explains how to configure the full distribution for the JBoss EAP/WildFly application server.
LDAP In order to setup LDAP for the JBoss EAP/WildFly Application Server distribution, you have to perform the following steps:
Adjust the Process Engine Configuration Edit the file standalone.xml (or domain.xml) provided by the JBoss EAP/WildFly Application Server and add the LDAP Identity Provider Plugin and the Administrator Authorization Plugin.
&amp;lt;subsystem xmlns=&amp;#34;urn:org.camunda.bpm.jboss:1.1&amp;#34;&amp;gt; &amp;lt;process-engines&amp;gt; &amp;lt;process-engine name=&amp;#34;default&amp;#34; default=&amp;#34;true&amp;#34;&amp;gt; .</description>
    </item>
    
    <item>
      <title>Configure the Full Distribution for Oracle WebLogic</title>
      <link>/manual/develop/installation/full/wls/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/installation/full/wls/configuration/</guid>
      <description>This page explains how to configure the full distribution for an Oracle WebLogic application server.
LDAP In order to set up LDAP for the Oracle WebLogic distribution, you have to perform the following steps:
Add the LDAP Library Make sure the camunda-identity-ldap-$PLATFORM_VERSION.jar is present in the $WLS_DOMAIN_HOME/lib folder.
Adjust the Process Engine Configuration Edit the file bpm-platform.xml located inside the Camunda enterprise archive at camunda-oracle-weblogic-ear-$PLATFORM_VERSION.ear/camunda-oracle-weblogic-service.jar/META-INF/ and add the LDAP Identity Provider Plugin and the Administrator Authorization Plugin.</description>
    </item>
    
    <item>
      <title>Configure the Full Distribution for Tomcat</title>
      <link>/manual/develop/installation/full/tomcat/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/installation/full/tomcat/configuration/</guid>
      <description>This page explains how to configure the full distribution for Tomcat Application Server.
LDAP In order to setup LDAP for the Tomcat distribution, you have to perform the following steps:
Add the LDAP Library Make sure the camunda-identity-ldap-$PLATFORM_VERSION.jar is present in the $TOMCAT_DISTRIBUTION/lib/ folder.
Pre packaged distribution Note: If you use the pre-packaged distribution, the ldap plugin is already present and you can skip this step.
 Adjust the Process Engine Configuration Edit the file bpm-platform.</description>
    </item>
    
    <item>
      <title>Date Inputs</title>
      <link>/manual/develop/reference/forms/embedded-forms/controls/date-inputs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/forms/embedded-forms/controls/date-inputs/</guid>
      <description>Date input is supported using an &amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt; control.
Binding to a Process Variable To bind the input field to a Java Date variable, the directive cam-variable-type=&amp;quot;Date&amp;quot; must be used.
Example:
&amp;lt;input type=&amp;#34;text&amp;#34; cam-variable-name=&amp;#34;CONTRACT_START_DATE&amp;#34; cam-variable-type=&amp;#34;Date&amp;#34; /&amp;gt; Date Format Currently only the ISO Date Format yyyy-MM-dd&#39;T&#39;HH:mm:ss is supported. Example value: 2013-01-23T13:42:42
Using a Date Picker The Form SDK itself does not provide any custom components or widgets. As such it also does not provide a date picker.</description>
    </item>
    
    <item>
      <title>Decision Service in the Process Engine</title>
      <link>/manual/develop/user-guide/process-engine/decisions/decision-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/decisions/decision-service/</guid>
      <description>The decision service is a part of the process engine&amp;rsquo;s Services API. It allows to evaluate a deployed decision definition independently from BPMN and CMMN.
Evaluating a Decision To evaluate a deployed decision, reference it by id or a combination of key and version. If a key is used but no version is specified then the latest version of decision definition with the given key is evaluated.
DecisionService decisionService = processEngine.</description>
    </item>
    
    <item>
      <title>DMN Decision Table Rule</title>
      <link>/manual/develop/reference/dmn/decision-table/rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/dmn/decision-table/rule/</guid>
      <description>A decision table can have one or more rules. Each rule contains input and output entries. The input entries are the condition and the output entries the conclusion of the rule. If each input entry (condition) is satisfied, then the rule is satisfied and the decision result contains the output entries (conclusion) of this rule.
A rule is represented by a rule element inside a decisionTable XML element.</description>
    </item>
    
    <item>
      <title>Embed the API</title>
      <link>/manual/develop/reference/rest/overview/embeddability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/rest/overview/embeddability/</guid>
      <description>The REST API is an artifact of its own, which means that it can be embedded in any other JAX-RS application independently of the engine.
Prerequisites The REST API classes are tested with RESTEasy and Jersey as the JAX-RS implementation. Furthermore, the engine classes and Jackson&amp;rsquo;s com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider artifact (as well as transitive Jackson dependencies) have to be on the classpath.
Required Steps Step 1: Add the REST API to your project as a Maven dependency.</description>
    </item>
    
    <item>
      <title>Entry and Exit Criteria</title>
      <link>/manual/develop/reference/cmmn11/concepts/entry-exit-criteria/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/cmmn11/concepts/entry-exit-criteria/</guid>
      <description>Transitions in a CMMN case can happen in two ways: Either by external interaction or by events occurring and conditions being fulfilled. The former refers to any explicit interaction with a case that is triggered from the outside. For example, a human worker completing a human task would be such an interaction. Completing a task means that the corresponding plan item is completed, depending on the actual case model, the case instance may complete.</description>
    </item>
    
    <item>
      <title>Event Subprocess</title>
      <link>/manual/develop/reference/bpmn20/subprocesses/event-subprocess/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/subprocesses/event-subprocess/</guid>
      <description>The event subprocess is a subprocess that is triggered by an event. An event subprocess can be added at the process level or at any subprocess level. The event used to trigger an event subprocess is configured using a start event. Therefore, none start events are not supported for event subprocesses. An event subprocess might be triggered using events like message events, error events, signal events, timer events, or compensation events.</description>
    </item>
    
    <item>
      <title>Expression Resolving</title>
      <link>/manual/develop/user-guide/cdi-java-ee-integration/expression-resolving/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/cdi-java-ee-integration/expression-resolving/</guid>
      <description>The camunda-engine-cdi and camunda-engine-cdi-jakarta libraries expose CDI beans via Expression Language, using a custom resolver. This makes it possible to reference beans from the process:
&amp;lt;userTask id=&amp;#34;authorizeBusinessTrip&amp;#34; name=&amp;#34;Authorize Business Trip&amp;#34; camunda:assignee=&amp;#34;#{authorizingManager.account.username}&amp;#34; /&amp;gt; Where &amp;ldquo;authorizingManager&amp;rdquo; could be a bean provided by a producer method:
@Inject @ProcessVariable private Object businessTripRequesterUsername; @Produces @Named public Employee authorizingManager() { TypedQuery&amp;lt;Employee&amp;gt; query = entityManager.createQuery(&amp;#34;SELECT e FROM Employee e WHERE e.account.username=&amp;#39;&amp;#34; + businessTripRequesterUsername + &amp;#34;&amp;#39;&amp;#34;, Employee.class); Employee employee = query.</description>
    </item>
    
    <item>
      <title>Expressions in the DMN Engine</title>
      <link>/manual/develop/user-guide/dmn-engine/expressions-and-scripts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/dmn-engine/expressions-and-scripts/</guid>
      <description>Decision tables and decision literal expressions allow specifying different types of expressions. This section describes which types of expressions exist. It lists which expression languages are supported and demonstrates how to change the used expression language for an expression.
Expressions in DMN As shown in the decision table and decision literal expression reference, four types of expressions are supported:
 Input Expression: sets the input value for an input column of the decision table Input Entry: used to determine if a rule of the decision table is applicable Output Entry: returns a value which is added to the output of a matched rule of the decision table Literal Expression: used to determine the value of a decision literal expression  You can read more on this in the DMN 1.</description>
    </item>
    
    <item>
      <title>Extending Connect</title>
      <link>/manual/develop/reference/connect/extending-connect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/connect/extending-connect/</guid>
      <description>Configuring Connectors The connectors available to Connect may not always suit your needs. Sometimes, it is necessary to provide configuration.
To configure a connector detected by Spin, the SPI org.camunda.connect.spi.ConnectorConfigurator can be implemented. A configurator specifies which classes it can configure. Connect discovers a configurator by employing Java&amp;rsquo;s service loader mechanism and will then provide it with all connectors that match the specified class (or are a subclass thereof). The concrete configuration options depend on the actual connector.</description>
    </item>
    
    <item>
      <title>Extending Spin</title>
      <link>/manual/develop/reference/spin/extending-spin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/spin/extending-spin/</guid>
      <description>Configuring Data Formats The data formats available to Spin may not always suit your needs. Sometimes, it is necessary to provide configuration. For example, when using Spin to map Java objects to JSON, a format for how dates are serialized has to specified. While the Spin data formats use reasonable default values, they can also be changed.
To configure a data format detected by Spin, the SPI org.camunda.spin.spi.DataFormatConfigurator can be implemented.</description>
    </item>
    
    <item>
      <title>FEEL Engine Spin Integration</title>
      <link>/manual/develop/user-guide/dmn-engine/feel/spin-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/dmn-engine/feel/spin-integration/</guid>
      <description>This page documents how Camunda Spin can be used together with the Scala FEEL Engine. Furthermore, it is shown how Spin data types are mapped to FEEL data types, as well as some rules when the former data structures are transformed into the latter.
Where can the Spin integration be found The Spin integration for the FEEL Engine is implemented into the Spin Process Engine Plugin since it is expected that the Process Engine should be capable of using Spin, if another component of Camunda 7 (here, the FEEL Engine) supports its usage.</description>
    </item>
    
    <item>
      <title>Filters</title>
      <link>/manual/develop/webapps/tasklist/filters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/tasklist/filters/</guid>
      <description>In Tasklist, you can create and select filters. You can use these filters to create lists of tasks, sorted by specified criteria. To create a filter, select Create a Filter. You will then see a screen as depicted in the above image. You have several options to configure your filter:
 General - Specify the name and description of the filter as well as assigning a color. Assign a priority to determine the order in which the filters are displayed on the dashboard.</description>
    </item>
    
    <item>
      <title>History cleanup</title>
      <link>/manual/develop/user-guide/process-engine/history/history-cleanup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/history/history-cleanup/</guid>
      <description>When used intensively, the process engine can produce a huge amount of historic data. History Cleanup is a feature that removes this data based on configurable time-to-live settings.
It deletes:
 Historic process instances plus all related historic data (e.g., historic variable instances, historic task instances, historic instance permissions, all comments and attachments related to them, etc.) Historic decision instances plus all related historic data (i.e., historic decision input and output instances) Historic case instances plus all related historic data (e.</description>
    </item>
    
    <item>
      <title>Install the Full Distribution on an IBM WebSphere Server Liberty</title>
      <link>/manual/develop/installation/full/was/manual-liberty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/installation/full/was/manual-liberty/</guid>
      <description>This section will describe how you can install Camunda 7 and its components on an IBM WebSphere Application Server Liberty. To perform the Camunda 7 installation on WebSphere Liberty you will need the following:
 The camunda-ee-ibm-was-7.22.0-ee .tar.gz or .zip archive available from the enterprise downloads page. A basic understanding on how to create a WebSphere Liberty server. A basic understanding on how to deploy applications in Websphere Liberty. You should also consider the WebSphere Liberty Java support documentation.</description>
    </item>
    
    <item>
      <title>Job Executor Configuration</title>
      <link>/manual/develop/reference/deployment-descriptors/tags/job-executor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/deployment-descriptors/tags/job-executor/</guid>
      <description>The job executor tag is used to configure the job executor and can be placed in the bpm-platform.xml file.
Example The following example shows a job executor XML snippet:
&amp;lt;job-executor&amp;gt; &amp;lt;job-acquisition name=&amp;#34;default&amp;#34;&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;property name=&amp;#34;maxJobsPerAcquisition&amp;#34;&amp;gt;5&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;#34;waitTimeInMillis&amp;#34;&amp;gt;8000&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;#34;lockTimeInMillis&amp;#34;&amp;gt;400000&amp;lt;/property&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;/job-acquisition&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;!-- Note: the following properties only take effect in a Tomcat environment --&amp;gt; &amp;lt;property name=&amp;#34;queueSize&amp;#34;&amp;gt;3&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;#34;corePoolSize&amp;#34;&amp;gt;5&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;#34;maxPoolSize&amp;#34;&amp;gt;10&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;#34;keepAliveTime&amp;#34;&amp;gt;0&amp;lt;/property&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;/job-executor&amp;gt; Syntax Reference Job-Executor Configuration Properties The following is a list with the available job acquisition thread configuration properties, along with some explanations.</description>
    </item>
    
    <item>
      <title>Lifecycle and Events</title>
      <link>/manual/develop/reference/forms/embedded-forms/lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/forms/embedded-forms/lifecycle/</guid>
      <description>Events Event Listeners Event listeners can be registered from custom JavaScript:
&amp;lt;form role=&amp;#34;form&amp;#34; name=&amp;#34;form&amp;#34;&amp;gt; &amp;lt;script cam-script type=&amp;#34;text/form-script&amp;#34;&amp;gt; camForm.on(&amp;#39;form-loaded&amp;#39;, function() { // handle form loaded  }); camForm.on(&amp;#39;variables-fetched&amp;#39;, function() { // handle variables fetched  }); camForm.on(&amp;#39;variables-restored&amp;#39;, function() { // handle variables restored  }); camForm.on(&amp;#39;variables-applied&amp;#39;, function() { // handle variables applied  }); camForm.on(&amp;#39;store&amp;#39;, function(evt) { // handle store  // may prevent the store from being executed  evt.storePrevented = true; }); camForm.</description>
    </item>
    
    <item>
      <title>Live Editing of DMN Decisions</title>
      <link>/manual/develop/webapps/cockpit/dmn/live-editing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/dmn/live-editing/</guid>
      <description>Enterprise Feature Please note that this feature is only included in the enterprise edition of Camunda 7, it is not available in the community edition.
 Check the Camunda enterprise homepage for more information or get your free trial version.  DMN tables can be changed directly in Cockpit. Clicking on the  Edit  button will open a dialog which contains an editable version of the DMN table. This button is only available for DMN resources.</description>
    </item>
    
    <item>
      <title>Message Events</title>
      <link>/manual/develop/reference/bpmn20/events/message-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/events/message-events/</guid>
      <description>Message events are events which reference a named message. A message has a name and a payload. Unlike a signal, a message event is always directed at a single recipient.
Defining a Message A message event definition is declared by using the messageEventDefinition element. The attribute messageRef references a message element declared as a child element of the definitions root element. The following is an excerpt of a process in which two message events are declared and referenced by a start event and an intermediate catching message event.</description>
    </item>
    
    <item>
      <title>Microsoft SQL Server and Azure SQL Database Configuration</title>
      <link>/manual/develop/user-guide/process-engine/database/mssql-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/database/mssql-configuration/</guid>
      <description>This section documents the additional database configuration changes necessary to correctly use Microsoft SQL Server or Microsoft Azure SQL databases with Camunda 7. It provides guides on:
 How to set the correct database transaction isolation level. How different Microsoft SQL Server versions are supported in Azure SQL. How Camunda supports Azure SQL. How to configure a database on Azure SQL to be supported by Camunda.  To use these guides, you should have a basic understanding of (Microsoft&amp;rsquo;s) T-SQL syntax.</description>
    </item>
    
    <item>
      <title>Parallel Gateway</title>
      <link>/manual/develop/reference/bpmn20/gateways/parallel-gateway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/gateways/parallel-gateway/</guid>
      <description>Gateways can also be used to model concurrency in a process. The most straightforward gateway to introduce concurrency in a process model is the Parallel Gateway, which allows forking into multiple paths of execution or joining multiple incoming paths of execution.
The functionality of the parallel gateway is based on the incoming and outgoing sequence flow(s):
 fork: all outgoing sequence flows are followed in parallel, creating one concurrent execution for each sequence flow.</description>
    </item>
    
    <item>
      <title>Participating in the Form Lifecycle</title>
      <link>/manual/develop/reference/forms/embedded-forms/javascript/lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/forms/embedded-forms/javascript/lifecycle/</guid>
      <description>It is possible to participate in the lifecycle of the form. See Form Lifecycle and Events for more details.
Fetching Additional Variables When loading the form, the values of all variables used in the form are fetched from the backend. This means that the form SDK only fetches those variables which are actually used in the form. The most convenient way to use a variable is the cam-variable-name directive. However, there are some situations where directive-based usage is inconvenient.</description>
    </item>
    
    <item>
      <title>Process Application Event Listeners</title>
      <link>/manual/develop/user-guide/process-applications/process-application-event-listeners/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-applications/process-application-event-listeners/</guid>
      <description>The process engine supports defining two types of event listeners: Task Event Listeners and Execution Event Listeners. Task Event listeners allow to react to Task Events (Tasks are Created, Assigned, Completed). Execution Listeners allow to react to events fired as execution progresses through the diagram: Activities are Started, Ended and Transitions are being taken.
When using the process application API, the process engine makes sure that Events are delegated to the right process application.</description>
    </item>
    
    <item>
      <title>Process Engine Concepts</title>
      <link>/manual/develop/user-guide/process-engine/process-engine-concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/process-engine-concepts/</guid>
      <description>This section explains some core process engine concepts that are used in both the process engine API and the internal process engine implementation. Understanding these fundamentals makes it easier to use the process engine API.
Process Definitions A process definition defines the structure of a process. You could say that the process definition is the process. Camunda 7 uses BPMN 2.0 as its primary modeling language for modeling process definitions.</description>
    </item>
    
    <item>
      <title>Process Instance View</title>
      <link>/manual/develop/webapps/cockpit/bpmn/process-instance-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/bpmn/process-instance-view/</guid>
      <description>Open the process instance view by selecting a process instance from the process definition view instance list. This view allows you to drill down into a single process instance and explore its running activities as well as the variables, tasks, jobs, etc. Beside the diagram view the process will be displayed as an activity instance tree view. Variables that belong to the instance will be listed in a variables table of the detailed information panel.</description>
    </item>
    
    <item>
      <title>Querying JSON</title>
      <link>/manual/develop/reference/spin/json/03-querying-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/spin/json/03-querying-json/</guid>
      <description>The JSON datatype supports querying with the JSONPath query language.
Querying an Element import static org.camunda.spin.Spin.JSON; String json = &amp;#34;{\&amp;#34;child\&amp;#34;: [{\&amp;#34;id\&amp;#34;: 1,\&amp;#34;name\&amp;#34;: \&amp;#34;Lucy\&amp;#34;,\&amp;#34;sex\&amp;#34;: \&amp;#34;female\&amp;#34;},{\&amp;#34;id\&amp;#34;: 2,\&amp;#34;name\&amp;#34;: \&amp;#34;Tracy\&amp;#34;,\&amp;#34;sex\&amp;#34;: \&amp;#34;female\&amp;#34;}],\&amp;#34;number\&amp;#34;: 1,\&amp;#34;boolean\&amp;#34;: true}&amp;#34;; SpinJsonNode child = JSON(json).jsonPath(&amp;#34;$.child[0]&amp;#34;).element(); Querying an Element List import static org.camunda.spin.Spin.JSON; String json = &amp;#34;{\&amp;#34;child\&amp;#34;: [{\&amp;#34;id\&amp;#34;: 1,\&amp;#34;name\&amp;#34;: \&amp;#34;Lucy\&amp;#34;,\&amp;#34;sex\&amp;#34;: \&amp;#34;female\&amp;#34;},{\&amp;#34;id\&amp;#34;: 2,\&amp;#34;name\&amp;#34;: \&amp;#34;Tracy\&amp;#34;,\&amp;#34;sex\&amp;#34;: \&amp;#34;female\&amp;#34;}],\&amp;#34;number\&amp;#34;: 1,\&amp;#34;boolean\&amp;#34;: true}&amp;#34;; SpinList&amp;lt;SpinJsonNode&amp;gt; childs = JSON(json).jsonPath(&amp;#34;$.child&amp;#34;).elementList(); Querying a String import static org.camunda.spin.Spin.JSON; String json = &amp;#34;{\&amp;#34;child\&amp;#34;: [{\&amp;#34;id\&amp;#34;: 1,\&amp;#34;name\&amp;#34;: \&amp;#34;Lucy\&amp;#34;,\&amp;#34;sex\&amp;#34;: \&amp;#34;female\&amp;#34;},{\&amp;#34;id\&amp;#34;: 2,\&amp;#34;name\&amp;#34;: \&amp;#34;Tracy\&amp;#34;,\&amp;#34;sex\&amp;#34;: \&amp;#34;female\&amp;#34;}],\&amp;#34;number\&amp;#34;: 1,\&amp;#34;boolean\&amp;#34;: true}&amp;#34;; String value = JSON(json).</description>
    </item>
    
    <item>
      <title>REST API</title>
      <link>/manual/develop/user-guide/spring-boot-integration/rest-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/spring-boot-integration/rest-api/</guid>
      <description>To enable the REST API you can use the following starter in your pom.xml:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.camunda.bpm.springboot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camunda-bpm-spring-boot-starter-rest&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{project-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; By default the application path is engine-rest, so without any further configuration you can access the api at http://localhost:8080/engine-rest.
Because we use jersey, one can use spring boot&amp;rsquo;s common application properties. For example, to change the application path, use
spring.jersey.application-path=myapplicationpath To modify the configuration or register additional resources, one can provide a bean which extends from org.</description>
    </item>
    
    <item>
      <title>User Task</title>
      <link>/manual/develop/reference/bpmn20/tasks/user-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/tasks/user-task/</guid>
      <description>A User Task is used to model work that needs to be done by a human actor. When the process execution arrives at such a User Task, a new task is created in the task list of the user(s) or group(s) assigned to that task.
 A User Task is defined in XML as follows. The id attribute is required, while the name attribute is optional.
&amp;lt;userTask id=&amp;#34;theTask&amp;#34; name=&amp;#34;Important task&amp;#34; /&amp;gt; Description A User Task can also have a description.</description>
    </item>
    
    <item>
      <title>Writing XML</title>
      <link>/manual/develop/reference/spin/xml/03-writing-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/spin/xml/03-writing-xml/</guid>
      <description>The XML datatype supports writing XML to Strings, output streams or writers.
Writing to a String: import static org.camunda.spin.Spin.XML; import org.camunda.spin.xml.SpinXmlElement; // Create XML element SpinXmlElement element = XML(&amp;#34;&amp;lt;root id=\&amp;#34;test\&amp;#34;/&amp;gt;&amp;#34;); String xml = element.toString(); String value = element.attr(&amp;#34;id&amp;#34;).value(); Writing to an Output Stream: import static org.camunda.spin.Spin.XML; import org.camunda.spin.xml.SpinXmlElement; import org.camunda.spin.xml.SpinXmlAttribute; // Create XML element SpinXmlElement element = XML(&amp;#34;&amp;lt;root id=\&amp;#34;test\&amp;#34;/&amp;gt;&amp;#34;); try { // Define Output Stream  OutputStream outputStream = System.out; // Wrap Output Stream in Writer  OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream); // Write element to stream writer  element.</description>
    </item>
    
    <item>
      <title>XML</title>
      <link>/manual/develop/user-guide/data-formats/xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/data-formats/xml/</guid>
      <description>For working with XML, the Spin functions org.camunda.spin.Spin.S and org.camunda.spin.Spin.XML can be used as entry points. The latter offers strongly-typed access to Spin&amp;rsquo;s XML API and is preferable when writing Java code. In scripting environments, only the S function is available. The returned Spin wrapper offers methods for manipulating and writing XML as well as mapping XML to Java. Furthermore, the entry functions can be provided with Java objects that get implicitly converted to Spin&amp;rsquo;s intermediary XML format.</description>
    </item>
    
    <item>
      <title>Process Application Resource Access</title>
      <link>/manual/develop/user-guide/process-applications/process-application-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-applications/process-application-resources/</guid>
      <description>Process applications provide and logically group resources specific to the processes they contain. There are resources that are part of the application itself, like a classloader and its classes and resources, as well as resources managed by the process engine at runtime, like a set of scripting engines or Spin data formats. This section describes under which conditions the process engine looks up resources on process application level and how that lookup can be enforced.</description>
    </item>
    
    <item>
      <title>Run Camunda 7 using Karaf / OSGi</title>
      <link>/manual/develop/installation/karaf-osgi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/installation/karaf-osgi/</guid>
      <description>Community Edition If you want to run Camunda with Karaf / OSGi, you can find the corresponding distributions on GitHub.</description>
    </item>
    
    <item>
      <title>Boolean Inputs</title>
      <link>/manual/develop/reference/forms/embedded-forms/controls/boolean-inputs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/forms/embedded-forms/controls/boolean-inputs/</guid>
      <description>Checkbox Checkboxes are HTML &amp;lt;input type=&amp;quot;checkbox&amp;quot;&amp;gt; controls. Checkbox controls can be used for boolean variable types.
Binding a Checkbox to a Process Variable A checkbox input can be bound to a process variable using the cam-variable-type and cam-variable-name directives:
&amp;lt;input type=&amp;#34;checkbox&amp;#34; cam-variable-name=&amp;#34;IS_VIP_CUSTOMER&amp;#34; cam-variable-type=&amp;#34;Boolean&amp;#34; /&amp;gt; In the example above, the checkbox is bound to the variable named IS_VIP_CUSTOMER of type Boolean.
Supported Variable Types for Checkboxes The checkbox input field only supports boolean variable types.</description>
    </item>
    
    <item>
      <title>Business Rule Task</title>
      <link>/manual/develop/reference/bpmn20/tasks/business-rule-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/tasks/business-rule-task/</guid>
      <description>A Business Rule Task is used to synchronously execute one or more rules. It is also possible to call Java code or providing a work item for an external worker to complete asynchronously or invoking a logic which is implemented in form of webservices.
 Using Camunda DMN Engine You can use the Camunda DMN engine integration to evaluate a DMN decision. You have to specify the decision key to evaluate as the camunda:decisionRef attribute.</description>
    </item>
    
    <item>
      <title>Cleanup View</title>
      <link>/manual/develop/webapps/cockpit/cleanup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/cleanup/</guid>
      <description>Enterprise Feature Please note that this feature is only included in the enterprise edition of Camunda 7, it is not available in the community edition.
 Check the Camunda enterprise homepage for more information or get your free trial version.    The cleanup view in Cockpit provides information about the history cleanup state and statistics about the cleanable and deleted data. Moreover, the page allows to manually perform various operations related to the history cleanup.</description>
    </item>
    
    <item>
      <title>Configure the Full Distribution for IBM WebSphere</title>
      <link>/manual/develop/installation/full/was/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/installation/full/was/configuration/</guid>
      <description>This page explains how to configure the full distribution for an IBM WebSphere application server.
LDAP In order to set up LDAP for the IBM WebSphere distribution, you have to perform the following steps:
Add the LDAP Library Make sure the camunda-identity-ldap-$PLATFORM_VERSION.jar is present in the shared library &amp;lsquo;Camunda&amp;rsquo; folder.
Adjust the Process Engine Configuration Edit the file bpm-platform.xml located inside the Camunda enterprise archive at camunda-ibm-websphere-ear-$VERSION.ear/camunda-ibm-websphere-service.jar/META-INF/ and add the LDAP Identity Provider Plugin and the Administrator Authorization Plugin.</description>
    </item>
    
    <item>
      <title>Contextual Programming Model</title>
      <link>/manual/develop/user-guide/cdi-java-ee-integration/contextual-programming-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/cdi-java-ee-integration/contextual-programming-model/</guid>
      <description>In this section we briefly look at the contextual process execution model used by the Camunda CDI extension.
A BPMN business process is typically a long-running interaction, comprised of both user and system tasks. At runtime, a process is split-up into a set of individual units of work, performed by users and/or application logic.
In Camunda CDI, a process instance can be associated with a CDI scope, the association representing a unit of work.</description>
    </item>
    
    <item>
      <title>Custom implementation</title>
      <link>/manual/develop/user-guide/process-engine/history/custom-implementation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/history/custom-implementation/</guid>
      <description>Provide a custom history backend In order to understand how to provide a custom history backend, it is useful to first look at a more detailed view of the history architecture:
  Whenever the state of a runtime entity is changed, the core execution component of the process engine fires History Events. In order to make this flexible, the actual creation of the History Events as well as populating the history events with data from the runtime structures is delegated to the History Event Producer.</description>
    </item>
    
    <item>
      <title>Data Types in the DMN Engine</title>
      <link>/manual/develop/user-guide/dmn-engine/data-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/dmn-engine/data-types/</guid>
      <description>A decision table allows to specify the types of inputs and outputs. When the DMN engine evaluates an input or an output, it checks if the type of the value matches the specified type. If the types do not match, the engine tries to transform the value into the specified type or throws an exception.
The DMN engine supports basic types which can be extended by custom types.
Supported Data Types The following types are supported by the DMN engine:</description>
    </item>
    
    <item>
      <title>Debugging Scripts</title>
      <link>/manual/develop/reference/forms/embedded-forms/javascript/debugging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/forms/embedded-forms/javascript/debugging/</guid>
      <description>If a form script is loaded using an XHR from a web server, it is executed using eval(). To debug it, you need to use browser-specific debugger extensions.
Debugging Form Scripts in Google Chrome If you are using the Google Chrome debugger, you can add the debugger; directive to the source code of the script:
&amp;lt;form role=&amp;#34;form&amp;#34;&amp;gt; &amp;lt;script cam-script type=&amp;#34;text/form-script&amp;#34;&amp;gt; debugger; &amp;lt;/script&amp;gt; &amp;lt;/form&amp;gt; </description>
    </item>
    
    <item>
      <title>Decision Task</title>
      <link>/manual/develop/reference/cmmn11/tasks/decision-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/cmmn11/tasks/decision-task/</guid>
      <description>A decision task can be used to invoke a DMN 1.3 decision from a case.
 A decision task is a regular task that requires a decisionRef attribute that references a decision definition by its key. Such a decision task can be defined as follows:
&amp;lt;decisionTask id=&amp;#34;checkCreditDecision&amp;#34; name=&amp;#34;Check credit&amp;#34; decisionRef=&amp;#34;checkCreditDecision&amp;#34; /&amp;gt; Instead of the decisionRef attribute it is also possible to use an expression which must evaluate to a key of a decision definition at runtime.</description>
    </item>
    
    <item>
      <title>Deployment View</title>
      <link>/manual/develop/webapps/cockpit/deployment-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/deployment-view/</guid>
      <description>The deployment view of Cockpit shows an overview of all deployments, their resources and the content of these resources. It allows the deletion of existing deployments as well as redeployment of old resources and the creation of new deployments. The content of resources within deployments can be displayed. It is also possible to download single resources from this view.
Search Use the search field at the top of the list of deployments to find specific deployments.</description>
    </item>
    
    <item>
      <title>DMN Hit Policy</title>
      <link>/manual/develop/reference/dmn/decision-table/hit-policy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/dmn/decision-table/hit-policy/</guid>
      <description>A decision table has a hit policy that specifies what the results of the evaluation of a decision table consist of.
The hit policy is set in the hitPolicy attribute on the decisionTable XML element. If no hit policy is set, then the default hit policy UNIQUE is used.
&amp;lt;definitions xmlns=&amp;#34;https://www.omg.org/spec/DMN/20191111/MODEL/&amp;#34; id=&amp;#34;definitions&amp;#34; name=&amp;#34;definitions&amp;#34; namespace=&amp;#34;http://camunda.org/schema/1.0/dmn&amp;#34;&amp;gt; &amp;lt;decision id=&amp;#34;dish&amp;#34; name=&amp;#34;Dish&amp;#34;&amp;gt; &amp;lt;decisionTable id=&amp;#34;decisionTable&amp;#34; hitPolicy=&amp;#34;RULE ORDER&amp;#34;&amp;gt; &amp;lt;!-- .. --&amp;gt; &amp;lt;/decisionTable&amp;gt; &amp;lt;/decision&amp;gt; &amp;lt;/definitions&amp;gt; The following hit policies are supported by the Camunda DMN engine:</description>
    </item>
    
    <item>
      <title>Fluent Builder API</title>
      <link>/manual/develop/user-guide/model-api/bpmn-model-api/fluent-builder-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/model-api/bpmn-model-api/fluent-builder-api/</guid>
      <description>To create simple BPMN processes we provide a fluent builder API. With this API you can easily create basic processes in a few lines of code. In the generate process fluent api quickstart we demonstrate how to create a rather complex process with 5 tasks and 2 gateways within less than 50 lines of code.
The fluent builder API is not nearly complete but provides you with the following basic elements:</description>
    </item>
    
    <item>
      <title>Full Example</title>
      <link>/manual/develop/reference/forms/embedded-forms/integrate/full-examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/forms/embedded-forms/integrate/full-examples/</guid>
      <description>Full examples of how to integrate the Forms SDK in a custom application can be found in the Camunda 7 Examples Repository in Github.
 Example for standalone usage of the SDK Example for standalone usage of the SDK with AngularJS Integration  </description>
    </item>
    
    <item>
      <title>History in Cockpit</title>
      <link>/manual/develop/webapps/cockpit/bpmn/process-history-views/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/bpmn/process-history-views/</guid>
      <description>Enterprise Feature Please note that this feature is only included in the enterprise edition of Camunda 7, it is not available in the community edition.
 Check the Camunda enterprise homepage for more information or get your free trial version.  At the top of the process definition view and the process instance view, you can hit the History button to access the history view.
Process Definition History View   In the history view of the process definition you see an overview of all of the running and completed process instances.</description>
    </item>
    
    <item>
      <title>Hypertext Application Language (HAL)</title>
      <link>/manual/develop/reference/rest/overview/hal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/rest/overview/hal/</guid>
      <description>The REST API provides some resources in an additional media type. The HAL media type application/hal+json describes a format which contains links and information about other resources. This allows us to embed the process definition or assignee of a task directly into the response, which in turn reduces the number of necessary requests to gather all information about a single task or a list of tasks.
To interact with HAL, you have to set application/hal+json as Accept header.</description>
    </item>
    
    <item>
      <title>Inclusive Gateway</title>
      <link>/manual/develop/reference/bpmn20/gateways/inclusive-gateway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/gateways/inclusive-gateway/</guid>
      <description>The Inclusive Gateway can be seen as a combination of an exclusive and a parallel gateway. Like an exclusive gateway, you can define conditions on outgoing sequence flows and the inclusive gateway will evaluate them. However, the main difference is that the inclusive gateway can receive more than one sequence flow, like a parallel gateway.
The functionality of the inclusive gateway is based on the incoming and outgoing sequence flows:</description>
    </item>
    
    <item>
      <title>Invoke Decisions from Processes and Cases</title>
      <link>/manual/develop/user-guide/process-engine/decisions/bpmn-cmmn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/decisions/bpmn-cmmn/</guid>
      <description>BPMN &amp;amp; CMMN Integration This section explains how to invoke DMN decision from BPMN and CMMN.
BPMN Business Rule Task The BPMN business rule task can reference a deployed decision definition. The decision definition is evaluated when the task is executed.
&amp;lt;definitions id=&amp;#34;taskAssigneeExample&amp;#34; xmlns=&amp;#34;http://www.omg.org/spec/BPMN/20100524/MODEL&amp;#34; xmlns:camunda=&amp;#34;http://camunda.org/schema/1.0/bpmn&amp;#34; targetNamespace=&amp;#34;Examples&amp;#34;&amp;gt; &amp;lt;process id=&amp;#34;process&amp;#34;&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;businessRuleTask id=&amp;#34;businessRuleTask&amp;#34; camunda:decisionRef=&amp;#34;myDecision&amp;#34; camunda:mapDecisionResult=&amp;#34;singleEntry&amp;#34; camunda:resultVariable=&amp;#34;result&amp;#34; /&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;/process&amp;gt; &amp;lt;/definitions&amp;gt; For more information on how to reference a decision definition from a business rule task, please refer to the BPMN 2.</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>/manual/develop/user-guide/data-formats/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/data-formats/json/</guid>
      <description>For working with JSON, the Spin functions org.camunda.spin.Spin.S and org.camunda.spin.Spin.JSON can be used as entry points. The latter offers strongly-typed access to Spin&amp;rsquo;s JSON API and is preferable when writing Java code. In scripting environments, only the S function is available. The returned Spin wrapper offers methods for manipulating and writing JSON as well as mapping JSON to Java. Furthermore, the entry functions can be provided with Java objects that get implicitly converted to Spin&amp;rsquo;s intermediary JSON format.</description>
    </item>
    
    <item>
      <title>Mapping JSON</title>
      <link>/manual/develop/reference/spin/json/04-mapping-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/spin/json/04-mapping-json/</guid>
      <description>Spin can deserialize JSON to Java objects and serialize Java objects to JSON by integrating Jackson&amp;rsquo;s mapping features into its fluent API.
Mapping between Representations: Assume we have a class Customer defined as follows:
public class Customer { private String name; public String getName() { return name; } public void setName(String name) { this.name = name; } } Mapping JSON to Java: We can map a JSON object {&amp;quot;name&amp;quot; : &amp;quot;Kermit&amp;quot;} to an instance of Customer as follows:</description>
    </item>
    
    <item>
      <title>Maven Project Templates (Archetypes)</title>
      <link>/manual/develop/user-guide/process-applications/maven-archetypes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-applications/maven-archetypes/</guid>
      <description>We provide several project templates for Maven, which are also called Archetypes. They enable a quickstart for developing production-ready process applications using Camunda 7. We incorporated best practices for different application types into the templates to help you start off with a solid base.
The Archetypes can be used to generate projects as detailed in the different usage sections. In case generating a project from an Archetype on your own is not feasible, we also provide a template GitHub repository for every Archetype.</description>
    </item>
    
    <item>
      <title>Process Archive Configuration</title>
      <link>/manual/develop/reference/deployment-descriptors/tags/process-archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/deployment-descriptors/tags/process-archive/</guid>
      <description>The process archive tag allows configuration of a process engine deployment and can be used in the processes.xml file.
See the processes.xml section of the User Guide for more details.
Example The following example shows a process-archive XML snippet:
&amp;lt;process-archive name=&amp;#34;loan-approval&amp;#34;&amp;gt; &amp;lt;process-engine&amp;gt;my-engine&amp;lt;/process-engine&amp;gt; &amp;lt;resource&amp;gt;bpmn/invoice.bpmn&amp;lt;/resource&amp;gt; &amp;lt;resource&amp;gt;bpmn/order-resource.bpmn&amp;lt;/resource&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;property name=&amp;#34;isDeleteUponUndeploy&amp;#34;&amp;gt;false&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;#34;isScanForProcessDefinitions&amp;#34;&amp;gt;true&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;#34;additionalResourceSuffixes&amp;#34;&amp;gt;groovy,py&amp;lt;/property&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;/process-archive&amp;gt; Syntax Reference Configuration Properties The following is a list of all supported configuration properties.
 &amp;lt;li&amp;gt; &amp;lt;strong&amp;gt;local to the root of the classpath.</description>
    </item>
    
    <item>
      <title>Process Variables</title>
      <link>/manual/develop/user-guide/process-engine/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/variables/</guid>
      <description>This section describes the concepts of variables in processes. Variables can be used to add data to process runtime state or, more particular, variable scopes. Various API methods that change the state of these entities allow updating of the attached variables. In general, a variable consists of a name and a value. The name is used for identification across process constructs. For example, if one activity sets a variable named var, a follow-up activity can access it by using this name.</description>
    </item>
    
    <item>
      <title>Querying XML</title>
      <link>/manual/develop/reference/spin/xml/04-querying-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/spin/xml/04-querying-xml/</guid>
      <description>The XML datatype supports querying with the XPath 1.0 query language.
Querying an Element import static org.camunda.spin.Spin.XML; String xml = &amp;#34;&amp;lt;root&amp;gt;&amp;lt;child id=\&amp;#34;child\&amp;#34;&amp;gt;&amp;lt;a id=\&amp;#34;a\&amp;#34;/&amp;gt;&amp;lt;a id=\&amp;#34;b\&amp;#34;/&amp;gt;&amp;lt;/child&amp;gt;&amp;lt;/root&amp;gt;&amp;#34;; SpinXmlTreeElement child = XML(xml).xPath(&amp;#34;/root/child&amp;#34;).element(); Querying an Element List import static org.camunda.spin.Spin.XML; String xml = &amp;#34;&amp;lt;root&amp;gt;&amp;lt;child id=\&amp;#34;child\&amp;#34;&amp;gt;&amp;lt;a id=\&amp;#34;a\&amp;#34;/&amp;gt;&amp;lt;a id=\&amp;#34;b\&amp;#34;/&amp;gt;&amp;lt;/child&amp;gt;&amp;lt;/root&amp;gt;&amp;#34;; SpinList&amp;lt;SpinXmlTreeElement&amp;gt; childs = XML(xml).xPath(&amp;#34;/root/child/a&amp;#34;).elementList(); Querying an Attribute import static org.camunda.spin.Spin.XML; String xml = &amp;#34;&amp;lt;root&amp;gt;&amp;lt;child id=\&amp;#34;child\&amp;#34;&amp;gt;&amp;lt;a id=\&amp;#34;a\&amp;#34;/&amp;gt;&amp;lt;a id=\&amp;#34;b\&amp;#34;/&amp;gt;&amp;lt;/child&amp;gt;&amp;lt;/root&amp;gt;&amp;#34;; SpinXmlTreeAttribute attribute = XML(xml).xPath(&amp;#34;/root/child/@id&amp;#34;).attribute(); Querying an Attribute List import static org.camunda.spin.Spin.XML; String xml = &amp;#34;&amp;lt;root&amp;gt;&amp;lt;child id=\&amp;#34;child\&amp;#34;&amp;gt;&amp;lt;a id=\&amp;#34;a\&amp;#34;/&amp;gt;&amp;lt;a id=\&amp;#34;b\&amp;#34;/&amp;gt;&amp;lt;/child&amp;gt;&amp;lt;/root&amp;gt;&amp;#34;; SpinList&amp;lt;SpinXmlTreeAttribute&amp;gt; attributes = XML(xml).</description>
    </item>
    
    <item>
      <title>Repetition Rule</title>
      <link>/manual/develop/reference/cmmn11/markers/repetition-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/cmmn11/markers/repetition-rule/</guid>
      <description>Can be used with: Task, Stage, Milestone
 Under which conditions a plan item is repeatable can be specified by a repetition rule.
In XML, a repetition rule can be specified for an individual plan item or for a plan item definition. For a plan item it looks as follows:
&amp;lt;planItem id=&amp;#34;PlanItem_HumanTask&amp;#34; definitionRef=&amp;#34;HumanTask&amp;#34;&amp;gt; &amp;lt;itemControl&amp;gt; &amp;lt;repetitionRule&amp;gt; &amp;lt;condition&amp;gt;&amp;lt;![CDATA[${var &amp;lt; 100}]]&amp;gt;&amp;lt;/condition&amp;gt; &amp;lt;/repetitionRule&amp;gt; &amp;lt;/itemControl&amp;gt; &amp;lt;/planItem&amp;gt; &amp;lt;humanTask id=&amp;#34;HumanTask&amp;#34; /&amp;gt; For a plan item definition, the following XML can be used:</description>
    </item>
    
    <item>
      <title>Spring Beans in Processes</title>
      <link>/manual/develop/user-guide/spring-framework-integration/expressions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/spring-framework-integration/expressions/</guid>
      <description>Limit the exposed Spring Beans When using the ProcessEngineFactoryBean, by default, all expressions and scripts in the BPMN processes will also &amp;ldquo;see&amp;rdquo; all the Spring beans. It&amp;rsquo;s possible to limit the beans you want to expose or even expose no beans at all using a map that you can configure. The example below exposes a single bean (printer), available to use under the key printer. To expose NO beans at all, pass an empty map as beans property on the SpringProcessEngineConfiguration.</description>
    </item>
    
    <item>
      <title>Supported Environments</title>
      <link>/manual/develop/introduction/supported-environments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/introduction/supported-environments/</guid>
      <description>Run Camunda in every Java-runnable environment. Camunda is supported with our QA infrastructure in the following environments. Here you can find more information about our enterprise support.
Supported Environments Please note that the environments listed in this section depend on the version of Camunda. Please select the corresponding version of this documentation to see the environment that fits to your version of Camunda. e.g., supported environments for version 7.15
 Container/Application Server for Runtime Components Application-Embedded Process Engine  All Java application servers Camunda Spring Boot Starter: Embedded Tomcat  Supported versions Deployment scenarios   Camunda Engine Quarkus Extension  Supported versions Deployment scenarios    Container-Managed Process Engine and Camunda Cockpit, Tasklist, Admin  Apache Tomcat 9.</description>
    </item>
    
    <item>
      <title>System Management</title>
      <link>/manual/develop/webapps/admin/system-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/admin/system-management/</guid>
      <description>The System Settings menu gives you general information about the process engine. It enables users with system permissions to access certain system information, including diagnostics, metrics, and license key. Provided that you are using the Enterprise Edition of Camunda 7, you can also insert your License Key.
Accessing the System Settings menu The System Settings menu is only usable by users which are granted with All permission for authorizations.</description>
    </item>
    
    <item>
      <title>Timer Events</title>
      <link>/manual/develop/reference/bpmn20/events/timer-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/events/timer-events/</guid>
      <description>Timer events are events which are triggered by a defined timer. They can be used as start event, intermediate event or boundary event. Boundary events can be interrupting or not.
Configuration Timers are only fired when the Job Executor is enabled.
Defining a Timer Timers are configured using an ISO 8601 time format. A timer definition must have exactly one of the following elements.
Time Date This format specifies a fixed time and date in adhering to the ISO 8601 format, when the trigger will be fired.</description>
    </item>
    
    <item>
      <title>Transaction Subprocess</title>
      <link>/manual/develop/reference/bpmn20/subprocesses/transaction-subprocess/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/subprocesses/transaction-subprocess/</guid>
      <description>A transaction subprocess is an embedded subprocess which can be used to group multiple activities to a transaction. A transaction is a logical unit of work which allows grouping of a set of individual activities, so that they either succeed or fail collectively.
A transaction can have three possible outcomes:
  A transaction is successful if it is neither canceled nor terminated by a hazard. If a transaction subprocess is successful, it is left using the outgoing sequenceflow(s).</description>
    </item>
    
    <item>
      <title>User Assignment</title>
      <link>/manual/develop/webapps/tasklist/user-assignment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/tasklist/user-assignment/</guid>
      <description>For users to be able to work on the tasks they should work on, they must be able to find these tasks. Enabling users to find &amp;ldquo;their&amp;rdquo; tasks requires the correct interaction between the initial assignment of the task and the filters configured in Tasklist.
This works as follows:
 Initial Assignment: when a task is created, it is initially assigned to a user or group according to the configuration in the BPMN process (or the CMMN case).</description>
    </item>
    
    <item>
      <title>Web applications</title>
      <link>/manual/develop/user-guide/spring-boot-integration/webapps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/spring-boot-integration/webapps/</guid>
      <description>To enable the Web Applications you can use the following starter in your pom.xml:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.camunda.bpm.springboot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camunda-bpm-spring-boot-starter-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{project-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; By default the application path is /camunda, so without any further configuration you can access the Webapps under http://localhost:8080/camunda/app/.
Enterprise webapps Enterprise Feature Please note that this feature is only included in the enterprise edition of Camunda 7, it is not available in the community edition.
 Check the Camunda enterprise homepage for more information or get your free trial version.</description>
    </item>
    
    <item>
      <title>Working with Json Data</title>
      <link>/manual/develop/reference/forms/embedded-forms/json-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/forms/embedded-forms/json-data/</guid>
      <description>Fetching an existing JSON Variable The Form SDK will only fetch those variables which are actually used in a form. Since a JSON object is usually not bound to a single input field, we cannot use the cam-variable-name directive. We thus need to fetch the variable programatically:
&amp;lt;script cam-script type=&amp;#34;text/form-script&amp;#34;&amp;gt; camForm.on(&amp;#39;form-loaded&amp;#39;, function() { // tell the form SDK to fetch the variable named &amp;#39;customer&amp;#39;  camForm.variableManager.fetchVariable(&amp;#39;customer&amp;#39;); }); camForm.on(&amp;#39;variables-fetched&amp;#39;, function() { // work with the variable (bind it to the current AngularJS $scope)  $scope.</description>
    </item>
    
    <item>
      <title>Auditing of Cockpit Operations</title>
      <link>/manual/develop/webapps/cockpit/auditing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/auditing/</guid>
      <description>Enterprise Feature Please note that this feature is only included in the enterprise edition of Camunda 7, it is not available in the community edition.
 Check the Camunda enterprise homepage for more information or get your free trial version.  Since Cockpit is a very powerful tool, it is often desired to inspect which user performed which operation for auditing purposes. Cockpit operations that change state are logged in Camunda 7&amp;rsquo;s user operation log that is part of the process engine history.</description>
    </item>
    
    <item>
      <title>Telemetry</title>
      <link>/manual/develop/introduction/telemetry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/introduction/telemetry/</guid>
      <description>The feature has been removed in Camunda 7.22.0+.
Documentation about diagnostics data can be found in the User Guide.</description>
    </item>
    
    <item>
      <title>Admin Plugins</title>
      <link>/manual/develop/webapps/admin/plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/admin/plugins/</guid>
      <description>Plugin Compatibility Please note that the code of Admin plugins might need to be migrated when updating Camunda 7 to a higher version (e.g. CSS styles).
 Admin uses the concept of plugins to add own functionality without having to extend or hack the Admin web application.
For further details about the concepts behind plugins, please read the Cockpit plugins section.
Difference between Cockpit and Admin plugins:  To publish the plugin with Admin, its class name must be put into a file called org.</description>
    </item>
    
    <item>
      <title>Auditing</title>
      <link>/manual/develop/webapps/admin/auditing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/admin/auditing/</guid>
      <description>Enterprise Feature Please note that this feature is only included in the enterprise edition of Camunda 7, it is not available in the community edition.
 Check the Camunda enterprise homepage for more information or get your free trial version.  It is often desired to inspect which user performed which operation for auditing purposes. Admin operations are logged in the user operation log that is part of the process engine&amp;rsquo;s history.</description>
    </item>
    
    <item>
      <title>Batch View</title>
      <link>/manual/develop/webapps/cockpit/batch/monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/batch/monitoring/</guid>
      <description>The batch page displays the status of running and completed batches. It allows displaying details of a batch such as the start- and end-time or the number of remaining jobs. For failed jobs, it displays the error message and allows a retry or deletion of the job.
Overview On the left side of the page, two lists of running and finished batches are displayed. You can click on any entry to display details of the batch on the right side of the page.</description>
    </item>
    
    <item>
      <title>Built-In Beans</title>
      <link>/manual/develop/user-guide/cdi-java-ee-integration/built-in-beans/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/cdi-java-ee-integration/built-in-beans/</guid>
      <description>The ProcessEngine as well as the services are available for injection via @Inject ProcessEngine, @Inject RepositoryService, and so on. A specific named ProcessEngine and its services can be injected by adding the qualifier @ProcessEngineName(&#39;someEngine&#39;). The current process instance and task can be injected via @Inject ProcessInstance or @Inject Task. The current business key can be injected via @Inject @BusinessKey String businessKey. The current process instance id be injected via @Inject @ProcessInstanceId String pid.</description>
    </item>
    
    <item>
      <title>Camunda 7 Run</title>
      <link>/manual/develop/user-guide/camunda-bpm-run/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/camunda-bpm-run/</guid>
      <description>This guide gives an introduction to Camunda Run, a pre-packaged, lightweight distribution of Camunda 7. Camunda Run is easy to configure and does not require Java knowledge.
Prerequisites and audience To use this guide, you should at least know what Camunda 7 is and what it does. Check out the Get Started guides if you have never used Camunda 7 before. The Installation guide is also worth looking at if you are completely new to Camunda 7.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>/manual/develop/webapps/admin/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/admin/configuration/</guid>
      <description>You can override the default configuration of admin using a central configuration file located in app/admin/scripts/config.js. The following configuration options are available:
LDAP If you connect Camunda 7 with the LDAP identity service, you have read-only access to the users and groups. Create new users and groups via the LDAP system, but not in the admin application. Find more information about how to configure the process engine in order to use the LDAP identity service here.</description>
    </item>
    
    <item>
      <title>Configuring JSON Handling</title>
      <link>/manual/develop/reference/spin/json/05-configuring-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/spin/json/05-configuring-json/</guid>
      <description>Spin can be configured to change JSON parsing, writing and mapping settings, for example to tolerate documents that are not strictly compliant to the standard. Spin uses Jackson to handle JSON. The JSON data format therefore uses an instance of com.fasterxml.jackson.databind.ObjectMapper that can be configured using Spin&amp;rsquo;s configuration mechanism.
The data format class to register a configurator for is org.camunda.spin.impl.json.jackson.format.JacksonJsonDataFormat. An instance of this class provides a setter for an ObjectMapper that can be used to replace the default object mapper.</description>
    </item>
    
    <item>
      <title>Error Events</title>
      <link>/manual/develop/reference/bpmn20/events/error-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/events/error-events/</guid>
      <description>Error events are events which are triggered by a defined error.
Business Errors vs. Technical Errors A BPMN error is meant for business errors - which are different than technical exceptions. So, this is different than Java exceptions - which are, by default, handled in their own way.
You might also want to check out the basics of Threading and Transactions in the User Guide first.
Defining an Error An error event definition references an error element.</description>
    </item>
    
    <item>
      <title>Event-based Gateway</title>
      <link>/manual/develop/reference/bpmn20/gateways/event-based-gateway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/gateways/event-based-gateway/</guid>
      <description>The event-based Gateway allows you to make a decision based on events. Each outgoing sequence flow of the gateway needs to be connected to an intermediate catching event. When process execution reaches an event-based Gateway, the gateway acts like a wait state: execution is suspended. In addition, an event subscription is created for each outgoing sequence flow.
Note that the sequence flows running out of an event-based Gateway are different than ordinary sequence flows.</description>
    </item>
    
    <item>
      <title>Extensions</title>
      <link>/manual/develop/introduction/extensions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/introduction/extensions/</guid>
      <description>Camunda is developed by Camunda as an open source project in collaboration with the community. This is the basis for the Camunda product provided by Camunda as a commercial offering.
The commercial Camunda 7 product contains additional (non-open source) features and is provided to Camunda customers with service offerings such as enterprise support and bug fix releases.
Community Extensions Camunda supports the community in its effort to build additional community extensions under the Camunda umbrella.</description>
    </item>
    
    <item>
      <title>FEEL Engine Legacy Behavior</title>
      <link>/manual/develop/user-guide/dmn-engine/feel/legacy-behavior/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/dmn-engine/feel/legacy-behavior/</guid>
      <description>If you come from a Camunda 7 version &amp;lt;= 7.12.x and already use FEEL, it might be that you need to migrate your DMN models. To do this, please check out the Migration Guide, where we&amp;rsquo;ve documented all breaking changes.
If you don&amp;rsquo;t want to migrate your DMN models right now, you can also restore the legacy FEEL behavior by flipping a config flag:
 To see how this legacy behavior can be enabled again in Camunda 7, please see the dmnFeelEnableLegacyBehavior engine configuration property.</description>
    </item>
    
    <item>
      <title>Generating a Business Key</title>
      <link>/manual/develop/reference/forms/embedded-forms/javascript/generating-businesskey/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/forms/embedded-forms/javascript/generating-businesskey/</guid>
      <description>The following example shows how you can generate a business key using Javascript:
&amp;lt;form role=&amp;#34;form&amp;#34;&amp;gt; &amp;lt;script cam-script type=&amp;#34;text/form-script&amp;#34;&amp;gt; camForm.on(&amp;#39;submit&amp;#39;, function() { camForm.businessKey = &amp;#39;some-generated-value&amp;#39;; }); &amp;lt;/script&amp;gt; &amp;lt;/form&amp;gt; As you can see, you can set the businessKey variable on the camForm object. The value you set will be submitted in the start process instance request.
Note that the business key can only be set when a process instance is started, not when completing a task.</description>
    </item>
    
    <item>
      <title>History for DMN Decisions</title>
      <link>/manual/develop/user-guide/process-engine/decisions/history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/decisions/history/</guid>
      <description>After a decision definition has been evaluated either from a BPMN process, CMMN case or through the Decision Service, the inputs and outputs are saved in the History of the platform. The history entity is of type HistoricDecisionInstance and has the event type evaluate.
For details about the history mechanism as such, refer to the History and Audit Event Log.
History Level History level FULL is required. Otherwise, no history for decisions is created.</description>
    </item>
    
    <item>
      <title>Instance Restart</title>
      <link>/manual/develop/webapps/cockpit/bpmn/process-instance-restart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/bpmn/process-instance-restart/</guid>
      <description>Enterprise Feature Please note that this feature is only included in the enterprise edition of Camunda 7, it is not available in the community edition.
 Check the Camunda enterprise homepage for more information or get your free trial version.  In the history view, you can restart process instances individually or by a batch operation. A restart can consist of one or multiple of the following operations:
 Restart before an activity Restart after an activity, on its single outgoing sequence flow  Perform Restart   A restart of a terminated process instance includes instructions which are displayed in the bottom of the screen, after you have selected the restart tab in the history view (1).</description>
    </item>
    
    <item>
      <title>Mapping XML</title>
      <link>/manual/develop/reference/spin/xml/05-mapping-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/spin/xml/05-mapping-xml/</guid>
      <description>Spin can deserialize XML to Java objects and serialize the annotated Java objects to XML by integrating mapping features into its fluent API. JAXB annotations can be added to the involved Java classes to configure the (de-)serialization process but are not required.
Mapping between Representations: Assume we have a class Customer defined as follows:
@XmlRootElement(name=&amp;#34;customer&amp;#34;, namespace=&amp;#34;http://camunda.org/test&amp;#34;) public class Customer { private String name; @XmlElement(namespace=&amp;#34;http://camunda.org/test&amp;#34;) public String getName() { return name; } public void setName(String name) { this.</description>
    </item>
    
    <item>
      <title>Milestones</title>
      <link>/manual/develop/reference/cmmn11/milestone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/cmmn11/milestone/</guid>
      <description>A milestone is used to represent achievable targets within the case. It is not associated with any work but rather marks that certain conditions have been reached within the case. As a milestone is a regular plan item definition, a milestone&amp;rsquo;s completion may be used as entry criteria for other tasks and stages. This way, a milestone can be used to bring logical stages within a case into order.
 In XML, a milestone is defined as follows:</description>
    </item>
    
    <item>
      <title>MySQL Database Configuration</title>
      <link>/manual/develop/user-guide/process-engine/database/mysql-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/database/mysql-configuration/</guid>
      <description>This section documents the supported MySQL configuration.
Database Schema The engine&amp;rsquo;s MySQL database schema does not support milliseconds precision for the column types TIMESTAMP and DATETIME: I.e., a to be stored value is rounded to the next or previous second, e.g., 2021-01-01 15:00:46.731 is rounded to 2021-01-01 15:00:47.
Heads Up! The missing millisecond’s precision for date/time values impacts the process engine&amp;rsquo;s behavior. Please read how to configure the MySQL JDBC Driver to ensure that date/time values are handled correctly.</description>
    </item>
    
    <item>
      <title>Process applications</title>
      <link>/manual/develop/user-guide/spring-boot-integration/process-applications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/spring-boot-integration/process-applications/</guid>
      <description>By default, the camunda-spring-boot-starter is configured to use the SpringProcessEngineConfiguration auto deployment feature. Since 1.2.0 you also have the possibility to do so via SpringBootProcessApplication. This disables the SpringProcessEngineConfiguration auto-deploy feature and instead uses the required META-INF/processes.xml as an indicator for resource scanning. This also allows all processes.xml configuration features described [here] (/manual/develop/user-guide/process-applications/the-processes-xml-deployment-descriptor/).
To use it, just add the @EnableProcessApplication annotation to your Spring Boot application class:
@SpringBootApplication @EnableProcessApplication(&amp;#34;myProcessApplicationName&amp;#34;) public class MyApplication { .</description>
    </item>
    
    <item>
      <title>Process Engine Configuration</title>
      <link>/manual/develop/reference/deployment-descriptors/tags/process-engine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/deployment-descriptors/tags/process-engine/</guid>
      <description>The process engine configuration can be placed in both processes.xml and the bpm-platform.xml files. If the process engine is configured in either or both of those files, it will be bootstrapped by the Camunda 7 infrastructure and be made available through BpmPlatform.getProcessEngineService().getProcessEngine(&amp;quot;name of process engine&amp;quot;).
Example The following example shows an XML snippet which can be placed in both processes.xml and/or bpm-platform.xml.
&amp;lt;process-engine name=&amp;#34;default&amp;#34;&amp;gt; &amp;lt;job-acquisition&amp;gt;default&amp;lt;/job-acquisition&amp;gt; &amp;lt;configuration&amp;gt;org.camunda.bpm.engine.impl.cfg.StandaloneProcessEngineConfiguration&amp;lt;/configuration&amp;gt; &amp;lt;datasource&amp;gt;java:jdbc/ProcessEngine&amp;lt;/datasource&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;property name=&amp;#34;history&amp;#34;&amp;gt;full&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;#34;databaseSchemaUpdate&amp;#34;&amp;gt;true&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;#34;authorizationEnabled&amp;#34;&amp;gt;true&amp;lt;/property&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;/process-engine&amp;gt; Syntax Reference Configuration Properties The following is a list with the most commonly used process engine configuration properties, along with some explanations.</description>
    </item>
    
    <item>
      <title>Process Instance Modification</title>
      <link>/manual/develop/user-guide/process-engine/process-instance-modification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/process-instance-modification/</guid>
      <description>While the process model contains sequence flows that define in which order activities must be executed, sometimes it is desired to flexibly start an activity again or cancel a running activity. For example, this can be useful when the process model contains an error, such as a wrong sequence flow condition, and running process instances need to be corrected. Use cases for this API may be
 Repairing process instances in which some steps have to be repeated or skipped Migrating process instances from one version of a process definition to another Testing: Activities can be skipped or repeated for isolated testing of individual process segments  To perform such an operation, the process engine offers the process instance modification API that is entered via RuntimeService.</description>
    </item>
    
    <item>
      <title>Process Instance Modification</title>
      <link>/manual/develop/webapps/cockpit/bpmn/process-instance-modification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/bpmn/process-instance-modification/</guid>
      <description>Enterprise Feature Please note that this feature is only included in the enterprise edition of Camunda 7, it is not available in the community edition.
 Check the Camunda enterprise homepage for more information or get your free trial version.    In the detail view, you can modify the process instance&amp;rsquo;s execution state. A modification can be one or multiple of the following operations:
 Starting execution before an activity Starting execution after an activity on its single outgoing sequence flow Canceling an activity instance or all instances of an activity  Perform a Modification A modification consists of multiple instructions, which are displayed in the modification tab at the bottom half of the screen (1).</description>
    </item>
    
    <item>
      <title>Process Instance Restart</title>
      <link>/manual/develop/user-guide/process-engine/process-instance-restart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/process-instance-restart/</guid>
      <description>After a process instance termination, its historic data still exists and can be accessed to restore a process instance, provided that the history level is set to FULL. This can, for example, be useful when termination did not proceed in a desired way. Use cases for this API may be:
 Restoring the last state of process instances that have been erroneously canceled Restarting process instances after a termination caused by a wrong decision  To perform such an operation the process engine offers the process instance restart API, that is entered via RuntimeService.</description>
    </item>
    
    <item>
      <title>Repository Service</title>
      <link>/manual/develop/user-guide/model-api/bpmn-model-api/respository-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/model-api/bpmn-model-api/respository-service/</guid>
      <description>It is also possible to access the BPMN model instance by the process definition id using the Repository Service, as the following incomplete test sample code shows. Please see the generate-jsf-form quickstart for a complete example.
public void testRepositoryService() { runtimeService.startProcessInstanceByKey(PROCESS_KEY); String processDefinitionId = repositoryService.createProcessDefinitionQuery() .processDefinitionKey(PROCESS_KEY).singleResult().getId(); BpmnModelInstance modelInstance = repositoryService.getBpmnModelInstance(processDefinitionId); } </description>
    </item>
    
    <item>
      <title>Repository Service</title>
      <link>/manual/develop/user-guide/model-api/cmmn-model-api/repository-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/model-api/cmmn-model-api/repository-service/</guid>
      <description>It is also possible to access the CMMN model instance by the case definition id using the Repository Service, as the following incomplete test sample code shows.
public void testRepositoryService() { String caseDefinitionId = repositoryService.createCaseDefinitionQuery() .caseDefinitionKey(CASE_KEY).singleResult().getId(); CmmnModelInstance modelInstance = repositoryService .getCmmnModelInstance(caseDefinitionId); } </description>
    </item>
    
    <item>
      <title>Repository Service</title>
      <link>/manual/develop/user-guide/model-api/dmn-model-api/repository-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/model-api/dmn-model-api/repository-service/</guid>
      <description>It is also possible to access the DMN model instance by the decision definition id using the Repository Service, as the following incomplete test sample code shows:
public void testRepositoryService() { String decisionDefinitionId = repositoryService.createDecisionDefinitionQuery() .decisionDefinitionKey(DECISION_KEY).singleResult().getId(); DmnModelInstance modelInstance = repositoryService .getDmnModelInstance(decisionDefinitionId); } </description>
    </item>
    
    <item>
      <title>Script Task</title>
      <link>/manual/develop/reference/bpmn20/tasks/script-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/tasks/script-task/</guid>
      <description>A Script Task is an automated activity. When a process execution arrives at the Script Task, the corresponding script is executed.
 A Script Task is defined by specifying the script and the scriptFormat.
&amp;lt;scriptTask id=&amp;#34;theScriptTask&amp;#34; name=&amp;#34;Execute script&amp;#34; scriptFormat=&amp;#34;groovy&amp;#34;&amp;gt; &amp;lt;script&amp;gt; sum = 0 for ( i in inputArray ) { sum += i } &amp;lt;/script&amp;gt; &amp;lt;/scriptTask&amp;gt; The value of the scriptFormat attribute must be a name that is compatible with JSR-223 (Scripting for the Java Platform).</description>
    </item>
    
    <item>
      <title>Selects</title>
      <link>/manual/develop/reference/forms/embedded-forms/controls/select/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/forms/embedded-forms/controls/select/</guid>
      <description>Select boxes are HTML controls of the form of
&amp;lt;select&amp;gt;&amp;lt;/select&amp;gt; Binding to a Process Variable A select box can be bound to a process variable using the cam-variable-name directive:
&amp;lt;select cam-variable-name=&amp;#34;foo&amp;#34; cam-variable-type=&amp;#34;String&amp;#34;&amp;gt; &amp;lt;option&amp;gt;bar&amp;lt;/option&amp;gt; &amp;lt;option&amp;gt;zar&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; Supported Variable Types The select box supports the same value types as &amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;.
Populating the Options from a Variable The &amp;lt;option&amp;gt; entries can be populated using a variable. The name of the variable can be provided using the cam-choices directive:</description>
    </item>
    
    <item>
      <title>Spring-Based Testing</title>
      <link>/manual/develop/user-guide/spring-framework-integration/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/spring-framework-integration/testing/</guid>
      <description>When integrating with Spring, business processes can be tested very easily (in scope 2, see Testing Scopes) using the standard Camunda testing facilities. The following example shows how a business process is tested in a typical Spring-based unit test:
@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(&amp;#34;classpath:org/camunda/bpm/engine/spring/test/junit4/springTypicalUsageTest-context.xml&amp;#34;) public class MyBusinessProcessTest { @Autowired private RuntimeService runtimeService; @Autowired private TaskService taskService; @Autowired @Rule public ProcessEngineRule processEngineRule; @Test @Deployment public void simpleProcessTest() { runtimeService.startProcessInstanceByKey(&amp;#34;simpleProcess&amp;#34;); Task task = taskService.createTaskQuery().singleResult(); assertEquals(&amp;#34;My Task&amp;#34;, task.</description>
    </item>
    
    <item>
      <title>Task Lifecycle</title>
      <link>/manual/develop/webapps/tasklist/task-lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/tasklist/task-lifecycle/</guid>
      <description>The diagram below shows the task lifecycle and supported transitions supported by Camunda. To get to know how to programmatically work with the lifecycle in your application, refer to the Java-API Reference .
  </description>
    </item>
    
    <item>
      <title>Testing Decisions with the DMN Engine</title>
      <link>/manual/develop/user-guide/dmn-engine/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/dmn-engine/testing/</guid>
      <description>To easily test DMN decisions in a JUnit test, the DMN engine provides a JUnit Rule. The DmnEngineRule creates a new default DMN engine. The DMN engine can be used in test cases to parse and evaluate decisions.
public class DecisionTest { @Rule public DmnEngineRule dmnEngineRule = new DmnEngineRule(); @Test public void test() { DmnEngine dmnEngine = dmnEngineRule.getDmnEngine(); // load DMN file  InputStream inputStream = ...; //create and add variables  VariableMap variables = Variables.</description>
    </item>
    
    <item>
      <title>The Camunda WildFly Subsystem</title>
      <link>/manual/develop/user-guide/runtime-container-integration/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/runtime-container-integration/jboss/</guid>
      <description>Installation Guide If you download a full distribution, the Camunda Wildfly subsystem is readily installed into the application server.
Read the installation guide to learn how to install the Camunda Wildfly subsystem into your Wildfly Server.
 Camunda 7 provides advanced integration for Wildfly in the form of a custom Wildfly Subsystem.
The most prominent features are:
 Deploy the process engine as shared Wildfly module. Configure the process engine in standalone.</description>
    </item>
    
    <item>
      <title>Variables in the REST API</title>
      <link>/manual/develop/reference/rest/overview/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/rest/overview/variables/</guid>
      <description>In the REST API, process variables are represented by JSON objects of the following form:
{ &amp;#34;type&amp;#34;: &amp;#34;String&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;Some value&amp;#34;, &amp;#34;valueInfo&amp;#34;: {} } The REST API supports the Value Types supported by the process engine.
Capitalization of Type Names In the REST API, the type names start with a capital letter, i.e., String instead of string.
Serialized and Deserialized Object Values Object Values are instances of (non primitive) Java types.</description>
    </item>
    
    <item>
      <title>Working with Java Objects</title>
      <link>/manual/develop/reference/forms/embedded-forms/java-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/forms/embedded-forms/java-objects/</guid>
      <description>This section explains how to work with serialized Java Objects in embedded task forms.
 Out of the box, you can only work with Java Objects which are serialized in JSON format If Java Classes are serialized using JAX-B, you need to add custom XML parsing and writing logic to the embedded form. Java Objects serialized using Java Serialization cannot be used in forms.
 Fetching an existing Serialized Java Object Variable The Form SDK will only fetch those variables which are actually used in a form.</description>
    </item>
    
    <item>
      <title>Escalation Events</title>
      <link>/manual/develop/reference/bpmn20/events/escalation-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/events/escalation-events/</guid>
      <description>Escalation events are events which reference a named escalation. They are mostly used to communicate from a subprocess to an upper process. Unlike an error, an escalation event is non critical and execution continues at the location of throwing.
Defining Escalation An escalation event definition is declared by using the escalationEventDefinition element. The attribute escalationRef references an escalation element declared as a child element of the definitions root element. The following is an excerpt of a process in which an escalation event is declared and referenced by an escalation intermediate throw event.</description>
    </item>
    
    <item>
      <title>Process Instance Migration</title>
      <link>/manual/develop/webapps/cockpit/bpmn/process-instance-migration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/bpmn/process-instance-migration/</guid>
      <description>Enterprise Feature Please note that this feature is only included in the enterprise edition of Camunda 7, it is not available in the community edition.
 Check the Camunda enterprise homepage for more information or get your free trial version.    You can migrate running process instances from their current process definition version to another version of that definition or another process definition altogether. You can access the migration page by navigating to the process definition or instance view of a process with multiple versions.</description>
    </item>
    
    <item>
      <title>CDI Event Bridge</title>
      <link>/manual/develop/user-guide/cdi-java-ee-integration/the-cdi-event-bridge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/cdi-java-ee-integration/the-cdi-event-bridge/</guid>
      <description>The process engine can be hooked-up to the CDI event bus. We call this the &amp;ldquo;CDI Event Bridge&amp;rdquo;. This allows us to be notified of process events using standard CDI event mechanisms. In order to enable CDI event support for an embedded process engine, enable the corresponding parse listener in the configuration:
&amp;lt;property name=&amp;#34;postParseListeners&amp;#34;&amp;gt; &amp;lt;list&amp;gt; &amp;lt;bean class=&amp;#34;org.camunda.bpm.engine.cdi.impl.event.CdiEventSupportBpmnParseListener&amp;#34; /&amp;gt; &amp;lt;/list&amp;gt; &amp;lt;/property&amp;gt; Now the engine is configured for publishing events using the CDI event bus.</description>
    </item>
    
    <item>
      <title>Configuring XML Handling</title>
      <link>/manual/develop/reference/spin/xml/06-configuring-xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/spin/xml/06-configuring-xml/</guid>
      <description>Spin can be configured to change XML parsing, writing, and mapping settings. Spin uses JAXB and DOM to handle XML. Therefore, the XML data format uses instances of javax.xml.parsers.DocumentBuilderFactory, javax.xml.transform.TransformerFactory, and javax.xml.bind.JAXBContext that can be configured using Spin&amp;rsquo;s configuration mechanism.
For example, a custom application may provide an implementation of org.camunda.spin.spi.DataFormatConfigurator that exchanges the JAXBContext. Spin uses and caches the context to improve performance.
The data format class to register a configurator for is org.</description>
    </item>
    
    <item>
      <title>Date Format</title>
      <link>/manual/develop/reference/rest/overview/date-format/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/rest/overview/date-format/</guid>
      <description>The REST API uses the default date format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, which represents a date with milliseconds and timezone information, e.g., 2016-01-25T13:33:42.165+0100.
If you add a date as a GET request parameter, remember the URL encoding, e.g. 2016-01-25T13:33:42.165%2b0100.
Custom Date Format A custom date format can be configured in the web.xml file of the REST API. To do so, the ServletContextListener CustomJacksonDateFormatListener has to be added. The custom date format can be specified by the context parameter org.</description>
    </item>
    
    <item>
      <title>Delegation Code</title>
      <link>/manual/develop/user-guide/process-engine/delegation-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/delegation-code/</guid>
      <description>Delegation Code allows you to execute external Java code, scripts or evaluate expressions when certain events occur during process execution.
There are different types of Delegation Code:
 Java Delegates can be attached to a BPMN Service Task. Delegate Variable Mapping can be attached to a Call Activity. Execution Listeners can be attached to any event within the normal token flow, e.g., starting a process instance or entering an activity. Task Listeners can be attached to events within the user task lifecycle, e.</description>
    </item>
    
    <item>
      <title>Examples</title>
      <link>/manual/develop/reference/forms/embedded-forms/javascript/examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/forms/embedded-forms/javascript/examples/</guid>
      <description>The following examples show example scenarios of custom JavaScript in embedded forms.
User name from a cam-script This example demonstrates how to retrieve the user name and display it in an embedded form:
&amp;lt;form role=&amp;#34;form&amp;#34;&amp;gt; &amp;lt;script cam-script type=&amp;#34;text/form-script&amp;#34;&amp;gt; inject([&amp;#39;$rootScope&amp;#39;, function($rootScope) { $scope.userName = $rootScope.authentication.name; }]); &amp;lt;/script&amp;gt; &amp;lt;h1&amp;gt;Greetings {{ userName }}&amp;lt;/h1&amp;gt; &amp;lt;/form&amp;gt; Load Additional Resources This example includes an image, which is located in the contextPath of the form (i.e., in the same directory).</description>
    </item>
    
    <item>
      <title>Extension Attributes</title>
      <link>/manual/develop/user-guide/model-api/dmn-model-api/extension-attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/model-api/dmn-model-api/extension-attributes/</guid>
      <description>Custom extensions are a standardized way to extend the DMN model. The Camunda extension attributes are fully implemented in the DMN model API.
Every DMN Decision element can have the attributes historyTimeToLive and versionTag. To access the extension attributes, you have to call the Decision#getCamundaHistoryTimeToLiveString() and Decision#getVersionTag() methods.
String historyTimeToLive = decision.getCamundaHistoryTimeToLiveString(); String versionTag = decision.getVersionTag(); To set attributes, use Decision#setCamundaHistoryTimeToLiveString() and Decision#setVersionTag()
decision.setCamundaHistoryTimeToLiveString(&amp;#34;1000&amp;#34;); decision.setVersionTag(&amp;#34;1.0.0&amp;#34;); Every Input element can have an inputVariable attribute.</description>
    </item>
    
    <item>
      <title>Extension Elements</title>
      <link>/manual/develop/user-guide/model-api/bpmn-model-api/extension-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/model-api/bpmn-model-api/extension-elements/</guid>
      <description>Custom extension elements are a standardized way to extend the BPMN model. The Camunda extension elements are fully implemented in the BPMN model API, but unknown extension elements can also easily be accessed and added.
Every BPMN BaseElement can have a child element of the type extensionElements. This element can contain all sorts of extension elements. To access the extension elements you have to call the getExtensionElements() method and, if no such child element exists, you must create one first.</description>
    </item>
    
    <item>
      <title>Extension Elements</title>
      <link>/manual/develop/user-guide/model-api/cmmn-model-api/extension-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/model-api/cmmn-model-api/extension-elements/</guid>
      <description>Custom extension elements are a standardized way to extend the CMMN model. The Camunda extension elements are fully implemented in the CMMN model API but unknown extension elements can also easily be accessed and added.
Every CMMN CmmnElement can have a child element of the type extensionElements. This element can contain all sorts of extension elements. To access the extension elements you have to call the getExtensionElements() method and, if no such child element exists, you must create one first.</description>
    </item>
    
    <item>
      <title>Failed Jobs</title>
      <link>/manual/develop/webapps/cockpit/bpmn/failed-jobs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/bpmn/failed-jobs/</guid>
      <description>Unresolved incidents of a process instance or a sub process instance are indicated by Cockpit as failed jobs. To localize which instance of a process failed, Cockpit allows you to drill down to the unresolved incident by using the process status dots. Hit a red status dot of the affected instance in the Process Definition View to get an overview of all incidents. The Incidents tab in the Detailed Information Panel lists the failed activities with additional information.</description>
    </item>
    
    <item>
      <title>Hidden Input Fields</title>
      <link>/manual/develop/reference/forms/embedded-forms/controls/hidden/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/forms/embedded-forms/controls/hidden/</guid>
      <description>Hidden input elements are HTML controls in the form of
&amp;lt;input type=&amp;#34;hidden&amp;#34;&amp;gt;&amp;lt;/input&amp;gt; They are not displayed in the form, but can be used to retrieve values to be used in the context of the form (e.g., using Angular bindings).
Binding a Hidden Element to a Process Variable A hidden input can be bound to a process variable using the cam-variable-type and cam-variable-name directives:
&amp;lt;input type=&amp;#34;hidden&amp;#34; cam-variable-name=&amp;#34;CUSTOMER_ID&amp;#34; cam-variable-type=&amp;#34;String&amp;#34; value=&amp;#34;testuser&amp;#34; /&amp;gt; In the example above, the hidden input field is bound to the variable named CUSTOMER_ID of type String and contains the value testuser.</description>
    </item>
    
    <item>
      <title>Job Execution with Managed Resources</title>
      <link>/manual/develop/user-guide/runtime-container-integration/job-execution-with-managed-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/runtime-container-integration/job-execution-with-managed-resources/</guid>
      <description>For supported environments, Camunda 7 provides server modules that integrate the Job Execution with the application server&amp;rsquo;s managed threadpools. If you are using one of those environments, it is recommended to use the integration provided with it.
The descriptions on this page apply to the use case where there is no existing resource-aware implementation provided. In those cases, using managed resources provided by the application server is recommended over using unmanaged resources.</description>
    </item>
    
    <item>
      <title>Performance</title>
      <link>/manual/develop/user-guide/process-engine/database/performance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/database/performance/</guid>
      <description>This page explains specific performance-related topics of database queries. It does not attempt to provide tools and guidance for general performance analysis and optimization of Camunda 7 installations.
As the impact of the settings discussed here largely depends on the setup and workload of Camunda 7, the recommendations may or may not help in your case. Performance improvements are not guaranteed.
Task Query The task query is one of the heaviest used and most powerful queries of the process engine API.</description>
    </item>
    
    <item>
      <title>Plugins</title>
      <link>/manual/develop/webapps/tasklist/tasklist-plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/tasklist/tasklist-plugins/</guid>
      <description>Plugin Compatibility Please note that the code of Tasklist plugins might need to be migrated when updating Camunda 7 to a higher version (e.g. CSS styles).
 Tasklist uses the concept of plugins to add own functionality without having to extend or hack the Tasklist web application.
For further details about the concepts behind plugins, please read the Cockpit plugins section.
Difference between Cockpit and Tasklist plugins:  To publish the plugin with Tasklist, its class name must be put into a file called org.</description>
    </item>
    
    <item>
      <title>Plugins</title>
      <link>/manual/develop/webapps/welcome/welcome-plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/welcome/welcome-plugins/</guid>
      <description>In addition to the configurable custom links, plugins can be used to add functionality to the Welcome application. For further details about the concepts behind plugins, please read the Cockpit plugins section. Please note that the Welcome application just offers frontend only plugins.
Plugin point Name: welcome.dashboard.
  Name: welcome.profile.
  </description>
    </item>
    
    <item>
      <title>Receive Task</title>
      <link>/manual/develop/reference/bpmn20/tasks/receive-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/tasks/receive-task/</guid>
      <description>A Receive Task is a simple task that waits for the arrival of a certain message. When the process execution arrives at a Receive Task, the process state is committed to the persistence storage. This means that the process will stay in this wait state until a specific message is received by the engine, which triggers continuation of the process beyond the Receive Task.
 A Receive Task with a message reference can be triggered like an ordinary event:</description>
    </item>
    
    <item>
      <title>Reports</title>
      <link>/manual/develop/webapps/cockpit/reporting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/reporting/</guid>
      <description>You can use the reports section of cockpit to display custom statistics and reports. Please note that this section is not visible if no report is available. Refer to the Cockpit Plugins section for adding a custom reporting plugin.
Process Instance Duration Report Enterprise Feature Please note that this feature is only included in the enterprise edition of Camunda 7, it is not available in the community edition.
 Check the Camunda enterprise homepage for more information or get your free trial version.</description>
    </item>
    
    <item>
      <title>Sentries</title>
      <link>/manual/develop/reference/cmmn11/sentry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/cmmn11/sentry/</guid>
      <description>A sentry captures the occurrence of a certain event occurring or a condition being fulfilled within a case. Sentries are used as entry and exit criteria. Note that the black and white diamonds represent the criteria. A sentry itself has no graphical representation.
  In XML, a sentry can be specified as follows:
&amp;lt;planItem id=&amp;#34;PlanItem_HumanTask_1&amp;#34; definitionRef=&amp;#34;HumanTask_1&amp;#34;/&amp;gt; &amp;lt;planItem id=&amp;#34;PlanItem_HumanTask_2&amp;#34; definitionRef=&amp;#34;HumanTask_1&amp;#34;&amp;gt; &amp;lt;entryCriterion sentryRef=&amp;#34;Sentry_1&amp;#34; /&amp;gt; &amp;lt;/planItem&amp;gt; &amp;lt;sentry id=&amp;#34;Sentry_1&amp;#34;&amp;gt; &amp;lt;planItemOnPart sourceRef=&amp;#34;PlanItem_HumanTask_1&amp;#34;&amp;gt; &amp;lt;standardEvent&amp;gt;complete&amp;lt;/standardEvent&amp;gt; &amp;lt;/planItemOnPart&amp;gt; &amp;lt;ifPart&amp;gt; &amp;lt;condition&amp;gt;${myVar &amp;gt; 100}&amp;lt;/condition&amp;gt; &amp;lt;/ifPart&amp;gt; &amp;lt;/sentry&amp;gt; &amp;lt;humanTask id=&amp;#34;HumanTask_1&amp;#34;/&amp;gt; The above example defines a sentry that is fulfilled when the plan item PlanItem_HumanTask_1 performs the state transition complete (note the planItemOnPart element) and a variable named myVar has a value greater than 100 (note the ifPart element).</description>
    </item>
    
    <item>
      <title>Signal Events</title>
      <link>/manual/develop/reference/bpmn20/events/signal-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/events/signal-events/</guid>
      <description>Signal events are events which reference a named signal. A signal is an event of global scope (broadcast semantics) and is delivered to all active handlers.
The following is an example of two separate processes communicating using signals. The first process is started if an insurance policy is updated or changed. After the changes have been reviewed by a human participant, a signal event is thrown, signaling that a policy has changed:</description>
    </item>
    
    <item>
      <title>Spring Eventing Bridge</title>
      <link>/manual/develop/user-guide/spring-boot-integration/the-spring-event-bridge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/spring-boot-integration/the-spring-event-bridge/</guid>
      <description>The process engine can be hooked-up to the Spring event bus. We call this the &amp;ldquo;Spring Eventing Bridge&amp;rdquo;. This allows us to be notified of process events using standard Spring eventing mechanisms. By default, the Spring eventing is enabled by a engine plugin. The eventing is controlled by four camunda.bpm.eventing properties. These are:
camunda.bpm.eventing.execution=true camunda.bpm.eventing.history=true camunda.bpm.eventing.task=true camunda.bpm.eventing.skippable=true The first three properties control three event streams for execution, task and history events respectively.</description>
    </item>
    
    <item>
      <title>Cancel and Compensation Events</title>
      <link>/manual/develop/reference/bpmn20/events/cancel-and-compensation-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/events/cancel-and-compensation-events/</guid>
      <description>Cancel Events Cancel End Event The cancel end event can only be used in combination with a transaction subprocess. When the cancel end event is reached, a cancel event is thrown which must be caught by a cancel boundary event. The cancel boundary event then cancels the transaction and triggers compensation.
Cancel Boundary Event An attached intermediate catching cancel event on the boundary of a transaction subprocess, or, for short, a cancel boundary event, is triggered when a transaction is canceled.</description>
    </item>
    
    <item>
      <title>Conditional Events</title>
      <link>/manual/develop/reference/bpmn20/events/conditional-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/events/conditional-events/</guid>
      <description>The conditional event defines an event which is triggered if a given condition is evaluated to true. It can be used as start event of an event sub process, as intermediate event and boundary event. The start and boundary event can be interrupting and non interrupting.
In Camunda, conditional events are triggered with the help of process variables. See the Trigger Conditional Events section for details.
In the following BPMN model, all supported conditional events are used.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>/manual/develop/webapps/tasklist/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/tasklist/configuration/</guid>
      <description>You can override the default configuration of Tasklist using a central configuration file located in app/tasklist/scripts/config.js. The following configuration options are available:
Date Format Dates can be configured by specifying a dateFormat object. The values of the properties of this object must be strings representing date formats in accordance with moment.js. Following date formats are used within Tasklist:
 monthName represents the name of a month (e.g., January). day represents the number of a day in a month (1.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>/manual/develop/webapps/welcome/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/welcome/configuration/</guid>
      <description>You can override the default configuration of the Welcome application by using a central configuration file, located in app/welcome/scripts/config.js. The following configuration options are available:
Custom links Can be used to add some useful links for the user, such as other applications or intranet sites.
Example export default { // …  links: [ { label: &amp;#39;Camunda Forum&amp;#39;, href: &amp;#39;https://forum.camunda.org&amp;#39;, description: &amp;#39;Forum for Camnuda BPM users and developers&amp;#39; }, // .</description>
    </item>
    
    <item>
      <title>Developing and Testing Spring Boot Applications</title>
      <link>/manual/develop/user-guide/spring-boot-integration/develop-and-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/spring-boot-integration/develop-and-test/</guid>
      <description>Developing Spring Boot provides Developer Tools which feature options like automatic restart and live reload during the development of an application.
Spring Developer Tools and Classloading An additional process engine plugin (ApplicationContextClassloaderSwitchPlugin) will be loaded in case your application is in a development mode:
 Spring Developer tools (spring-boot-devtools library) are on the class path and the tools are enabled, e.g., the application is started in IDE  The plugin ensures exchanging the application context classloader with the classloader used for the process engine to prevent issues during deserialization.</description>
    </item>
    
    <item>
      <title>Expression Language</title>
      <link>/manual/develop/user-guide/process-engine/expression-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/expression-language/</guid>
      <description>Camunda 7 supports the Unified Expression Language (EL), specified by the Jakarta Expression Language 4.0 standard. To do so, it maintains a custom version of the open source JUEL implementation.
Note, compared to EL 4.0 this JUEL implementation has the following limitations:
  Initializing collections directly within expressions (e.g., ${[1,2,3]}) is NOT supported.
  Lambda expressions (e.g., inline functions ${((x,y)-&amp;gt;x+y)(3,4)}) are NOT supported.
  Referencing static fields (e.</description>
    </item>
    
    <item>
      <title>File Upload and Download</title>
      <link>/manual/develop/reference/forms/embedded-forms/controls/files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/forms/embedded-forms/controls/files/</guid>
      <description>Uploading Files File input elements are HTML controls in the form of
&amp;lt;input type=&amp;#34;file&amp;#34;&amp;gt;&amp;lt;/input&amp;gt; They allow users to upload files, which will be stored as a process instance variable of the type Bytes. Larger files will take longer to process and may crash the browser, so there is a soft file size limit of 5MB. You can overwrite this limit using the cam-max-filesize directive. To upload larger files without freezing the browser, see the custom javascript section.</description>
    </item>
    
    <item>
      <title>Manual Task</title>
      <link>/manual/develop/reference/bpmn20/tasks/manual-task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/tasks/manual-task/</guid>
      <description>A Manual Task defines a task that is external to the BPM engine. It is used to model work that is done by somebody who the engine does not need to know of and that has no known system or UI interface. For the engine, a manual task is handled as a pass-through activity, automatically continuing the process when the process execution arrives at it.
 &amp;lt;manualTask id=&amp;#34;myManualTask&amp;#34; name=&amp;#34;Manual Task&amp;#34; /&amp;gt; Camunda Extensions </description>
    </item>
    
    <item>
      <title>Open Tasks Dashboard</title>
      <link>/manual/develop/webapps/cockpit/tasks-dashboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/tasks-dashboard/</guid>
      <description>You can use the open tasks dashboard to see how the open tasks are distributed by individual factors. Refer to the Cockpit Plugins section for information about adding a custom open task dashboard plugin.
  Open Tasks Assignments by type In this category you can see how many open tasks exist. There is also an overview which shows how the open tasks are distributed.
Assignment by group This category provides you an overview which shows how all open tasks which are assigned to a group are distributed between the individual groups.</description>
    </item>
    
    <item>
      <title>Suspension</title>
      <link>/manual/develop/webapps/cockpit/bpmn/suspension/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/bpmn/suspension/</guid>
      <description>In the process definition view and in the process instance view you can suspend the selected process definition or process instance by using the   button on the right side.
Process Definition Suspension If you suspend the process definition, you prevent the process definition from being instantiated. No further operations can be done while the process definition is in the suspended state. You can simply re-activate the process definition by using the   button on the right side.</description>
    </item>
    
    <item>
      <title>Correlate Message</title>
      <link>/manual/develop/webapps/cockpit/bpmn/correlate-message/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/bpmn/correlate-message/</guid>
      <description>When an execution waits in a message-catching flow-node, you can use Message Correlation to continue the execution. Cockpit offers a Batch Operation to correlate messages.
  You can configure the batch operation as follows:
 Message Name
Enter a message name or leave empty. If empty, any execution matches the correlation. Variables
Add variables that are set into the root scope of the process instances. Process Instances
Select a set of process instances via the checkboxes or by defining query criteria.</description>
    </item>
    
    <item>
      <title>Accessibility</title>
      <link>/manual/develop/webapps/tasklist/accessibility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/tasklist/accessibility/</guid>
      <description>It is possible to use the Tasklist only with the keyboard. You can use the TAB-key to navigate to the sections of the Tasklist. To interact with an element you have focused, press ENTER.
Keyboard Shortcuts To make working with the Tasklist easier, you can use keyboard shortcuts to jump to certain parts of the Tasklist or perform special operations. Per default, we support the following actions via keyboard shortcuts:</description>
    </item>
    
    <item>
      <title>Collapsed Subprocesses</title>
      <link>/manual/develop/webapps/cockpit/bpmn/drilldown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/webapps/cockpit/bpmn/drilldown/</guid>
      <description>Diagrams can contain collapsed subprocesses to hide complexity on multiple levels. You can drill down into collapsed subprocesses with the drilldown icon.
Process diagram If you have a collapsed subprocess in your diagram, a drilldown icon will appear in the lower right of the activity.
  The collapsed shape indicates if there are running child instances or if an incident occurred in a child activity.
If you click on the drilldown icon, the diagram will show the contents of the collapsed subprocess.</description>
    </item>
    
    <item>
      <title>Link Events</title>
      <link>/manual/develop/reference/bpmn20/events/link-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/events/link-events/</guid>
      <description>Link events are a special case - it has no special execution semantics but serves as a &amp;ldquo;GoTo&amp;rdquo; to another point in the same process model (to be precise: in the same sub process). Hence you can use two matching links as an alternative to a sequence flow as shown in the following example.
Note that you might have the same event source (throwing intermediate link event with the same event definition name) multiple times, but the event target (catching intermediate link event) has to be unique according to the BPMN 2.</description>
    </item>
    
    <item>
      <title>Public API</title>
      <link>/manual/develop/introduction/public-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/introduction/public-api/</guid>
      <description>Camunda provides a public API. This section covers the definition of the public API and backwards compatibility for version updates.
Definition of Public API The Camunda public API is limited to the following items:
Java API:
All non-implementation Java packages (package name does not contain impl) of the following modules.
 camunda-engine camunda-engine-spring camunda-engine-cdi camunda-engine-dmn camunda-bpmn-model camunda-cmmn-model camunda-dmn-model camunda-spin-core camunda-connect-core camunda-commons-typed-values  HTTP API (REST API):
 camunda-engine-rest: HTTP interface (set of HTTP requests accepted by the REST API as documented in REST API reference.</description>
    </item>
    
    <item>
      <title>Scripting</title>
      <link>/manual/develop/user-guide/process-engine/scripting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/scripting/</guid>
      <description>Camunda 7 supports scripting with JSR-223 compatible script engine implementations. Currently we test the integration for Groovy, JavaScript, JRuby and Jython. To use a scripting engine it is necessary to add the corresponding jar to the classpath.
 We include GraalVM JavaScript in the pre-packaged Camunda distributions. Consult JavaScript Considerations for further information.
We include Groovy in the pre-packaged Camunda distributions.
 The following table provides an overview of the BPMN elements which support the execution of scripts.</description>
    </item>
    
    <item>
      <title>Spring Security OAuth2 Integration</title>
      <link>/manual/develop/user-guide/spring-boot-integration/spring-security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/spring-boot-integration/spring-security/</guid>
      <description>Camunda provides Spring Security OAuth2 integration with the camunda-bpm-spring-boot-starter-security library. This library contains the Spring Security and Spring Security OAuth2 dependencies along with configuration classes that integrate Spring Security with Camunda Webapp&amp;rsquo;s authentication.
This is available both for Spring Boot and Camunda Run.
Camunda&amp;rsquo;s integration comes with multiple components and configurations. In the next sections you can find more details to each of them.
Activate OAuth2 Spring Boot In order to enable the Spring Security OAuth2 integration in Spring Boot, add the following dependency to your project:</description>
    </item>
    
    <item>
      <title>Task Markers</title>
      <link>/manual/develop/reference/bpmn20/tasks/task-markers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/tasks/task-markers/</guid>
      <description>In addition to the various types of tasks, we can mark tasks as loops, multiple instances or compensations. Markers can be combined with task types.
Multiple Instance A multi-instance activity is a way of defining repetition for a certain step in a business process. In programming concepts, a multi-instance matches the for each construct: it allows execution of a certain step or even a complete subprocess for each item in a given collection, sequentially or in parallel.</description>
    </item>
    
    <item>
      <title>BPMN Event Buttons</title>
      <link>/manual/develop/reference/forms/embedded-forms/controls/bpmn-buttons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/forms/embedded-forms/controls/bpmn-buttons/</guid>
      <description>These buttons can be used to trigger error and escalation events in user tasks. They will submit all entered values and activate the corresponding boundary event. To learn more about error and escalation events, see our section about events.
Error An Error Button can be bound to an error code and error message using the cam-error-code and cam-error-message directive. Providing an error message is optional.
&amp;lt;button cam-error-code=&amp;#34;bpmn-error-543&amp;#34; cam-error-message=&amp;#34;anErrorMessage&amp;#34; /&amp;gt; In the example above, the button is bound to the error code bpmn-error-543 with the message anErrorMessage.</description>
    </item>
    
    <item>
      <title>Templating</title>
      <link>/manual/develop/user-guide/process-engine/templating/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/templating/</guid>
      <description>Camunda 7 supports template engines which are implemented as script engines compatible with JSR-223. As a result, templates can be used everywhere where scripts can be used.
In community distributions of Camunda 7, the following template engine is provided out of the box:
 FreeMarker  The script engine Freemarker wrapper implementation can be found in the camunda-bpmn-platform repository.
The following template engines are provided as optional community extensions:
 Apache Velocity Saxon XQuery Saxon XSLT  The script engine wrapper implementations can be found in the camunda-7-template-engines-jsr223 community hub repository.</description>
    </item>
    
    <item>
      <title>Terminate Events</title>
      <link>/manual/develop/reference/bpmn20/events/terminate-event/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/reference/bpmn20/events/terminate-event/</guid>
      <description>A terminate event ends the complete scope it is raised in and all contained inner scopes.
It is useful if you have a parallel token flow in a process and you want to consume all tokens available in the same scope immediately.
A terminate event on process instance level terminates the complete instance. On subprocess level the current scope and all contained processes instances will be terminated.
Terminate Event Definition A terminate event is modeled as an end event with an additional definition element to mark the termination:</description>
    </item>
    
    <item>
      <title>Custom Code &amp; Security</title>
      <link>/manual/develop/user-guide/process-engine/securing-custom-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/securing-custom-code/</guid>
      <description>The process engine offers numerous extension points for customization of process behavior by using Java Code, Expression Language, Scripts and Templates. While these extension points allow for great flexibility in process implementation, they open up the possibility to perform malicious actions when in the wrong hands. It is therefore advisable to restrict access to API that allows custom code submission to trusted parties only. The following concepts exist that allow submitting custom code (via Java or REST API):</description>
    </item>
    
    <item>
      <title>External Tasks</title>
      <link>/manual/develop/user-guide/process-engine/external-tasks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/external-tasks/</guid>
      <description>The process engine supports two ways of executing service tasks:
 Internal Service tasks: Synchronous invocation of code deployed along with a process application External tasks: Providing a unit of work in a list that can be polled by workers  The first option is used when code is implemented as Delegation Code or as a Script. By contrast, external (service) tasks work in a way that the process engine publishes a unit of work to a worker to fetch and complete.</description>
    </item>
    
    <item>
      <title>Assert Examples</title>
      <link>/manual/develop/user-guide/testing/assert-examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/testing/assert-examples/</guid>
      <description>Assertions Instance: isActive Assert that a process instance is currently &amp;lsquo;active&amp;rsquo;, so neither suspended nor ended:
assertThat(processInstance).isActive(); Instance: isEnded Assert that a process instance is already ended:
assertThat(processInstance).isEnded(); Instance: isNotEnded Assert that a process instance is not ended:
assertThat(processInstance).isNotEnded(); Instance: isStarted Assert that a process instance is started:
assertThat(processInstance).isStarted(); Instance: isSuspended Assert that a process instance is suspended:
assertThat(processInstance).isSuspended(); Instance: hasPassed Assert that a process instance has passed a specified activity:</description>
    </item>
    
    <item>
      <title>Connectors</title>
      <link>/manual/develop/user-guide/process-engine/connectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/connectors/</guid>
      <description>With the dependency camunda-connect, the process engine supports simple connectors. Currently the following connector implementations exist:
It is also possible to implement your own custom connector in camunda. For more information about extending connectors please visit the Connector reference.
Configure Camunda Connect As Camunda Connect is available only partially when using the process engine (check the list below). With a pre-built distribution, Camunda Connect is already preconfigured.
The following connect artifacts exist:</description>
    </item>
    
    <item>
      <title>Limitations</title>
      <link>/manual/develop/user-guide/model-api/cmmn-model-api/limitations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/model-api/cmmn-model-api/limitations/</guid>
      <description>The CMMN model API is able to read CMMN 1.1 as well as CMMN 1.0 models. Its primary use case is to work with models of the latest version, such that there are limitations when editing CMMN models of prior versions.
 ModelElementType#getTypeNamespace() returns CMMN 1.1 namespace for elements which are present in CMMN 1.0 and CMMN 1.1 CMMN#createEmptyModel() always creates a CMMN 1.1 model. CMMN 1.0 models cannot be created anymore.</description>
    </item>
    
    <item>
      <title>JSF Task Forms</title>
      <link>/manual/develop/user-guide/task-forms/jsf-task-forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/task-forms/jsf-task-forms/</guid>
      <description>Adding JSF Forms to your Process Application Heads-up! The required CDI beans for this functionality are currently not available in Quarkus applicationsout of the box.
 If you add JSF forms as described below, you can easily use them as external task forms.
A working example can be found in the examples repository.
The BPMN process used for this example is shown in the image below:
  In this process model we added so called form keys to</description>
    </item>
    
    <item>
      <title>Process Versioning</title>
      <link>/manual/develop/user-guide/process-engine/process-versioning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/process-versioning/</guid>
      <description>Versioning of Process Definitions Business Processes are by nature long running. The process instances will maybe last for weeks, or months. In the meantime the state of the process instance is stored to the database. But sooner or later you might want to change the process definition even if there are still running instances.
This is supported by the process engine:
 If you redeploy a changed process definition, you get a new version in the database.</description>
    </item>
    
    <item>
      <title>Process Instance Migration</title>
      <link>/manual/develop/user-guide/process-engine/process-instance-migration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/process-instance-migration/</guid>
      <description>Whenever a new version of a process definition is deployed, existing process instances that run on previous versions are not affected. That means, the new process definition does not apply to them automatically. If process instances are supposed to continue execution on a different process definition, the process instance migration API can be employed.
Migration consists of two parts:
 Creating a migration plan that describes how process instances are to be migrated from one process definition to another Applying the migration plan to a set of process instances  A migration plan consists of a set of migration instructions that in essence are mappings between activities of the two process definitions.</description>
    </item>
    
    <item>
      <title>Deployment Cache</title>
      <link>/manual/develop/user-guide/process-engine/deployment-cache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/deployment-cache/</guid>
      <description>All process definitions are cached (after they have been parsed) to avoid polling the database every time a process definition is needed and because process definition data doesn&amp;rsquo;t change. This reduces the latency of referencing the process definitions and thus improves the performance of the system.
Customize the maximum Capacity of the Cache If one has many process definitions, the cache might occupy a large amount of memory and the capacity of the working memory may reach its limits.</description>
    </item>
    
    <item>
      <title>Password Hashing</title>
      <link>/manual/develop/user-guide/process-engine/password-hashing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/password-hashing/</guid>
      <description>This chapter is about how cryptographic password hashing is done in Camunda 7. In particular, the hashing algorithm that is being used and the salt generation. If you are not familiar with these topics, we recommend reading the articles about cryptographic hash function, salt and secure password hashing.
The Camunda version 7.6 and earlier use the cryptographic hash function SHA-1. Since Camunda version 7.7 the hash function SHA-512 is used. If there is a need for another custom hash function, it is possible to plugin a custom password hashing algorithm in Camunda.</description>
    </item>
    
    <item>
      <title>Password Policy</title>
      <link>/manual/develop/user-guide/process-engine/password-policy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/password-policy/</guid>
      <description>This chapter is about configuring and using a password policy for engine-managed user accounts. A password policy makes sure that only passwords that meet certain criteria are allowed. A policy can consist of any number of rules. Violation of one of the policy&amp;rsquo;s rules results in an error and the user not being saved.
Since version 7.11.0, the engine comes with a standard password policy that is disabled by default and must be configured to use.</description>
    </item>
    
    <item>
      <title>Transactions in Processes</title>
      <link>/manual/develop/user-guide/process-engine/transactions-in-processes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/transactions-in-processes/</guid>
      <description>The process engine is a piece of passive Java code which works in the Thread of the client. For instance, if you have a web application allowing users to start a new process instance and a user clicks on the corresponding button, some thread from the application server&amp;rsquo;s http-thread-pool will invoke the API method runtimeService.startProcessInstanceByKey(...), thus entering the process engine and starting a new process instance. We call this &amp;ldquo;borrowing the client thread&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>The Job Executor</title>
      <link>/manual/develop/user-guide/process-engine/the-job-executor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/the-job-executor/</guid>
      <description>A job is an explicit representation of a task to trigger process execution. A job is created when a timer event or a task marked for asynchronous execution (see transaction boundaries) is approached. Job processing can therefore be separated into three phases:
 Job Creation Job Acquisition Job Execution  While jobs are created during process execution, job acquisition and execution are the job executor&amp;rsquo;s responsibility. The following diagram illustrates these two steps:</description>
    </item>
    
    <item>
      <title>Multi-Tenancy</title>
      <link>/manual/develop/user-guide/process-engine/multi-tenancy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/multi-tenancy/</guid>
      <description>Multi-Tenancy regards the case in which a single Camunda installation should serve more than one tenant. For each tenant, certain guarantees of isolation should be made. For example, one tenant&amp;rsquo;s process instances should not interfere with those of another tenant.
Multi-Tenancy can be achieved in two different ways. One way is to use one process engine per tenant. The other way is to use just one process engine and associate the data with tenant identifiers.</description>
    </item>
    
    <item>
      <title>Id Generators</title>
      <link>/manual/develop/user-guide/process-engine/id-generator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/id-generator/</guid>
      <description>All persistent entities managed by the process engine (Process Instances, Tasks, &amp;hellip;) have unique Ids. These Ids uniquely identify an individual task, process instance, etc. When these entities are persisted to the database, the ids are used as primary keys in the corresponding database tables.
Out of the box, the process engine provides two Id generator implementations.
The Database Id Generator The Database Id Generator is implemented using a sequence Generator on top of the ACT_GE_PROPERTY table.</description>
    </item>
    
    <item>
      <title>External Task Client Spring Boot Starter</title>
      <link>/manual/develop/user-guide/ext-client/spring-boot-starter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/ext-client/spring-boot-starter/</guid>
      <description>Camunda provides a Spring Boot Starter for the External Task Client. This allows you to easily add the External Task Client to your Spring Boot application by adding the following Maven dependency to your pom.xml file:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.camunda.bpm.springboot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camunda-bpm-spring-boot-starter-external-task-client&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;7.22.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Please check out our External Task Client Spring Boot Starter Examples.
The Client can subscribe to one or more topic names that are defined in your BPMN process model. When the execution waits in an External Task, the Client executes your custom business logic.</description>
    </item>
    
    <item>
      <title>Logging</title>
      <link>/manual/develop/user-guide/logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/logging/</guid>
      <description>This page provides information about logging in Camunda.
SLF4J Most Camunda modules, including the Camunda engine, use slf4j as logging &amp;ldquo;facade&amp;rdquo;. This allows users to direct logging output to the logging &amp;ldquo;backend&amp;rdquo; of their choice, such as logback or log4j.
Preconfigured Logging with a Shared Process Engine When installing Camunda as a shared process engine in an application server, Camunda logging is pre-configured.
On all application servers except Wildfly, logging is pre-configured using the slf4j-jdk14 bridge.</description>
    </item>
    
    <item>
      <title>Metrics</title>
      <link>/manual/develop/user-guide/process-engine/metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/metrics/</guid>
      <description>The process engine reports runtime metrics to the database that can help draw conclusions about usage, load, and performance of Camunda 7. Metrics are reported in the database tables ACT_RU_METER_LOG and ACT_RU_TASK_METER_LOG. Single metric entries in ACT_RU_METER_LOG consist of a metric identifier, a value as natural number in the Java long range that the metric took in a certain timespan and a name identifying the metric reporter. Task metric entries in ACT_RU_TASK_METER_LOG comprise a fixed-length, pseudonymized assignee value and the point in time it was assigned at.</description>
    </item>
    
    <item>
      <title>Incidents</title>
      <link>/manual/develop/user-guide/process-engine/incidents/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/incidents/</guid>
      <description>Incidents are notable events that happen in the process engine. Such incidents usually indicate some kind of problem related to process execution. Examples of such incidents may be a failed job with depleted retries (retries = 0), indicating that an execution is stuck and manual administrative action is necessary to repair the process instance. If such incidents arise, the process engine fires an internal event which can be handled by a configurable incident handler.</description>
    </item>
    
    <item>
      <title>Security Instructions</title>
      <link>/manual/develop/user-guide/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/security/</guid>
      <description>This page provides an overview of how to secure a Camunda installation. For Camunda&amp;rsquo;s security policy, a list of security notices and a guide how to report vulnerabilities, please visit the general security documentation.
In order to secure a Camunda installation, Camunda itself must be configured correctly and it must be integrated correctly into its environment. This section also identifies areas where we consider security issues to be relevant for the specific Camunda 7 product and listed those in the subsequent sections.</description>
    </item>
    
    <item>
      <title>Camunda License Keys</title>
      <link>/manual/develop/user-guide/license-use/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/license-use/</guid>
      <description>Some Camunda 7 features (e.g. enterprise plugins) require a license key. The license will be provided as a string by the Camunda support team. The license mechanism has no impact on the engine or other runtime components. The following section explains the various methods by which a Camunda license can be added to the Process Engine.
Deployment Scenarios and the License Key A Camunda license key should be applied per database.</description>
    </item>
    
    <item>
      <title>Process Engine Plugins</title>
      <link>/manual/develop/user-guide/process-engine/process-engine-plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/process-engine-plugins/</guid>
      <description>The process engine configuration can be extended through process engine plugins. A process engine plugin is an extension to the process engine configuration.
A plugin must provide an implementation of the ProcessEnginePlugin interface.
Configure Process Engine Plugins Process engine plugins can be configured
 in the Camunda Deployment Descriptors (bpm-platform.xml/processes.xml), in the Wildfly configuration file (standalone.xml/domain.xml), using Spring Beans XML, in the Camunda Run YAML configuration files programatically.  The following is an example of how to configure a process engine plugin in a bpm-platform.</description>
    </item>
    
    <item>
      <title>Identity Service</title>
      <link>/manual/develop/user-guide/process-engine/identity-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/identity-service/</guid>
      <description>The identity service is an API abstraction over various user/group repositories. The basic entities are
 User: a user identified by a unique Id Group: a group identified by a unique Id Membership: the relationship between users and groups Tenant: a tenant identified by a unique Id Tenant Membership: the relationship between tenants and users/groups  Example:
User demoUser = processEngine.getIdentityService() .createUserQuery() .userId(&amp;#34;demo&amp;#34;) .singleResult(); Camunda 7 distinguishes between read-only and writable user repositories.</description>
    </item>
    
    <item>
      <title>Authorization Service</title>
      <link>/manual/develop/user-guide/process-engine/authorization-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/authorization-service/</guid>
      <description>Camunda allows users to authorize access to the data it manages. This makes it possible to configure which user can access which process instances, tasks, etc&amp;hellip;
Authorization has a performance cost and introduces some complexity. It should only be used if required.
When is Authorization required? Not every Camunda setup needs to enable authorization. In many scenarios, Camunda is embedded into an application and the application itself ensures that users can only access data they are authorized to access.</description>
    </item>
    
    <item>
      <title>Deployments</title>
      <link>/manual/develop/user-guide/process-engine/deployments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/deployments/</guid>
      <description>Before a process (or case, or decision) can be executed by the process engine, it has to be deployed. A deployment is a logical entity that groups multiple resources that are deployed together. Deployments can be made programmatically via Java API or REST API, or declaratively for resources of a Process Application. This section covers advanced deployment concepts.
Deployments in a Clustered Scenario Before the process engine starts to perform a deployment, it tries to acquire an exclusive lock on a row in the table ACT_GE_PROPERTY.</description>
    </item>
    
    <item>
      <title>Process Diagram Visualization</title>
      <link>/manual/develop/user-guide/process-engine/process-diagram-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/process-diagram-api/</guid>
      <description>A BPMN process diagram is a formidable place to visualize information around your process. We recommend to use JavaScript libraries to display process diagrams and enrich them with additional information.
In our web applications Cockpit and Tasklist, we use bpmn.io, a toolkit for rendering BPMN 2.0 process models directly in the browser. It allows adding additional information to the diagram and includes ways for user interaction. Although bpmn.io is still under development, its API is rather stable.</description>
    </item>
    
    <item>
      <title>Time zones</title>
      <link>/manual/develop/user-guide/process-engine/time-zones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/time-zones/</guid>
      <description>Process engine The Camunda engine uses the default time zone of the JVM when operating with dates:
 When reading datetime values from BPMN XML In REST responses When reading/writing DateTime values from/to the database  Database Database time zone and database sessions time zone are out of scope of the Camunda engine and must be configured explicitly.
However, Timestamp columns in the Camunda engine are using the TIMESTAMP [WITHOUT TIME ZONE] data type (the name differs in different database servers).</description>
    </item>
    
    <item>
      <title>Batch</title>
      <link>/manual/develop/user-guide/process-engine/batch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/batch/</guid>
      <description>Batch is a concept to offload workload from the current execution to be processed in the background. This allows to run a process engine command asynchronously on a large set of instances without blocking. It also decouples the separate command invocations from each other.
For example the process instance migration command can be executed using a batch. This allows to migrate process instances asynchronously. In a synchronous process instance migration, all migrations are executed in a single transaction.</description>
    </item>
    
    <item>
      <title>Batch operations</title>
      <link>/manual/develop/user-guide/process-engine/batch-operations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/batch-operations/</guid>
      <description>The following operations can be executed asynchronously
 Process Instance Migration Cancellation of running Process Instances Deletion of Historic Process Instances Update suspend state of process instances Setting retries and due dates of jobs using the builder pattern Setting retries of jobs associated with Process Instances Process Instance Modification Process Instance Restart Setting retries of external tasks Set Variables to Process Instances Correlate Messages to Process Instances Set a Removal Time to Historic Process Instances Set a Removal Time to Historic Decision Instances Set a Removal Time to Historic Batches  All batch operations rely on corresponding methods that provide the possibility to operate on a list of entities synchronously.</description>
    </item>
    
    <item>
      <title>Error Handling</title>
      <link>/manual/develop/user-guide/process-engine/error-handling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/error-handling/</guid>
      <description>Error Handling Strategies There are a couple of basic strategies to handle errors and exceptions within processes. The decision which strategy to use depends on:
 Technical vs. Business Errors: Does the error have some business meaning and causes an alternative process flow (like &amp;ldquo;item not on stock&amp;rdquo;) or is it a technical malfunction (like &amp;ldquo;network currently down&amp;rdquo;)? Explicit error handling or generic approach: For some situations you want to explicitly model what should happen in case of an error (typically for business errors).</description>
    </item>
    
    <item>
      <title>Diagnostics data</title>
      <link>/manual/develop/user-guide/process-engine/diagnostics-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/process-engine/diagnostics-data/</guid>
      <description>Diagnostics data is constantly collected and can be collected only by you. This allows you to access the collected data through the Java and REST APIs of Camunda. Being able to easily access the collected data is helpful when asking for help in our forum or when opening issues in our issue tracker as it contains many of the information that are usually necessary to understand your Camunda setup.
How to access the data Java API To fetch the collected data via the Java API, you can use the ManagementService class.</description>
    </item>
    
    <item>
      <title>Version Compatibility</title>
      <link>/manual/develop/user-guide/ext-client/compatibility-matrix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/user-guide/ext-client/compatibility-matrix/</guid>
      <description>Each version of Camunda 7 is bound to a specific version of the External Task Clients.
Camunda 7 and its compatible Java External Task Client always share the same version.
Only these default combinations are recommended (and supported) by Camunda. Nevertheless, each version of the External Task Clients can be combined with newer patch versions of the Camunda 7 Workflow Engine.</description>
    </item>
    
    <item>
      <title>Update a Glassfish Installation from 7.1 to 7.2</title>
      <link>/manual/develop/update/minor/71-to-72/glassfish/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/71-to-72/glassfish/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Glassfish 3.1 application server in a shared process engine setting. For the entire migration procedure, refer to the migration guide. If not already done, make sure to download the Camunda 7.2 Glassfish distribution.
The update procedure takes the following steps:
 Uninstall the Camunda libraries and archives Add the new Camunda libraries Install optional Camunda dependencies Configure process engines Install the Camunda archive Install the Camunda 7 web applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Glassfish Installation from 7.2 to 7.3</title>
      <link>/manual/develop/update/minor/72-to-73/glassfish/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/72-to-73/glassfish/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Glassfish 3.1 application server in a shared process engine setting. For the entire migration procedure, refer to the migration guide. If not already done, make sure to download the Camunda 7.3 Glassfish distribution.
The update procedure takes the following steps:
 Uninstall the Camunda libraries and archives Replace Camunda core libraries Replace optional Camunda dependencies Maintain Camunda 7 configuration (optional) Install the Camunda archive Install the Camunda 7 web applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Glassfish Installation from 7.3 to 7.4</title>
      <link>/manual/develop/update/minor/73-to-74/glassfish/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/73-to-74/glassfish/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Glassfish 3.1 application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.4 Glassfish distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Libraries Maintain the Camunda 7 Configuration Maintain Process Engine Configuration Maintain Process Applications Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Glassfish Installation from 7.4 to 7.5</title>
      <link>/manual/develop/update/minor/74-to-75/glassfish/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/74-to-75/glassfish/</guid>
      <description>ENVIRONMENT OUT OF SUPPORT From Camunda 7.5 onwards Glassfish Application Server is not supported anymore. Please have a look at the list of Supported Environments.
 The following steps describe how to update the Camunda artifacts on a Glassfish 3.1 application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.5 Glassfish distribution.</description>
    </item>
    
    <item>
      <title>Update a JBoss EAP 6 or Wildfly / JBoss EAP 7 Installation from 7.16 to 7.17</title>
      <link>/manual/develop/update/minor/716-to-717/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/716-to-717/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss EAP 6 or Wildfly / JBoss EAP 7 in a shared process engine scenario. Throughout the procedure, refer to the update guide.
If not already done, download the Camunda 7.17 JBoss distribution or Camunda 7.17 Wildfly distribution. In the following instructions, $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.
The update procedure takes the following steps:</description>
    </item>
    
    <item>
      <title>Update a JBoss Installation from 7.1 to 7.2</title>
      <link>/manual/develop/update/minor/71-to-72/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/71-to-72/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7 server in a shared process engine setting. For the entire migration procedure, refer to the migration guide. If not already done, make sure to download the Camunda 7.2 JBoss distribution.
The update procedure takes the following steps:
 Update the Camunda 7 modules Configure process engines Configure optional Camunda 7 extensions (optional) Update Camunda web applications  Whenever the instructions are to replace a module, make sure to delete the previous version of the module first to avoid orphan jars.</description>
    </item>
    
    <item>
      <title>Update a JBoss Installation from 7.2 to 7.3</title>
      <link>/manual/develop/update/minor/72-to-73/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/72-to-73/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7 and Wildfly 8 server in a shared process engine setting. For the entire migration procedure, refer to the migration guide. If not already done, make sure to download the Camunda 7.3 JBoss distribution or Camunda 7.3 Wildfly distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss Installation from 7.3 to 7.4</title>
      <link>/manual/develop/update/minor/73-to-74/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/73-to-74/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7 and Wildfly 8 server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.4 JBoss distribution or Camunda 7.4 Wildfly distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss/Wildfly Installation from 7.10 to 7.11</title>
      <link>/manual/develop/update/minor/710-to-711/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/710-to-711/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7 and Wildfly server in a shared process engine scenario. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.11 JBoss distribution or Camunda 7.11 Wildfly distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss/Wildfly Installation from 7.11 to 7.12</title>
      <link>/manual/develop/update/minor/711-to-712/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/711-to-712/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7 and Wildfly server in a shared process engine scenario. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.12 JBoss distribution or Camunda 7.12 Wildfly distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss/Wildfly Installation from 7.12 to 7.13</title>
      <link>/manual/develop/update/minor/712-to-713/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/712-to-713/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7 and Wildfly server in a shared process engine scenario. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.13 JBoss distribution or Camunda 7.13 Wildfly distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss/Wildfly Installation from 7.13 to 7.14</title>
      <link>/manual/develop/update/minor/713-to-714/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/713-to-714/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7 and Wildfly server in a shared process engine scenario. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.14 JBoss distribution or Camunda 7.14 Wildfly distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss/Wildfly Installation from 7.14 to 7.15</title>
      <link>/manual/develop/update/minor/714-to-715/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/714-to-715/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7 and Wildfly server in a shared process engine scenario. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.15 JBoss distribution or Camunda 7.15 Wildfly distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss/Wildfly Installation from 7.15 to 7.16</title>
      <link>/manual/develop/update/minor/715-to-716/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/715-to-716/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7 and Wildfly server in a shared process engine scenario. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.16 JBoss distribution or Camunda 7.16 Wildfly distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss/Wildfly Installation from 7.4 to 7.5</title>
      <link>/manual/develop/update/minor/74-to-75/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/74-to-75/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7, Wildfly 8 and Wildfly 10 server in a shared process engine scenario. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.5 JBoss distribution, Camunda 7.5 Wildfly 8 or Camunda 7.5 Wildfly 10 distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss/Wildfly Installation from 7.5 to 7.6</title>
      <link>/manual/develop/update/minor/75-to-76/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/75-to-76/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7, Wildfly 8 and Wildfly 10 server in a shared process engine scenario. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.6 JBoss distribution, Camunda 7.6 Wildfly 8 or Camunda 7.6 Wildfly 10 distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss/Wildfly Installation from 7.6 to 7.7</title>
      <link>/manual/develop/update/minor/76-to-77/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/76-to-77/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7, Wildfly 8 and Wildfly 10 server in a shared process engine scenario. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.7 JBoss distribution, Camunda 7.7 Wildfly 8 or Camunda 7.7 Wildfly 10 distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss/Wildfly Installation from 7.7 to 7.8</title>
      <link>/manual/develop/update/minor/77-to-78/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/77-to-78/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7, Wildfly 8 and Wildfly 10 server in a shared process engine scenario. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.8 JBoss distribution, Camunda 7.8 Wildfly 8 or Camunda 7.8 Wildfly 10 distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss/Wildfly Installation from 7.8 to 7.9</title>
      <link>/manual/develop/update/minor/78-to-79/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/78-to-79/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7, Wildfly 8 and Wildfly 10 server in a shared process engine scenario. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.9 JBoss distribution, Camunda 7.9 Wildfly 8 or Camunda 7.9 Wildfly 10 distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a JBoss/Wildfly Installation from 7.9 to 7.10</title>
      <link>/manual/develop/update/minor/79-to-710/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/79-to-710/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a JBoss AS 7 and Wildfly server in a shared process engine scenario. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.10 JBoss distribution or Camunda 7.10 Wildfly distribution. In the following instructions $APP_SERVER should be replaced with either jboss or wildfly, depending on the used application server.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.1 to 7.2</title>
      <link>/manual/develop/update/minor/71-to-72/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/71-to-72/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire migration procedure, refer to the migration guide. If not already done, make sure to download the Camunda 7.2 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda 7 core libraries Update and configure optional Camunda 7 libraries (optional) Configure process engines Update Camunda web applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.10 to 7.11</title>
      <link>/manual/develop/update/minor/710-to-711/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/710-to-711/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.11 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda 7 Core Libraries Update Optional Camunda 7 Libraries Maintain Process Applications Update Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.11 to 7.12</title>
      <link>/manual/develop/update/minor/711-to-712/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/711-to-712/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.12 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda 7 Core Libraries Update Optional Camunda 7 Libraries Update Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.12 to 7.13</title>
      <link>/manual/develop/update/minor/712-to-713/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/712-to-713/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.13 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda 7 Core Libraries Update Optional Camunda 7 Libraries Update Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.13 to 7.14</title>
      <link>/manual/develop/update/minor/713-to-714/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/713-to-714/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.14 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda 7 Core Libraries Update Optional Camunda 7 Libraries Update Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.14 to 7.15</title>
      <link>/manual/develop/update/minor/714-to-715/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/714-to-715/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.15 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda 7 Core Libraries Update Optional Camunda 7 Libraries Update Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.15 to 7.16</title>
      <link>/manual/develop/update/minor/715-to-716/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/715-to-716/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.16 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda 7 Core Libraries Update Optional Camunda 7 Libraries Update Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.16 to 7.17</title>
      <link>/manual/develop/update/minor/716-to-717/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/716-to-717/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting.
Throughout the procedure, refer to the update guide. If not already done, download the Camunda 7.17 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda 7 core libraries. Update optional Camunda 7 libraries. Update web applications.  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.17 to 7.18</title>
      <link>/manual/develop/update/minor/717-to-718/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/717-to-718/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting.
Throughout the procedure, refer to the update guide. If not already done, download the Camunda 7.18 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda 7 core libraries. Update optional Camunda 7 libraries. Update web applications.  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.18 to 7.19</title>
      <link>/manual/develop/update/minor/718-to-719/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/718-to-719/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting.
Throughout the procedure, refer to the update guide. If not already done, download the Camunda 7.19 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda 7 core libraries. Update optional Camunda 7 libraries. Update web applications.  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.19 to 7.20</title>
      <link>/manual/develop/update/minor/719-to-720/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/719-to-720/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting.
Throughout the procedure, refer to the update guide. If not already done, download the Camunda 7.20 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda 7 core libraries. Update optional Camunda 7 libraries. Update web applications.  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.2 to 7.3</title>
      <link>/manual/develop/update/minor/72-to-73/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/72-to-73/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire migration procedure, refer to the migration guide. If not already done, make sure to download the Camunda 7.3 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda 7 core libraries Update the optional Camunda 7 libraries Update Camunda web applications Configure Process Engines  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.20 to 7.21</title>
      <link>/manual/develop/update/minor/720-to-721/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/720-to-721/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting.
Throughout the procedure, refer to the update guide. If not already done, download the Camunda 7.21 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda 7 core libraries. Update optional Camunda 7 libraries. Update web applications.  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.21 to 7.22</title>
      <link>/manual/develop/update/minor/721-to-722/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/721-to-722/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting.
Throughout the procedure, refer to the update guide. If not already done, download the Camunda 7.22 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda 7 core libraries. Update optional Camunda 7 libraries. Update web applications.  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.3 to 7.4</title>
      <link>/manual/develop/update/minor/73-to-74/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/73-to-74/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.4 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda 7 Core Libraries Update Optional Camunda 7 Libraries Maintain Process Engine Configuration Maintain Process Applications Update Web Applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.4 to 7.5</title>
      <link>/manual/develop/update/minor/74-to-75/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/74-to-75/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.5 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda 7 Core Libraries Update Optional Camunda 7 Libraries Maintain Process Applications Update Web Applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.5 to 7.6</title>
      <link>/manual/develop/update/minor/75-to-76/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/75-to-76/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.6 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda 7 Core Libraries Update Optional Camunda 7 Libraries Maintain Process Applications Update Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.6 to 7.7</title>
      <link>/manual/develop/update/minor/76-to-77/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/76-to-77/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.7 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda 7 Core Libraries Update Optional Camunda 7 Libraries Maintain Process Applications Update Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.7 to 7.8</title>
      <link>/manual/develop/update/minor/77-to-78/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/77-to-78/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.8 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda 7 Core Libraries Update Optional Camunda 7 Libraries Maintain Process Applications Update Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.8 to 7.9</title>
      <link>/manual/develop/update/minor/78-to-79/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/78-to-79/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.9 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda 7 Core Libraries Update Optional Camunda 7 Libraries Maintain Process Applications Update Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Tomcat Installation from 7.9 to 7.10</title>
      <link>/manual/develop/update/minor/79-to-710/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/79-to-710/tomcat/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Tomcat server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.10 Tomcat distribution.
The update procedure takes the following steps:
 Update the Camunda 7 Core Libraries Update Optional Camunda 7 Libraries Maintain Process Applications Update Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update a Wildfly / JBoss EAP 7 Installation from 7.17 to 7.18</title>
      <link>/manual/develop/update/minor/717-to-718/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/717-to-718/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Wildfly/JBoss EAP 7 in a shared process engine scenario. Throughout the procedure, refer to the update guide.
If not already done, download the Camunda 7.18 Wildfly distribution.
The update procedure takes the following steps:
 Update the Camunda 7 modules. Update optional Camunda 7 modules. Update Camunda web applications.  Whenever the instructions are to replace a module, delete the previous version of the module first to avoid orphan jars.</description>
    </item>
    
    <item>
      <title>Update a Wildfly / JBoss EAP 7 Installation from 7.18 to 7.19</title>
      <link>/manual/develop/update/minor/718-to-719/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/718-to-719/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Wildfly/JBoss EAP 7 in a shared process engine scenario. Throughout the procedure, refer to the update guide.
Reading this Guide This guide uses a number of variables to denote common path names and constants:
 $WILDFLY_HOME points to the JBoss EAP/WildFly application server main directory. $WILDFLY_DISTRIBUTION represents the downloaded pre-packaged Camunda 7 distribution for WildFly, e.g. camunda-bpm-wildfly-$PLATFORM_VERSION.zip or camunda-bpm-wildfly-$PLATFORM_VERSION.</description>
    </item>
    
    <item>
      <title>Update a Wildfly / JBoss EAP 7 Installation from 7.19 to 7.20</title>
      <link>/manual/develop/update/minor/719-to-720/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/719-to-720/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Wildfly/JBoss EAP 7 in a shared process engine scenario. Throughout the procedure, refer to the update guide.
Reading this Guide This guide uses a number of variables to denote common path names and constants:
 $WILDFLY_HOME points to the JBoss EAP/WildFly application server main directory. $WILDFLY_DISTRIBUTION represents the downloaded pre-packaged Camunda 7 distribution for WildFly, e.g. camunda-bpm-wildfly-$PLATFORM_VERSION.zip or camunda-bpm-wildfly-$PLATFORM_VERSION.</description>
    </item>
    
    <item>
      <title>Update a Wildfly / JBoss EAP 7 Installation from 7.20 to 7.21</title>
      <link>/manual/develop/update/minor/720-to-721/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/720-to-721/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Wildfly/JBoss EAP 7 in a shared process engine scenario. Throughout the procedure, refer to the update guide.
Reading this Guide This guide uses a number of variables to denote common path names and constants:
 $WILDFLY_HOME points to the JBoss EAP/WildFly application server main directory. $WILDFLY_DISTRIBUTION represents the downloaded pre-packaged Camunda 7 distribution for WildFly, e.g. camunda-bpm-wildfly-$PLATFORM_VERSION.zip or camunda-bpm-wildfly-$PLATFORM_VERSION.</description>
    </item>
    
    <item>
      <title>Update a Wildfly / JBoss EAP 7 Installation from 7.21 to 7.22</title>
      <link>/manual/develop/update/minor/721-to-722/jboss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/721-to-722/jboss/</guid>
      <description>The following steps describe how to update the Camunda artifacts on a Wildfly/JBoss EAP 7 in a shared process engine scenario. Throughout the procedure, refer to the update guide.
Reading this Guide This guide uses a number of variables to denote common path names and constants:
 $WILDFLY_HOME points to the JBoss EAP/WildFly application server main directory. $WILDFLY_DISTRIBUTION represents the downloaded pre-packaged Camunda 7 distribution for WildFly, e.g. camunda-bpm-wildfly-$PLATFORM_VERSION.zip or camunda-bpm-wildfly-$PLATFORM_VERSION.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Application Server Installation from 7.1 to 7.2</title>
      <link>/manual/develop/update/minor/71-to-72/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/71-to-72/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM was application server in a shared process engine setting. For the entire migration procedure, refer to the migration guide. If not already done, make sure to download the Camunda 7.2 IBM was distribution.
The update procedure takes the following steps:
 Uninstall the Camunda libraries and archives Add the new Camunda libraries Install optional Camunda dependencies Configure process engines Create a shared Camunda library Install the Camunda archive Install the Camunda 7 web applications Associate existing applications with shared library  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.10 to 7.11</title>
      <link>/manual/develop/update/minor/710-to-711/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/710-to-711/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.11 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.11 to 7.12</title>
      <link>/manual/develop/update/minor/711-to-712/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/711-to-712/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.12 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.12 to 7.13</title>
      <link>/manual/develop/update/minor/712-to-713/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/712-to-713/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.13 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.13 to 7.14</title>
      <link>/manual/develop/update/minor/713-to-714/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/713-to-714/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.14 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.14 to 7.15</title>
      <link>/manual/develop/update/minor/714-to-715/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/714-to-715/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.15 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.15 to 7.16</title>
      <link>/manual/develop/update/minor/715-to-716/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/715-to-716/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.16 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.16 to 7.17</title>
      <link>/manual/develop/update/minor/716-to-717/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/716-to-717/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. Throughout the procedure, refer to the update guide. If not already done, download the Camunda 7.17 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda libraries and archives. Replace Camunda core libraries. Replace optional Camunda dependencies. Maintain the Camunda 7 configuration. Install the Camunda Archive.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.17 to 7.18</title>
      <link>/manual/develop/update/minor/717-to-718/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/717-to-718/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server 9 or IBM WebSphere application server Liberty in a shared process engine setting. Throughout the procedure, refer to the update guide. If not already done, download the Camunda 7.18 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda libraries and archives. Replace Camunda core libraries. Replace optional Camunda dependencies. Maintain the Camunda 7 configuration.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.18 to 7.19</title>
      <link>/manual/develop/update/minor/718-to-719/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/718-to-719/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server 9 or IBM WebSphere application server Liberty in a shared process engine setting. Throughout the procedure, refer to the update guide. If not already done, download the Camunda 7.19 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda libraries and archives. Replace Camunda core libraries. Replace optional Camunda dependencies. Maintain the Camunda 7 configuration.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.2 to 7.3</title>
      <link>/manual/develop/update/minor/72-to-73/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/72-to-73/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire migration procedure, refer to the migration guide. If not already done, make sure to download the Camunda 7.3 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda libraries and archives Replace Camunda core libraries Replace optional Camunda dependencies Maintain Camunda 7 configuration (optional) Install the Camunda archive Install the Camunda 7 web applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.3 to 7.4</title>
      <link>/manual/develop/update/minor/73-to-74/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/73-to-74/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.4 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Maintain Process Engine Configuration Maintain Process Applications Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.4 to 7.5</title>
      <link>/manual/develop/update/minor/74-to-75/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/74-to-75/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.5 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Maintain Process Applications Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.5 to 7.6</title>
      <link>/manual/develop/update/minor/75-to-76/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/75-to-76/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.6 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.6 to 7.7</title>
      <link>/manual/develop/update/minor/76-to-77/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/76-to-77/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.7 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.7 to 7.8</title>
      <link>/manual/develop/update/minor/77-to-78/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/77-to-78/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.8 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.8 to 7.9</title>
      <link>/manual/develop/update/minor/78-to-79/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/78-to-79/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.9 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Installation from 7.9 to 7.10</title>
      <link>/manual/develop/update/minor/79-to-710/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/79-to-710/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an IBM WebSphere application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.10 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Libraries and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Liberty Installation from 7.19 to 7.20</title>
      <link>/manual/develop/update/minor/719-to-720/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/719-to-720/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on IBM WebSphere application server Liberty in a shared process engine setting. Throughout the procedure, refer to the update guide. If not already done, download the Camunda 7.20 IBM WebSphere distribution.
Removed support for WebSphere 9 Support for WebSphere 9 was discontinued with the Camunda 7.20.0 release. The artifacts used in this guide might be compatible with a WebSphere 9 application server.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Liberty Installation from 7.20 to 7.21</title>
      <link>/manual/develop/update/minor/720-to-721/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/720-to-721/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on IBM WebSphere application server Liberty in a shared process engine setting. Throughout the procedure, refer to the update guide. If not already done, download the Camunda 7.21 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda libraries and archives. Replace Camunda core libraries. Replace optional Camunda dependencies. Maintain the Camunda 7 configuration. Install the Camunda Archive.</description>
    </item>
    
    <item>
      <title>Update an IBM Websphere Liberty Installation from 7.21 to 7.22</title>
      <link>/manual/develop/update/minor/721-to-722/was/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/721-to-722/was/</guid>
      <description>The following steps describe how to update the Camunda artifacts on IBM WebSphere application server Liberty in a shared process engine setting. Throughout the procedure, refer to the update guide. If not already done, download the Camunda 7.22 IBM WebSphere distribution.
The update procedure takes the following steps:
 Uninstall the Camunda libraries and archives. Replace Camunda core libraries. Replace optional Camunda dependencies. Maintain the Camunda 7 configuration. Install the Camunda Archive.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.1 to 7.2</title>
      <link>/manual/develop/update/minor/71-to-72/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/71-to-72/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire migration procedure, refer to the migration guide. If not already done, make sure to download the Camunda 7.2 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda libraries and archives Add the new Camunda libraries Install optional Camunda dependencies Configure process engines Install the Camunda archive Install the Camunda 7 web applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.10 to 7.11</title>
      <link>/manual/develop/update/minor/710-to-711/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/710-to-711/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.11 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.11 to 7.12</title>
      <link>/manual/develop/update/minor/711-to-712/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/711-to-712/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.12 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.12 to 7.13</title>
      <link>/manual/develop/update/minor/712-to-713/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/712-to-713/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.13 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.13 to 7.14</title>
      <link>/manual/develop/update/minor/713-to-714/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/713-to-714/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.14 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.14 to 7.15</title>
      <link>/manual/develop/update/minor/714-to-715/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/714-to-715/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.15 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.15 to 7.16</title>
      <link>/manual/develop/update/minor/715-to-716/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/715-to-716/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.16 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.16 to 7.17</title>
      <link>/manual/develop/update/minor/716-to-717/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/716-to-717/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. Throughout the procedure, refer to the update guide. If not already done, download the Camunda 7.17 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda applications and archives. Replace Camunda core libraries. Replace optional Camunda dependencies. Maintain the Camunda 7 configuration. Install the Camunda Archive.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.17 to 7.18</title>
      <link>/manual/develop/update/minor/717-to-718/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/717-to-718/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. Throughout the procedure, refer to the update guide. If not already done, download the Camunda 7.18 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda applications and archives. Replace Camunda core libraries. Replace optional Camunda dependencies. Maintain the Camunda 7 configuration. Install the Camunda Archive.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.18 to 7.19</title>
      <link>/manual/develop/update/minor/718-to-719/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/718-to-719/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. Throughout the procedure, refer to the update guide. If not already done, download the Camunda 7.19 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda applications and archives. Replace Camunda core libraries. Replace optional Camunda dependencies. Maintain the Camunda 7 configuration. Install the Camunda Archive.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.19 to 7.20</title>
      <link>/manual/develop/update/minor/719-to-720/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/719-to-720/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. Throughout the procedure, refer to the update guide. If not already done, download the Camunda 7.20 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda applications and archives. Replace Camunda core libraries. Replace optional Camunda dependencies. Maintain the Camunda 7 configuration. Install the Camunda Archive.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.2 to 7.3</title>
      <link>/manual/develop/update/minor/72-to-73/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/72-to-73/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire migration procedure, refer to the migration guide. If not already done, make sure to download the Camunda 7.3 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda libraries and archives Replace Camunda core libraries Replace optional Camunda dependencies Maintain Camunda 7 configuration (optional) Install the Camunda archive Install the Camunda 7 web applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.20 to 7.21</title>
      <link>/manual/develop/update/minor/720-to-721/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/720-to-721/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. Throughout the procedure, refer to the update guide. If not already done, download the Camunda 7.21 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda applications and archives. Replace Camunda core libraries. Replace optional Camunda dependencies. Maintain the Camunda 7 configuration. Install the Camunda Archive.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.21 to 7.22</title>
      <link>/manual/develop/update/minor/721-to-722/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/721-to-722/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. Throughout the procedure, refer to the update guide. If not already done, download the Camunda 7.22 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda applications and archives. Replace Camunda core libraries. Replace optional Camunda dependencies. Maintain the Camunda 7 configuration. Install the Camunda Archive.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.3 to 7.4</title>
      <link>/manual/develop/update/minor/73-to-74/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/73-to-74/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.4 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Maintain Process Engine Configuration Maintain Process Applications Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.4 to 7.5</title>
      <link>/manual/develop/update/minor/74-to-75/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/74-to-75/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.5 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Maintain Process Applications Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifiers $*_VERSION refer to the current version and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.5 to 7.6</title>
      <link>/manual/develop/update/minor/75-to-76/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/75-to-76/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.6 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.6 to 7.7</title>
      <link>/manual/develop/update/minor/76-to-77/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/76-to-77/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.7 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.7 to 7.8</title>
      <link>/manual/develop/update/minor/77-to-78/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/77-to-78/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.8 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.8 to 7.9</title>
      <link>/manual/develop/update/minor/78-to-79/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/78-to-79/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.9 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update an Oracle WebLogic Installation from 7.9 to 7.10</title>
      <link>/manual/develop/update/minor/79-to-710/wls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/79-to-710/wls/</guid>
      <description>The following steps describe how to update the Camunda artifacts on an Oracle WebLogic application server in a shared process engine setting. For the entire procedure, refer to the update guide. If not already done, make sure to download the Camunda 7.10 Oracle WebLogic distribution.
The update procedure takes the following steps:
 Uninstall the Camunda Applications and Archives Replace Camunda Core Libraries Replace Optional Camunda Dependencies Maintain the Camunda 7 Configuration Install the Camunda Archive Install the Web Applications  In each of the following steps, the identifier $*_VERSION refers to the current versions and the new versions of the artifacts.</description>
    </item>
    
    <item>
      <title>Update Web Application Plugins from 7.4 to 7.5</title>
      <link>/manual/develop/update/minor/74-to-75/webapp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/74-to-75/webapp/</guid>
      <description>This page describes the changes in web application plugins.
Cockpit Dashboard Since 7.5, the dashboard and sections of the Cockpit have been re-organized and new names have been given to the plugin points.
Old plugins will still be visible on the dashboard until you change their namespace (from cockpit.dashboard to cockpit.dashboard.section).
Read more about cockpit dashboard plugins.
Available modules Since 7.5, the availability of modules in plugins has been changed. The following matrix shows availability of modules for plugins in the Camunda web applications:</description>
    </item>
    
    <item>
      <title>Update Web Application Plugins from 7.5 to 7.6</title>
      <link>/manual/develop/update/minor/75-to-76/webapp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/75-to-76/webapp/</guid>
      <description>This page describes the changes in web application plugins.
Cockpit Dashboard With Camunda 7.6, the dashboard and sections of Cockpit have been re-organized and new names have been given to the plugin points.
The cockpit.dashboard plugin point will allow to add your custom views at the bottom of the dashboard.
Metrics Read more about cockpit dashboard plugins.
Version changes The following modules have been updated to a newer version:</description>
    </item>
    
    <item>
      <title>Update Web Application Plugins from 7.6 to 7.7</title>
      <link>/manual/develop/update/minor/76-to-77/webapp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/manual/develop/update/minor/76-to-77/webapp/</guid>
      <description>This page describes the changes in web application plugins.
Tasklist translations With Camunda 7.7, some Tasklist translations have changed.
The previously called LESS_VARIABLES and MORE_VARIABLES have been renamed to SHOW_LESS and SHOW_MORE.</description>
    </item>
    
  </channel>
</rss>